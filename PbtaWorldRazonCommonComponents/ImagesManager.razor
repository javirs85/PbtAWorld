@using Microsoft.AspNetCore.Components.Forms
@inject ImagesService service

@if (!IsMaster && _IsForcedFromOutside)
{
	@* <div class="ImagesService d-flex flex-column align-items-center" 
		style="position:fixed; top:0; left:0; width:100%; height:100%;
				background-size:contain; background-repeat:no-repeat;
				background-image: url(@ForcedImage.src.Replace(" ", "%20"))">
		<div class="CloseButton" style="color:white;" @onclick=CloseWhenForced></div>
		<div>@ForcedImage.Name</div>
	</div> *@
	<ImageCard Image="ForcedImage" IsMaster=false IsForcedFullscreen=true ExitFullScreenClicked=CloseWhenForced />
}
else
{
	<div class="CloseButton" style="color:white;z-index:22;" @onclick=CloseRequest></div>
	<div class="ImagesService" style="position:fixed; top:0;">
		@if (IsMaster)
		{
			<div class="ButtonsShelf d-flex gap-1 p-3 align-items-center">
				<button class="btn btn-primary" @onclick=service.LoadAll>LoadAll</button>
				<button class="btn btn-primary" @onclick=service.SaveImagesInfo>SaveJson</button>
				<div>Images Loaded: @service.AllImages.Count</div>
			</div>
			<EditForm Model="this">
				<InputFile OnChange="service.SaveImageToDisk" class="form-control" style="background: var(--bs-gray-700); border: none; color: white;" />
			</EditForm>
			<div class="d-flex gap-1  overflow-auto flex-wrap">
				@foreach (var f in service.AllImages)
				{
					<ImageCard Image="f" IsMaster=IsMaster />
				}
			</div>
		}
		else
		{
			@if(service.AllImages.Count == 0)
			{
				<button class="btn btn-primary" @onclick=service.LoadAll>LoadAll</button>
			}
			<div class="d-flex gap-1  overflow-auto flex-wrap">
				@foreach (var f in service.AllImages.Where(x => x.IsVisibleForPlayers == true))
				{
					<ImageCard Image="f" IsMaster=IsMaster />
				}
			</div>
		}

	</div>
}


@code {
	[Parameter]
	public Guid GameId
	{
		get
		{
			return service.GameID;
		}
		set
		{
			service.GameID = value;
		}
	}

	[Parameter] public bool IsMaster { get; set; }
	[Parameter] public EventCallback CloseRequest { get; set; }

	bool _IsForcedFromOutside = false;
	PbtAImage ForcedImage = new();

	protected override void OnParametersSet()
	{
		service.UpdateUI -= Update;
		service.UpdateUI += Update;
		service.ForceFullScreenImageOnPlayers -= ForceFromOutside;
		service.ForceFullScreenImageOnPlayers += ForceFromOutside;
	}

	public void ForceFromOutside(object? sender, PbtAImage img)
	{
		@if(!IsMaster)
		{

			ForcedImage = img;
			_IsForcedFromOutside = true;
			InvokeAsync(StateHasChanged);
		}		
	}

	void CloseWhenForced()
	{
		_IsForcedFromOutside = false;
		CloseRequest.InvokeAsync();
	}

	void Update(object? sender, EventArgs e) => Update();
	void Update() => InvokeAsync(StateHasChanged);
}
