@using PbtALib;
@inject LastRollViewerService service

@if(true)
{
	<div class="FloatinCover @FloatinCoverClass d-flex flex-column gap-3 h-100 overflow-auto" @onclick=Hide>
		@foreach(var LastRoll in service.LastRolls)
		{
			<div class="d-flex flex-column p-2 border rounded @GetBorderTag(LastRoll)" style="background:@GetBackgroundTag(LastRoll);">
				@if(LastRoll.RollType == RollTypes.JustShowMoveWithNoRoll)
				{
					@if(LastRoll.Movement is not null)
					{
						<div class="MovementContent" style="color: white;">
							<div class="MovementHeader">@LastRoll.Movement.Title</div>
							@if (LastRoll.Movement.PreCondition != null && LastRoll.Movement.PreCondition.MainText != "")
							{
								<DecodedString Value=@LastRoll.Movement.PreCondition.MainText />
							}
							@if (LastRoll.Movement.PreCondition.Options != null && LastRoll.Movement.PreCondition.Options.Count > 0)
							{
								<ul>
									@foreach (var entry in LastRoll.Movement.PreCondition.Options)
									{
										<li><DecodedString Value="@entry" /></li>
									}
								</ul>
							}
							@if (LastRoll.Movement.ConsequencesOn6 != null && LastRoll.Movement.ConsequencesOn6.MainText != "")
							{
								<div class="d-flex mb-2">
									<div>
										<span class="MovementRangeMarker">@("<6"):</span>
									</div/> 
									<div>
										@LastRoll.Movement.ConsequencesOn6.MainText
										@if (LastRoll.Movement.ConsequencesOn6.Options != null && LastRoll.Movement.ConsequencesOn6.Options.Count > 0)
										{
											<ul>
												@foreach (var entry in LastRoll.Movement.ConsequencesOn6.Options)
												{
													<li><DecodedString Value="@entry" /></li>
												}
											</ul>
										}
									</div>
								</div>
							}
							@if ( LastRoll.Movement.ConsequencesOn79 != null &&  LastRoll.Movement.ConsequencesOn79.MainText != "")
							{
								<div class="d-flex mb-2">
									<div>
										<span class="MovementRangeMarker">7-9:</span>
									</div/> 
									<div>
										@LastRoll.Movement.ConsequencesOn79.MainText
										@if ( LastRoll.Movement.ConsequencesOn79.Options != null &&  LastRoll.Movement.ConsequencesOn79.Options.Count > 0)
										{
											<ul>
												@foreach (var entry in  LastRoll.Movement.ConsequencesOn79.Options)
												{
													<li><DecodedString Value="@entry" /></li>
												}
											</ul>
										}
									</div>
								</div>
							}
							@if ( LastRoll.Movement.ConsequencesOn10 != null &&  LastRoll.Movement.ConsequencesOn10.MainText != "")
							{
								<div class="d-flex">
									<div>
										<span class="MovementRangeMarker">>10:</span>
									</div/> 
									<div>
										@LastRoll.Movement.ConsequencesOn10.MainText
										@if ( LastRoll.Movement.ConsequencesOn10.Options != null &&  LastRoll.Movement.ConsequencesOn10.Options.Count > 0)
										{
											<ul>
												@foreach (var entry in  LastRoll.Movement.ConsequencesOn10.Options)
												{
													<li><DecodedString Value="@entry" /></li>
												}
											</ul>
										}
									</div>
								</div>
							}
						</div>
					}
				}
				else if(LastRoll is not null && LastRoll.IsRaw == false)
				{
					<div @onclick=Hide
						 class="LastRollHeader">
						<h4 class="text-light">@LastRoll.Movement.Title</h4>
						<i class="bi bi-x-lg text-light fs-2"></i>
					</div>
					<div class="LastRollContainer BoxPack" style="background:@GetBackgroundTag(LastRoll);">
							
						<div>
							@LastRoll.Roller <span class="small opacity-50">tira </span>
							@LastRoll.Movement.Title <span class="small opacity-50">con </span> 
							@if(LastRoll.RollType == RollTypes.Roll_Simple)
							{
								@LastRoll.StatString
							}
							else if(LastRoll.RollType == RollTypes.Roll_Advantage)
							{
								<span>ventaja</span>
							}
							else
							{
								<span>desventaja</span>
							}
						</div>
					
						<div class="d-flex gap-2 justify-content-center m-4">
							<div class="d-flex align-items-center gap-2">
								@if(LastRoll.RollType == RollTypes.Roll_Disadvantage)
								{
									<div class="dice">@LastRoll.d1</div><span> + </span>
									<div class="dice">@LastRoll.d2</div><span> + </span>
									<div class="dice crossed">@LastRoll.d3</div>
								}
								else if(LastRoll.RollType == RollTypes.Roll_Simple)
								{
									<div class="dice">@LastRoll.d1</div><span> + </span>
									<div class="dice">@LastRoll.d2</div>
								}
								else if(LastRoll.RollType == RollTypes.Roll_Advantage)
								{
									<div class="dice crossed">@LastRoll.d1</div> <span> + </span>
									<div class="dice">@LastRoll.d2</div> <span> + </span>
									<div class="dice">@LastRoll.d3</div>
								}

								<span> + </span>
								<div class="dice rounded-circle" style="border-style: none; background: #ffffff2e;">
									@LastRoll.bonus
								</div>
								=
							</div>
							<div class="RollResult">@LastRoll.Total</div>
						</div>
				
					</div>
			
						<div class="MoveDetails">
							@if (LastRoll.Movement.PreCondition != null && LastRoll.Movement.PreCondition.MainText != "")
							{
								<DecodedString Value=@LastRoll.Movement.PreCondition.MainText />
							}
							@if (LastRoll.Movement.PreCondition.Options != null && LastRoll.Movement.PreCondition.Options.Count > 0)
							{
								<ul style="padding-left:20px;">
									@foreach (var entry in LastRoll.Movement.PreCondition.Options)
									{
										<li><DecodedString Value="@entry" /></li>
									}
								</ul>
							}
							@if (LastRoll.Movement.ConsequencesOn6 != null && LastRoll.Movement.ConsequencesOn6.MainText != "")
							{
								<div class="d-flex mb-2">
									<div>
										<span class="LastRoll MovementRangeMarker">@("<6"):</span>
									</div/> 
									<div>
										@LastRoll.Movement.ConsequencesOn6.MainText
										@if (LastRoll.Movement.ConsequencesOn6.Options != null && LastRoll.Movement.ConsequencesOn6.Options.Count > 0)
										{
											<ul>
												@foreach (var entry in LastRoll.Movement.ConsequencesOn6.Options)
												{
													<li><DecodedString Value="@entry" /></li>
												}
											</ul>
										}
									</div>
								</div>
							}
							@if (LastRoll.Movement.ConsequencesOn79 != null && LastRoll.Movement.ConsequencesOn79.MainText != "")
							{
								<div class="d-flex mb-2">
									<div>
										<span class="LastRoll MovementRangeMarker">7-9:</span>
									</div/> 
									<div>
										@LastRoll.Movement.ConsequencesOn79.MainText
										@if (LastRoll.Movement.ConsequencesOn79.Options != null && LastRoll.Movement.ConsequencesOn79.Options.Count > 0)
										{
											<ul>
												@foreach (var entry in LastRoll.Movement.ConsequencesOn79.Options)
												{
													<li><DecodedString Value="@entry" /></li>
												}
											</ul>
										}
									</div>
								</div>
							}
							@if (LastRoll.Movement.ConsequencesOn10 != null && LastRoll.Movement.ConsequencesOn10.MainText != "")
							{
								<div class="d-flex">
									<div>
										<span class="LastRoll MovementRangeMarker">>10:</span>
									</div/> 
									<div>
										@LastRoll.Movement.ConsequencesOn10.MainText
										@if (LastRoll.Movement.ConsequencesOn10.Options != null && LastRoll.Movement.ConsequencesOn10.Options.Count > 0)
										{
											<ul>
												@foreach (var entry in LastRoll.Movement.ConsequencesOn10.Options)
												{
													<li><DecodedString Value="@entry" /></li>
												}
											</ul>
										}
									</div>
								</div>
							}
							@if (LastRoll.Movement.AdvancedConsequences != null && LastRoll.Movement.AdvancedConsequences.MainText != "")
							{
								<div class="d-flex">
									<div>
										<span class="LastRoll MovementRangeMarker">12+:</span>
									</div/> 
									<div>
										@LastRoll.Movement.AdvancedConsequences.MainText
										@if (LastRoll.Movement.AdvancedConsequences.Options != null && LastRoll.Movement.AdvancedConsequences.Options.Count > 0)
										{
											<ul>
												@foreach (var entry in LastRoll.Movement.AdvancedConsequences.Options)
												{
													<li><DecodedString Value="@entry" /></li>
												}
											</ul>
										}
									</div>
								</div>
							}
						</div>
				}
				else if (LastRoll is not null && LastRoll.IsRaw == true)
				{
					<div @onclick=Hide
						 class="LastRollHeader">
						<h4 class="text-light">@LastRoll.Roller</h4>
						<i class="bi bi-x-lg text-light fs-2"></i>
					</div>
					<div class="LastRollContainer BoxPack d-flex flex-row gap-2 justify-content-center align-items-center" style="background: @GetDamageBackgroundColor(LastRoll)">
						@if (LastRoll.RollType == RollTypes.Roll_Advantage)
						{
							<i class="bi bi-emoji-smile" style="font-size:20px; font-size:35px; color: green;"></i>
						}
						else if (LastRoll.RollType == RollTypes.Roll_Disadvantage)
						{
							<i class="bi bi-emoji-frown" style="font-size:20px; font-size:35px; color: black;"></i>
						}
				
						@foreach (var d in LastRoll.Dices)
						{
							<div class="RawRollerDice">
								<img src="imgs/DW/@d.Item1.ToImagePath()"/>
								<div class="RawDollerDiceNumber">@d.Item2</div>
							</div>
						}


						@if (LastRoll.ArmorPiercing != 0)
						{
							<div style="position:relative; width:50px;">
								<i class="bi bi-shield" style="position: absolute; top:-40px; left:0; font-size:45px; color: red;"></i>
								<div style="position: absolute; top:-26px; font-size:24px; left:10px; color: red;">-@LastRoll.ArmorPiercing</div>
							</div>
						}
						@if (LastRoll.IgnoresArmor)
						{
							<i class="bi bi-shield-slash-fill" style=" font-size:45px; color: red;"></i>
						}
				
					</div>
				}
				else
			{
				<div>Aún nadie ha tirado nada</div>
			}
			</div>
		}
	</div>
}

@code {
	[Parameter] public EventCallback OnExitRequest { get; set; }

	private AvailableGames Game  = AvailableGames.NotSet;
	private bool IsVisible = false;
	private string FloatinCoverClass
	{
		get {
			if (Game == AvailableGames.US)
				return "FloatinCoverUS";
			else
				return "FloatingCoverDefault";
		}
	}

	protected override void OnParametersSet()
	{
		service.UpdateNeeded += (o, e) => { Update(); };
		service.SetGame += (o, game) => { Game = game; Update(); };
		//service.ShowOverlay += (o, e) => { InvokeAsync(() => {Show(); }); };
	}

	private void Update() => InvokeAsync(() => { StateHasChanged(); });

	private string GetDamageBackgroundColor(IRollReport LastRoll)
	{

		if (LastRoll.RollType == RollTypes.Roll_Simple || LastRoll.RollType == RollTypes.Roll_SimplePlus1d6  )
			return "white";
		if (LastRoll.RollType == RollTypes.Roll_Disadvantage || LastRoll.RollType == RollTypes.Roll_DisadvantagePlus1d6)
			return "#e9acac";
		if (LastRoll.RollType == RollTypes.Roll_Advantage || LastRoll.RollType == RollTypes.Roll_AdvantagePlus1d6)
			return "#dce9dc";
		else
			return "white";
	}

	private string GetBorderTag(IRollReport roll)
	{
		if (roll.Total >= 10) return "border-success";
		if (roll.Total >= 7) return "border-warning";
		else return "border-danger";
	}

	private string GetBackgroundTag(IRollReport roll)
	{
		if (roll.Total >= 10) return "#00230c";
		if (roll.Total >= 7) return "#3b1f02";
		else return "#330202";
	}

	private string GetLastRollBoxColor(IRollReport LastRoll)
	{
		if (LastRoll.Total >= 10) return "TotalSuccess";
		else if (LastRoll.Total >= 7) return "HalfSuccess";
		else return "FailedRoll";
	}

	public void Show()
	{
		InvokeAsync(() =>
		{
			IsVisible = true;
			StateHasChanged();
		});		
	}

	public void Hide()
	{
		IsVisible = false;
		OnExitRequest.InvokeAsync();
		StateHasChanged();
	}
}
