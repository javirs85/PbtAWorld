@using Microsoft.AspNetCore.Components.Forms
@using PbtALib;
@using PbtALib.ifaces
@using PbtaWorldRazonCommonComponents;
@inject VTTService service;
@inject VTTLocalManagerService VTTViewer

<div class="DefinitionsSelector">
	@if(ShowMoves)
	{
		<div class="d-flex flex-column h-100" style="width: 580px;">
			<button class="btn btn-dark" @onclick=@(()=>{ShowMoves = !ShowMoves;})>Monsters</button>
			<div class="p-1">
				@if(VTTViewer.SelectedToken is not null && VTTViewer.SelectedToken.Monster is not null && VTTViewer.SelectedToken.Monster.Moves is not null)
				{
					<MasterMovePackViewer MovesPack="@(new MasterMovePack {Title = @VTTViewer.SelectedToken.Monster.Name, Moves = VTTViewer.SelectedToken.Monster.Moves})"/>
				}
				@if(VTTService.Game is not null && VTTService.Game.TextBook is not null && VTTService.Game.TextBook.MasterMovesPacks is not null)
				{
					@foreach (var pack in VTTService.Game?.TextBook?.MasterMovesPacks)
					{
						<MasterMovePackViewer MovesPack="@pack" />
					}
				}				
			</div>
		</div>
	}
	else
	{
		<div class="d-flex flex-column h-100">
			<button class="btn btn-dark" @onclick=@(()=>{ShowMoves = !ShowMoves;})>Moves</button>
			@if (Game is not null && Game.MonsterDefinitionsInCurrentScene is not null)
			{
				@foreach (var md in Game.MonsterDefinitionsInCurrentScene)
				{
					<div class="@(md.ID == VTTViewer.SelectedToken?.Monster?.ID?"Selected":"NotSelected")">
						<div class="AddToFightButton" @onclick=@(()=>{AddToFight(md);})><i class="bi bi-gitlab text-danger"></i></div>
						<EnemyCard Game="Game" monster="md" />
					</div>
				}
			}
		</div>
	}
	
</div>
<div class="VTT justify-content-center flex-grow-1"
		style="overflow:auto;"
		@onclick=VTTViewer.Hide
		@oncontextmenu:preventDefault @oncontextmenu:stopPropagation
		@onclick:stopPropagation=true>
	<div class="d-flex d-flex align-items-center justify-content-center w-100 h-100" style="overflow:hidden; background:#000000a4;"  @onclick:stopPropagation=true>
		@if (VTTViewer.IsMaster)
		{
			<div class="MasterSelector align-items-center d-flex gap-1" @onclick:stopPropagation>
				<div class="d-flex flex-column flex-grow-1">
					<div class="d-flex gap-1">
						<EditForm Model="this" class="d-flex gap-1">
							<InputSelect class="form-select" @bind-Value=MasterSelection>
								@foreach (var v in Enum.GetValues(typeof(VTTTokens)))
								{
									<option value="@v">@v</option>
								}
							</InputSelect>
							<button class="btn btn-primary" @onclick=@(()=>{service.AddToken(MasterSelection); VTTViewer.SelectedToken = service.Tokens.Last();})><i class="bi bi-plus"></i></button>
						</EditForm>
	
						<button class="btn btn-dark" @onclick=@(()=>{Show(ShowingOptions.FOG);})>FOG</button>
						<button class="btn btn-success" @onclick=@(()=>{Show(ShowingOptions.props);})>Props</button>
						<button class="btn btn-secondary" @onclick=@(()=>{Show(ShowingOptions.dungeon);})>Dungeon</button>

						<EditForm Model="service" class="ms-2 d-flex gap-1">
							
							<InputSelect class="form-select" @bind-Value=service.CurrentMap>
								@foreach (var v in Enum.GetValues(typeof(VTTService.VTTMaps)))
								{
									<option value="@v">@v</option>
								}
							</InputSelect>
						</EditForm>

						<button class="btn btn-danger" @onclick=VTTViewer.Hide>CLOSE VTT</button>
						
					</div>
					@if (CurrentlyShowing == ShowingOptions.FOG)
					{
						<div class="d-flex gap-1">
							<button class="btn btn-dark" @onclick=ToggleFOGCreationMode>@(IsCreatingFogOfWar ? "Stop FOG" : "Start FOG")</button>
							<button class="btn btn-info" @onclick=TogleFOWShape>Toggle shape</button>
							<button class="btn btn-danger" @onclick=service.GenerateFOWJSON>GenerateJson</button>
							<button class="btn btn-danger" @onclick=service.LoadFOW>LoadJson</button>
						</div>
					}
					else if (CurrentlyShowing == ShowingOptions.props)
					{
						<div class="d-flex gap-1 align-items-center" style="overflow:auto; max-width: calc(100vw - 400px);">
							@foreach(var t in Enum.GetValues(typeof(VTTTokens)))
							{
								@if(((VTTTokens)t).IsForest())
								{
									<div class="propSelectionItem" @onclick=@(()=>{service.AddPropToMap((VTTTokens)t); VTTViewer.SelectedToken = service.Props.Last();})>
										<img src="@(Prop.GetImagePath((VTTTokens)t))" />
									</div>
								}
							}
						</div>
					}
					else if (CurrentlyShowing == ShowingOptions.dungeon)
					{
						<div class="d-flex gap-1 align-items-center" style="overflow:auto; max-width: calc(100vw - 400px);">
							@foreach (var t in Enum.GetValues(typeof(VTTTokens)))
							{
								@if (((VTTTokens)t).IsDungeonProp())
								{
									<div class="propSelectionItem" @onclick=@(()=>{service.AddPropToMap((VTTTokens)t); VTTViewer.SelectedToken = service.Props.Last();})>
										<img src="@(Prop.GetImagePath((VTTTokens)t))" />
									</div>
								}
							}
						</div>
					}
				</div>
				<div style="width: 400px;"></div>
			</div>
		}
		<div class="VTTContainer"
			 style=" top:@(MapPosY+"px"); left:@(MapPosX+"px");"
			@onmousedown=Click 
			@onmousemove=Drag 
			@onmouseup=UnClick
			@onmouseleave=Exit
			@oncontextmenu:preventDefault 
			@oncontextmenu:stopPropagation>
			<img id="Map" src="@MapURL"/>
			<div class="VTTMain" @oncontextmenu=@(()=>{;}) @oncontextmenu:preventDefault @oncontextmenu:stopPropagation>
				@foreach (var t in service.Tokens)
				{
					@if(t.ID == VTTTokens.FogOfWar)
					{
						<div class="FOW 
								@(t.IsRound?"Round":"")
								@(VTTViewer.IsMaster?"FOWMaster":"FOWPlayer")
								@(t.Status == TokenStatus.Hidden?"FOWHidden":"")" 
								style="
									@(VTTViewer.SelectedToken == t?"border:1px solid red;":"")
									top:@(t.Y+"px"); 
									left:@(t.X+"px");
									width:@(t.FowWidth+"px");
									height:@(t.FowHeight+"px");">
							@if (VTTViewer.IsMaster && VTTViewer.SelectedToken == t)
							{
								<div class="PropTools">
									<button class="btn btn-danger" @onclick=@(()=>{service.DeleteToken(t); VTTViewer.SelectedToken = null;})><i class="bi bi-trash3"></i></button>
									<button class="btn btn-info" @onclick=TogleFOWShape><i class="bi bi-square"></i><i class="bi bi-circle"></i></button>
								</div>
							}							
						</div>
					}
					else
					{
						<div class="VTTToken 
							@(VTTViewer.IsMaster?"Master_"+t.Status.ToString():"Player_"+t.Status.ToString())
							@(VTTViewer.SelectedToken is not null && VTTViewer.SelectedToken.Guid == t.Guid?"Selected":"")"
							style="
								top:@(t.Y+"px"); left:@(t.X+"px"); 
								width: @(t.SizePixels+"px");
								height: @(t.SizePixels+"px");
								border-radius:@(t.SizePixels+"px");
								background-image:url(@("imgs/VTT/Tokens"+t.SizePixels+".png"));
								background-position-x:@(t.ImgX+"px"); 
								background-position-y:@(t.ImgY+"px");">
							<div class="TokenStatus @(VTTViewer.IsMaster?"Master_"+t.Status.ToString():"Player_"+t.Status.ToString())
								@(VTTViewer.SelectedToken is not null && VTTViewer.SelectedToken.Guid == t.Guid?"Selected":"")">
							</div>
							@if(t.Status != TokenStatus.Dead)
							{
								<div class="LifeContainer">
									<div class="LifeBar" style="width:@(t.PercentageLife)%; background:@(t.LifeBarColor);"></div>
								</div>
							}					
							@if(VTTViewer.IsMaster && VTTViewer.SelectedToken == t)
							{
								<div class="PropTools Token">
									<button class="btn btn-danger" @onclick=@(()=>{service.DeleteToken(t); VTTViewer.SelectedToken = null;})><i class="bi bi-trash3"></i></button>
									<EditForm Model="VTTViewer.SelectedToken">
										<div class="d-flex gap-1 bg-dark text-white align-items-center ">
											<label>MaxHP</label>
											<InputNumber @bind-Value=VTTViewer.SelectedToken.maxHP style="width:40px;"/>
											<label>HP</label>
											<InputNumber @bind-Value=VTTViewer.SelectedToken.HP style="width:40px;" />
										</div>
										<InputSelect class="form-select" @bind-Value=VTTViewer.SelectedToken.Status>
											@foreach (var v in Enum.GetValues(typeof(TokenStatus)))
											{
												<option value="@v">@v</option>
											}
										</InputSelect>
										<InputSelect class="form-select" @bind-Value=VTTViewer.SelectedToken.Size>
											@foreach (var v in Enum.GetValues(typeof(Token.Sizes)))
											{
												<option value="@v">@v</option>
											}
										</InputSelect>
										<InputSelect class="form-select" @bind-Value=VTTViewer.SelectedToken.ID>
											@foreach (var v in Enum.GetValues(typeof(VTTTokens)))
											{
												<option value="@v">@v</option>
											}
										</InputSelect>
										<InputSelect class="form-select" @bind-Value=VTTViewer.SelectedToken.MonsterKeyCode>
											@if(Game is not null)
											{
												@foreach (var m in Game.MonsterDefinitionsInCurrentScene)
												{
													<option value="@m.ID">@m.Name</option>
												}
											}											
										</InputSelect>
									</EditForm>
								</div>
							}

							<div class="NameContainer">@t.Character?.Name</div>
						</div>
					}
				}
				@foreach (var p in service.Props)
				{
					<div class="Prop
							@(VTTViewer.IsMaster?"Master_"+p.Status.ToString():"Player_"+p.Status.ToString())
							@(VTTViewer.SelectedToken is not null && VTTViewer.SelectedToken.Guid == p.Guid?"Selected":"")"
						 style="top:@(p.Y+"px"); left:@(p.X+"px");">
						<img src="@p.imgURL" alt="prop" style=" transform:rotate(@(p.rotation+"deg"))" />
						@if(VTTViewer.SelectedToken == p)
						{
							<div class="PropTools d-flex gap-1 flex-wrap">
								<button class="btn btn-danger" @onclick=@(()=>{service.DeleteProp(p); VTTViewer.SelectedToken = null;})><i class="bi bi-trash3"></i></button>
								<button class="btn btn-primary" @onclick=@(()=>{((Prop)p).RotateRight();})><i class="bi bi-arrow-clockwise"></i></button>
								@if(p.IsDoor)
								{
									<button class="btn btn-success" @onclick=@(()=>{((Prop)p).OpenDoor();})><i class="bi bi-door-open"></i></button>
									<button class="btn btn-info" @onclick=@(()=>{((Prop)p).CloseDoor();})><i class="bi bi-door-closed"></i></button>
									<button class="btn btn-dark" @onclick=@(()=>{((Prop)p).GateDoor();})><i class="bi bi-bank"></i></button>
								}								
							</div>
						}
					</div>
				}
				
					
			</div>
		</div>
	</div>	
</div>

@code {
	[Parameter] public IGameController? Game { get; set; }

	bool ShowMoves = false;

	protected override void OnParametersSet()
	{
		service.UpdateUI -= Update;
		service.UpdateUI += Update;
		VTTViewer.UpdateUI -= Update;
		VTTViewer.UpdateUI += Update;
	}

	string MapURL
	{
		get
		{
			var url = "_content/PbtaWorldRazonCommonComponents/imgs/Maps/";
			var img = service.CurrentMap switch
			{
				VTTService.VTTMaps.farm => "farm.jpg",
				VTTService.VTTMaps.Bandit1 => "Bandit1.jpg",
				VTTService.VTTMaps.Swamp => "Swamp.jpg",
				VTTService.VTTMaps.UDTBasic => "UDT.png",
				VTTService.VTTMaps.UDT_Forest => "UDT_Forest.png",
				_ => ""
			};

			return url + img;
		}
	}

	//placeholder for the combobox
	VTTTokens MasterSelection = VTTTokens.Black1;

	private bool IsMoving = false;
	private bool IsCreatingFogOfWar = false;
	private enum FogOfWarCreationSteps {Start, Size, Finish}
	private FogOfWarCreationSteps FOWStep = FogOfWarCreationSteps.Start;
	private Token CurrentlyCreatingFOW = new Token();
	private bool IsCreatingFogOgWarIni = true;
	private double MapPosX = 0;
	private double MapPosY = 0;

	private bool IsShowingFOGOptions = false;

	enum ShowingOptions {nothing, FOG, props, dungeon};
	ShowingOptions CurrentlyShowing = ShowingOptions.nothing;

	void AddToFight(Monster m)
	{
		var newToken =service.AddToken(m.FavouriteToken);
		newToken.Monster = m;
		VTTViewer.SelectedToken = newToken;
	}

	private void Click(MouseEventArgs e)
	{
		if(e.OffsetY > 40)
		{
			if(IsCreatingFogOfWar)
			{
				if(e.Button == 0)
				{
					if(FOWStep == FogOfWarCreationSteps.Start)
					{
						CurrentlyCreatingFOW = service.AddToken(VTTTokens.FogOfWar);
						CurrentlyCreatingFOW.X = (int)e.OffsetX;
						CurrentlyCreatingFOW.Y = (int)e.OffsetY;
						CurrentlyCreatingFOW.Status = TokenStatus.Normal;

						FOWStep = FogOfWarCreationSteps.Size;
					}
					else if(FOWStep == FogOfWarCreationSteps.Size)
					{
						FOWStep = FogOfWarCreationSteps.Start;
						IsCreatingFogOfWar = false;
					}
				}
			}
			else
			{
				if (e.Button == 0)
				{
					if (VTTViewer.IsMaster)
					{
						var t = service.SelectToken(e.OffsetX, e.OffsetY);
						if (t is not null && t != VTTViewer.SelectedToken)
							VTTViewer.SelectedToken = t;
						else if (t is not null && t == VTTViewer.SelectedToken)
							VTTViewer.SelectedToken = null;
						else
						{
							IsMoving = true;
						}
					}
					else
						IsMoving = true;

				}
				else if (e.Button == 2)
				{
					if (service.SelectToken != null)
						service.MoveToken(VTTViewer.SelectedToken, e.OffsetX, e.OffsetY);
				}
			}			
		}
	}

	private void Drag(MouseEventArgs e)
	{
		if(IsMoving)
		{
			MapPosX += e.MovementX;
			MapPosY += e.MovementY;
		}
		else if (IsCreatingFogOfWar)
		{
			if(FOWStep == FogOfWarCreationSteps.Size)
			{
				CurrentlyCreatingFOW.FowWidth = ((int)e.OffsetX)- CurrentlyCreatingFOW.X ;
				CurrentlyCreatingFOW.FowHeight = ((int)e.OffsetY)-CurrentlyCreatingFOW.Y;
			}
		}
	}

	void ToggleFOGCreationMode() => IsCreatingFogOfWar = !IsCreatingFogOfWar;

	private void DeleteToken()
	{
		if(VTTViewer.SelectedToken is not null)
			service.DeleteToken(VTTViewer.SelectedToken);
	}

	private void Show(ShowingOptions o)
	{
		if(o == CurrentlyShowing)
			CurrentlyShowing = ShowingOptions.nothing;
		else
			CurrentlyShowing = o;
	}

	public void TogleFOWShape()
	{
		VTTViewer.SelectedToken.IsRound = !VTTViewer.SelectedToken.IsRound;
	}

	private void UnClick() => IsMoving = false;
	private void Exit() => IsMoving = false;



	private void Update(object? sender, EventArgs e)
	{
		InvokeAsync(StateHasChanged);
	}
}
