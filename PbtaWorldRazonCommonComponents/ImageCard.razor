@using Microsoft.AspNetCore.Components.Forms
@inject ImagesService service

@if (_IsFullScreen)
{
	<div class="d-flex align-items-center justify-content-center"
		 @onclick=CloseFullScreenClick @onclick:stopPropagation
		 style="background-color:red; position:absolute; top:0; left:0; width:100%; height:100%; z-index:1000; background:black;
				background-image: url(@Image.src.Replace(" ", "%20")); background-size:contain; background-repeat:no-repeat;">
		<div class="CloseButton" />
		<div style="position: fixed; bottom:20px; left: 20px;">
			<div style="border-radius: 25px;
						height: 34px;
						border: black 1px solid;
						background: black;
						padding: 10px 30px;
						color: white;
						display: flex;
						align-items: center;">

				@Image.Name
			</div>
		</div>
		
	</div>
}
else
{
	<div class="ImageCard d-flex align-items-center" style="position: relative; background:black;">
		<img src="@Image.src" alt="@Image.Name" style="max-width:@(ForcedSize)px;max-height:@(ForcedSize)px;" />
		<div class="d-flex flex-column gap-2" style="position:absolute; top:0px; right: 0px;">
			<div class="d-flex align-items-center justify-content-center" style=" @(IsMaster?"":"opacity:0.25;")
				cursor:pointer; 
				width: 30px; 
				color:white;">
				<i class="bi bi-arrow-up-right-square" @onclick=RequestFullScreen @onclick:stopPropagation
				   style=""></i>
			</div>
			@if(IsMaster)
			{
				@if (Image.IsVisibleForPlayers)
				{
					<div class="d-flex align-items-center justify-content-center" style="
					right: 2px; color: green; cursor:pointer;
					width: 30px; height:30px; background-color:#FFFFFF;
					padding:10px; border-radius:50%;" @onclick=ToggleVisibility>
						<i class="bi bi-unlock-fill" 
						   style="pointer-events:none;"></i>
					</div>
				}
				else
				{
					<div class="d-flex align-items-center justify-content-center" style="
					right: 2px; color: white; cursor:pointer;
					width: 30px; height:30px; background-color:red;
					padding:10px; border-radius:50%;" @onclick=ToggleVisibility>
						<i class="bi bi-lock-fill" 
						   style="pointer-events:none;"></i>
					</div>
				}
				<div class="d-flex align-items-center justify-content-center" style="
					right: 2px; color: white; cursor:pointer;
					width: 30px; height:30px; background-color:#315ab2;
					padding:10px; border-radius:50%;" @onclick=@(()=>{service.SendImageToAllPlayers(Image);})>
					<i class="bi bi-send-fill" 
					   style="pointer-events:none;"></i>
				</div>

				@if(!IsInPeopleViewer)
				{
					<div class="d-flex align-items-center justify-content-center mt-4" style="
						right: 2px; color: #eab7b7; cursor:pointer;
						width: 30px; height:30px; background-color:#960000;
						padding:10px; border-radius:50%;" @onclick=@(()=>{service.DeleteImage(Image);})>
						<i class="bi bi-trash3-fill" 
						   style="pointer-events:none;"></i>
					</div>
				}
				
			}
		</div>
		<div class="flex-grow-1"></div>
		<div class="d-flex justify-content-center align-items-center rounded" 
			style="position:absolute; bottom:6px; width:100%;">
			<div style="border-radius: 25px;
						height: 34px;
						border: black 1px solid;
						background: black;
						padding: 10px 30px;
						color: white;
						display: flex;
						align-items: center;">
				@if(!IsEditing)
				{
					<div class="d-flex gap-1">
						@Image.Name
						@if(IsMaster)
						{
							<div class="ms-2" style="margin-right:0; cursor:pointer;" @onclick=@(()=>{IsEditing = true;})>
								<i class="bi bi-pencil-fill"></i>
							</div>
						}
					</div>
				}
				else
				{
					<div class="d-flex gap-1">
						<EditForm Model="Image">
							<InputText class="form-control" @bind-Value=NewName></InputText>
							<button class="btn btn-primary" @onclick=@(async ()=>{ await service.RenameFile(Image, NewName); IsEditing=false;})>Commit</button>
								<button class="btn btn-danger" @onclick=@(()=>{IsEditing = false;})>Cancel</button>
						</EditForm>
					</div>
				}
				
			</div>
		</div>
	</div>
}


@code {
	[Parameter] public PbtAImage Image { get; set; }
	[Parameter] public bool IsMaster { get; set; }
	[Parameter] public bool IsInPeopleViewer { get; set; }
	[Parameter] public EventCallback ExitFullScreenClicked { get; set; }
	[Parameter] public bool IsForcedFullscreen { get; set; } = false;
	[Parameter] public float ForcedSize { get; set; } = 300.0f;

	string NewName = "";
	bool IsEditing = false;

	string scapedURL => System.Web.HttpUtility.UrlEncode(Image.src);

	bool _IsFullScreen = false;
	bool IsFullScreenFromOutside = false;

	protected override void OnParametersSet()
	{
		NewName = Image.Name;
		if (IsForcedFullscreen) _IsFullScreen = true;
	}

	void CloseFullScreenClick()
	{
		_IsFullScreen = false;
		if(IsForcedFullscreen)
		{
			IsForcedFullscreen = false;
			ExitFullScreenClicked.InvokeAsync(this);
		}
	}

	void RequestFullScreen() => _IsFullScreen = true;

	void ToggleVisibility()
	{
		Image.IsVisibleForPlayers = !Image.IsVisibleForPlayers;
		service.ForeceUpdateInAllClients();
	}
}
