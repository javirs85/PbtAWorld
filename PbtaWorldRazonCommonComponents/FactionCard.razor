@using PbtALib
@using PbtALib.ifaces
@inject CharacterSelectorService CharacterSelectorService

<div class="FactionCard d-flex gap-1 justify-content-evenly align-items-end w-100">
	<div class="d-flex flex-column" style="width: 93px; padding-left: 10px;">
		<div class="d-flex gap-1 align-items-center" alt="Fuerza">
			<i class="bi bi-lightning-charge-fill opacity-75"></i>
			<div class="d-flex">
				@if(IsMaster)
				{
					<i class="bi bi-caret-down-fill" @onclick=PowerDown></i>
					<div>@Faction.Strength</div>
					<i class="bi bi-caret-up-fill" @onclick=PowerUp></i>
				}
				else
				{
					<div>@Faction.Strength</div>
				}
			</div>
			<div class="d-flex align-items-center" style="font-size:0.5em;">
				<TrackViewer CanEdit=IsMaster Color="RedCheckBox.Styles.bootstrapDark" @bind-Value="LocalStrengthTemp" MaxValue="3" />
			</div>
		</div>
		<div class="d-flex gap-1 align-items-center" alt="Tamaño">
			<i class="bi bi-bounding-box-circles opacity-75" style="@(IsMaster?"font-size:8px;":"")"></i>
			@if (IsMaster)
			{
				<i class="bi bi-caret-down-fill" @onclick=SizeDown></i>
				<div>@Faction.Size</div>
				<i class="bi bi-caret-up-fill" @onclick=SizeUp></i>
			}
			else
			{
				<div>@Faction.Size</div>
			}
			<div class="d-flex align-items-center" style="font-size:0.5em;">
				<TrackViewer CanEdit=IsMaster Color="RedCheckBox.Styles.bootstrapDark" @bind-Value="LocalSizeTemp" MaxValue="3" />
			</div>
		</div>
	</div>
	<div class="d-flex flex-grow-1">	
		<div class="flex-grow-1 flex-column d-flex align-items-start">
			<div class="FactionName h-100 d-flex align-items-center flex-fill" 
				style="@(Faction.Name.Length > 13?"text-align: left;  font-size: 1.3em !important;":"text-align: center; font-size: 1.5em;")">
				@if(IsMaster)
				{
					<HiddeableInput @bind-Value=Faction.Name EditFinished="SpreadChanges"/>
				}
				else
				{
					@Faction.Name
				}
			</div>
			@if (IsMaster)
			{
				<HiddeableInput @bind-Value=Faction.CurrentlyWorkingOn EditFinished="SpreadChanges" />
			}
			else
			{
				@if(Faction.Status != FactionStatuses.Manteniendo)
				{
					<div class="text-left">@Faction.CurrentlyWorkingOn</div>
				}
			}
		</div>
		<div class="CurrentlyDoingText text-align-left" style=" font-size:0.8em; opacity:0.75;">
			
			<div class="GrowingIcon d-flex flex-column gap-0 align-items-center">	
				@if(IsMaster)
				{
					<i class="bi bi-arrows-angle-expand FactionStatus @(Faction.Status==FactionStatuses.Creciendo?"FactionStatusSelected":"FactionStatusNot")" @onclick=@(()=>{SetStatus(FactionStatuses.Creciendo);})></i>
					<i class="bi bi-arrows FactionStatus @(Faction.Status == FactionStatuses.Manteniendo?"FactionStatusSelected":"FactionStatusNot")" @onclick=@(()=>{SetStatus(FactionStatuses.Manteniendo);})></i>
					<i class="bi bi-arrows-angle-contract FactionStatus @(Faction.Status == FactionStatuses.Menguando?"FactionStatusSelected":"FactionStatusNot")" @onclick=@(()=>{SetStatus(FactionStatuses.Menguando);})></i>
					<i class="bi @(Faction.IsDebilitated?"bi-droplet-fill text-danger":"bi-droplet opacity-25")" @onclick=DebilitatedClicked></i>
				}
				else
				{
					@if(Faction.Status == FactionStatuses.Creciendo)
					{
						<i class="bi bi-arrow-bar-up FactionStatus" />
					}
					else if (Faction.Status == FactionStatuses.Menguando)
					{
						<i class="bi bi-arrow-bar-down FactionStatus" />
					}
					else
					{
						<i class="bi bi-arrows FactionStatus" />
					}
				}
			</div>
		</div>
	</div>	
</div>

@code {
	[Parameter] public PbtAFaction Faction { get; set; } = new();
	[Parameter] public bool IsMaster { get; set; } = false;
	[Parameter] public IGameController Game { get; set; }
	private bool initialized = false;

	protected override void OnParametersSet()
	{
		if(!initialized)
		{
			LocalStrengthTemp = Faction.Strength;
			LocalSizeTemp = Faction.Size;
			initialized = true;
		}
	}

	private void SetStatus(FactionStatuses newStatus)
	{
		if(IsMaster)
		{
			Faction.Status = newStatus;
			SpreadChanges();
		}
	}

	private void DebilitatedClicked()
	{
		if(IsMaster)
		{
			Faction.IsDebilitated = !Faction.IsDebilitated;
			SpreadChanges();
		}
	}

	private int LocalStrengthTemp
	{
		get
		{
			return Faction.StrengthTemp;
		}
		set
		{
			if (Faction.StrengthTemp != value)
			{
				Faction.StrengthTemp = value;
				SpreadChanges();
			}
		}
	}
	private int LocalSizeTemp
	{
		get
		{
			return Faction.SizeTemp;
		}
		set
		{
			if (Faction.SizeTemp != value)
			{
				Faction.SizeTemp = value;
				SpreadChanges();
			}
		}
	}

	private async Task PowerUp()
	{
		Faction.Strength++;
		await Update();
	}
	private async Task PowerDown()
	{
		Faction.Strength--;
		await Update();
	}
	private async Task SizeUp()
	{
		Faction.Size++;
		await Update();
	}
	private async Task SizeDown()
	{
		Faction.Size--;
		await Update();
	}

	private async Task Update()
	{
		SpreadChanges();
	}

	private void SpreadChanges() => Game.UpdatePeopleViewerInAllClients();

}
