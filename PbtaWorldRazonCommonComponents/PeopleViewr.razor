@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json
@using PbtALib.ifaces
@inject ImagesService ImagesService
@inject CharacterSelectorService CharacterSelectorService

<div class="@(PreventFullScreenMode?"":"FullScreenModal")" @onclick=ExitRequested>
	<div class="PeopleModalBody" @onclick:stopPropagation style="@(CharacterSelectorService.CurrentMode == CharacterSelectorService.SelectionModes.character?"":"background:black !important;  border:none !important;")">
		<div class="CloseButton" @onclick=ExitRequested />
		
		@if(Game is not null && Game.People is not null)
		{
			@if(CurrentlyViewing == Views.FactionsList)
			{
				<div class="d-flex flex-column w-100 gap-1">
					<div class="PlayersContainer d-flex align-items-center gap-1">
						<div class="me-2">Jugadores:</div>
						@foreach (var p in CharacterSelectorService.Players)
						{
							<div class="@(CharacterSelectorService.CurrentMode == CharacterSelectorService.SelectionModes.character?"CharacterBox":"")" style="background:black;" @onclick=@(()=>{CharacterSelectorService.FinishSelection(p);})>
								@p.Name
							</div>
						}
					</div>
					<div class="d-flex w-100 gap-2">
						
						@foreach(var c in Game.People.Circles)
						{
							<div class="CircleContainer @(IsCurrentCircle(c)? "SuperWide" : "Small") @(IsMaster?"":"opacity:1;")">
								<div class="header" @onclick=@(()=>{SelectCircle(c);})>
									@c.Name
									@if(IsMaster && IsCurrentCircle(c))
									{
										<button class="btn btn-outline-success" @onclick=@(()=>{EditCircle(c);}) @onclick:stopPropagation><i class="bi bi-pencil"></i></button>
									}
								</div>

								<div class="CircleBody">
									@foreach(PbtAFaction f in c.Factions)
									{
										<div class="FactionContainer @(f.Status == FactionStatuses.Manteniendo?"opacity-50":"")"
											 style="@(f.IsDebilitated?"background:#370404;":"")">
											<div class="header" style="@(f.IsDebilitated?"background:#370404;":"")" @onclick=@(()=>{SelectFaction(f);})>
												<FactionCard Faction="f" IsMaster="IsMaster" Game="Game"/>
											</div>
											<div class="FactionBody">
												@foreach(PbtACharacter ch in f.Members)
												{
													<div class="@(CharacterSelectorService.CurrentMode == CharacterSelectorService.SelectionModes.character?"CharacterBox":"")"
														 @onclick=@(()=>{CharacterClicked(ch);})>
														@if(HasImage(ch))
														{
															<ImageCard Image="GetImage(ch)" IsMaster=IsMaster IsInPeopleViewer="true" ForcedSize="150" />
														}
														else
														{
															<div class="p-3 rounded" style="background:#2f2f2f;">
																<h4>@if(IsMaster)
																	{
																		<HiddeableInput @bind-Value=ch.Name EditFinished="SpreadChanges" />
																	}
																	else
																	{
																		@ch.Name
																	}
																</h4>
															</div>
														}

														@if (IsMaster && IsCurrentCircle(c))
														{
															<div class="CharacterDetailsBox">
																<div>
																	<span>Quiere</span>
																	@ch.WhatWants
																</div><div>
																	<span>NO quiere</span>
																	@ch.WhatDoesNotWant
																</div><div>
																	<span>Complicación</span>
																	@ch.Complication
																</div>
																<button class="btn btn-outline-success" style="width:40px;" @onclick=@(()=>{EditCharacter(ch);}) @onclick:stopPropagation><i class="bi bi-pencil"></i></button>
															</div>
														}
																							
													</div>
												}
											</div>
											<div class="p-2 d-flex">
												@if (IsMaster && SelectedFaction == f)
												{
													<div class="d-flex flex-grow-1 align-items-center gap-1">
														<EditForm Model="f" class="w-100">
															<InputTextArea class="form-control" @bind-Value=f.Assets @onfocusout=SpreadChanges />
														</EditForm>
														<i class="bi bi-send"></i>
													</div>
												}
												else
												{
													<DecodedString Value="@f.Assets" />
												}
											</div>

											@if (IsMaster && IsCurrentCircle(c) && IsCurrentFaction(f))
											{
												<button class="btn btn-primary" @onclick=@(()=>{Game.People.AddCharacterToFaction(new PbtACharacter{Name = "New Char", ID = Guid.NewGuid()}, f);})>Add Character</button>
											}
										</div>
									}
								</div>

								@if(IsMaster && SelectedCircle is not null && SelectedCircle == c)
								{
									<div class="d-flex gap-1 p-1">
										<button class="btn btn-primary" @onclick=@(()=>{Game.People.AddNewFactionToCircle(c);})>Add Faction</button>
										<button class="btn btn-danger" @onclick=@(()=>{Delete(c);})><i class="bi bi-trash3"></i></button>
									</div>
								}
						
							</div>
						}				
					</div>
					@if (IsMaster)
					{
						<button class="btn btn-primary" @onclick=AddNewCircle>Add circle</button>
						<button class="btn btn-primary" @onclick=SaveChanges>Save changes</button>
						<a href="@($"/GameImages/{GameID.ToString()}/People.json")">Download json</a>
						<EditForm Model="this">
							<InputFile OnChange="LoadPeopleJson" class="form-control" style="background: var(--bs-gray-700); border: none; color: white;" />
						</EditForm>
					}
					else
					{
						
					}
				</div>
			}
			else if (CurrentlyViewing == Views.FactionView)
			{
			
			}
			else if (CurrentlyViewing == Views.CharacterView)
			{
			
			}
			else if (CurrentlyViewing == Views.CircleEdit && SelectedCircle is not null)
			{
				<div class="d-flex gap-1">
					<EditForm Model="SelectedCircle">
						<InputText class="form-control" @bind-Value="SelectedCircle.Name"/>
						<button class="btn btn-primary" @onclick="@(()=>{CurrentlyViewing = Views.FactionsList;})">OK</button>
					</EditForm>
				</div>
			}
			else if (CurrentlyViewing == Views.FactionEdit && SelectedFaction is not null)
			{
				<EditForm Model="SelectedFaction">
					<div class="d-flex flex-column gap-2">
						<InputText class="form-control" @bind-Value="SelectedFaction.Name" />
						<div class="d-flex gap-1 align-items-center">
							<label>Fuerza:</label>
							<InputNumber class="form-control" @bind-Value="SelectedFaction.Strength"/>
							<TrackViewer MaxValue="3" Value="@SelectedFaction.StrengthTemp" />
						</div>
						<div class="d-flex gap-1 align-items-center">
							<label>Fuerza:</label>
							<InputNumber class="form-control" @bind-Value="SelectedFaction.Strength" />
						</div>
						<div class="d-flex gap-1 align-items-center">
							<label>Tamaño:</label>
							<InputNumber class="form-control" @bind-Value="SelectedFaction.Size" />
							<TrackViewer MaxValue="3" Value="@SelectedFaction.SizeTemp" />
						</div>
						
						
						<button class="btn btn-primary" @onclick="FinishEditing">OK</button>
					</div>
				</EditForm>
			}
			else if (CurrentlyViewing == Views.CharacterEdit && SelectedCharacter is not null)
			{
				<div class="d-flex gap-1">
					<EditForm Model="SelectedCharacter">
						<InputFile OnChange="ImagesService.SaveImageToDisk" class="form-control" style="background: var(--bs-gray-700); border: none; color: white;" />
						<span>Nombre</span>
						<InputText class="form-control" @bind-Value="SelectedCharacter.Name" />
						<span>Quiere</span>
						<InputText class="form-control" @bind-Value="SelectedCharacter.WhatWants" />
						<span>No quiere</span>
						<InputText class="form-control" @bind-Value="SelectedCharacter.WhatDoesNotWant" />
						<span>Complicación</span>
						<InputText class="form-control" @bind-Value="SelectedCharacter.Complication" />
						<div class="form-check pt-1 pb-3">
							<InputCheckbox class="form-check-input" @bind-Value="SelectedCharacter.IsKnownByPlayers" />
							<label class="form-check-label" for="flexCheckDefault">
								Known by players
							</label>
						</div>
					
						<button class="btn btn-primary" @onclick="@(()=>{CurrentlyViewing = Views.FactionsList;})">OK</button>
						<button class="btn btn-danger" @onclick="DeleteSelectedCharacter">Delete</button>
					</EditForm>
				</div>
			}
		}
		
	</div>
</div>

@code{
	[Parameter] public IGameController Game{get;set;}
	[Parameter] public Guid GameID { get; set; }
	[Parameter] public bool IsMaster { get; set; }
	[Parameter] public EventCallback ExitRequested { get; set; }
	[Parameter] public EventCallback<ICharacter> SelectionFinished { get; set; }
	[Parameter] public bool PreventFullScreenMode { get; set; } = false;


	private enum Views { FactionsList, FactionView, CharacterView, CircleEdit, FactionEdit, CharacterEdit }
	private Views CurrentlyViewing = Views.FactionsList;

	private PbtAFaction? SelectedFaction = null;
	private PbtACharacter? SelectedCharacter = null;
	private Circle? SelectedCircle = null;

	protected override async Task OnParametersSetAsync()
	{
		if (ImagesService.AllImages.Count == 0) await ImagesService.LoadAll(GameID);
		if (Game.People is not null && Game.People.Circles.Count <= 1)
			Game.People.LoadFromJsonFile(GameID);

		CharacterSelectorService.ForceUIUpdate -= Refresh;
		CharacterSelectorService.ForceUIUpdate += Refresh;

		Game.UpdatePeopleViewerInAllClientsEvent -= Refresh;
		Game.UpdatePeopleViewerInAllClientsEvent += Refresh;
	}

	private void Refresh(object? sender, EventArgs e) => InvokeAsync(StateHasChanged);

	private void CharacterClicked(PbtACharacter ch)
	{
		if (CharacterSelectorService.CurrentMode == CharacterSelectorService.SelectionModes.character)
			CharacterSelectorService.FinishSelection(ch);
		else
		{
			SelectedCharacter = ch;
			SelectedFaction = Game.People.Circles
				.SelectMany(x => x.Factions)
				.FirstOrDefault(f => f.Members.Any(m => m.ID == ch.ID));

			SelectedCircle = Game.People.Circles.FirstOrDefault(x => x.Factions.Contains(SelectedFaction));
		}
	}


	private async Task LoadPeopleJson(InputFileChangeEventArgs e)
	{
		var maxFileSize = 10 * 1024 * 1024; // 10 MB as an example, you can adjust this

		var file = e.File;

		if (file != null)
		{
			if (file.Size > maxFileSize)
			{
				return;
			}
			else
			{
				using (var stream = file.OpenReadStream())
				{
					using (var reader = new StreamReader(stream))
					{
						var jsonContent = await reader.ReadToEndAsync();
						Game.People.LoadFromJsonString(jsonContent, GameID);
					}
				}
			}
		}
	}

	private void SavePeopleToFile()
	{
		Game.People.StoreInJsonFile(GameID);
	}


	private bool HasImage(PbtACharacter ch)
	{
		var img = ImagesService.AllImages.Find(x => x.Name == ch.Name);
		return img != null;
	}

	private PbtAImage GetImage(PbtACharacter ch)
	{
		var img = ImagesService.AllImages.Find(x => x.Name == ch.Name);
		if (img is null) return null;
		else return img;
	}

	private string GetImageSrc(PbtACharacter ch)
	{
		var img = ImagesService.AllImages.Find(x => x.Name == ch.Name);
		if (img is null) return "";
		else return img.src;
	}

	private void SelectCircle(Circle c)
	{
		if (SelectedCircle == c) SelectedCircle = null;
		else SelectedCircle = c;
	}
	private void SelectFaction(PbtAFaction f)
	{
		if (SelectedFaction == f) SelectedFaction = null;
		else SelectedFaction = f;

		SelectedCircle = Game.People.Circles.FirstOrDefault(c => c.Factions.Contains(SelectedFaction));
	}

	private bool IsCurrentCircle(Circle c)
	{
		if (SelectedCircle is null) return false;
		else return SelectedCircle == c;
	}

	private bool IsCurrentFaction(PbtAFaction f)
	{
		if (SelectedFaction is null) return false;
		else return SelectedFaction == f;
	}

	private void AddNewCircle(){
		PbtAFaction DefaultFaction = new PbtAFaction
			{
				ID = Guid.NewGuid(),
				Members = new List<PbtACharacter>(),
				Name= "Default faction"
			};

		Game.People.Circles.Add(new Circle("New Circle", DefaultFaction));
	}

	private void EditCircle(Circle c)
	{
		SelectedCircle = c;
		CurrentlyViewing = Views.CircleEdit;
	}

	private void EditFaction(PbtAFaction f)
	{
		SelectedFaction = f;
		CurrentlyViewing = Views.FactionEdit;
	}

	private void EditCharacter(PbtACharacter ch)
	{
		SelectedCharacter = ch;
		CurrentlyViewing = Views.CharacterEdit;
	}

	private void Delete(Circle c){
		Game.People.Circles.Remove(c);
		SelectedCircle = null;
	}

	private void SaveChanges(){
		Game.People.StoreInJsonFile(GameID);
	}

	private void FinishEditing()
	{
		CurrentlyViewing = Views.FactionsList;
		SpreadChanges();
	}

	private void SpreadChanges()
	{
		Game.UpdatePeopleViewerInAllClients();
	}

	private void DeleteSelectedCharacter()
	{
		SelectedFaction = Game.People.Circles
			.SelectMany(x => x.Factions)
			.FirstOrDefault(f => f.Members.Any(m => m.ID == SelectedCharacter.ID));
		
		if(SelectedFaction is not null && SelectedCharacter is not null)
		{			
			SelectedFaction.Members.Remove(SelectedCharacter);
			SelectedCharacter = null;
		}

		CurrentlyViewing = Views.FactionsList;
	}
}