@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json
@using PbtALib.ifaces
@inject ImagesService ImagesService
@inject CharacterSelectorService CharacterSelectorService

<div class="@(PreventFullScreenMode?"":"FullScreenModal")" @onclick=ExitRequested>
	<div class="PeopleModalBody" @onclick:stopPropagation style="@(CharacterSelectorService.CurrentMode == CharacterSelectorService.SelectionModes.character?"":"background:black !important;  border:none !important;")">
		<div class="CloseButton" @onclick=ExitRequested />
		
		@if(Game is not null && Game.People is not null)
		{
			@if(CurrentlyViewing == Views.FactionsList)
			{
				<div class="d-flex flex-column w-100 gap-1">
					<div class="floatingButton hoverable" style="
							position:fixed; top:10px; left:10px; z-index:9999; 
							background:black; border:1px solid gray; 
							box-shadow:0px 2px black; border-radius:1em; padding:1em;">
						
						<div class="RightColumnButton" @onclick=ShowCityMapRequested>
							<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg"  
							viewBox="0 0 50 50" width="37" height="37" style="fill:white;">    
								<path d="M 13 3 C 7.4886661 3 3 7.4886661 3 13 L 3 37 C 3 42.511334 7.4886661 47 13 47 L 37 47 C 42.511334 47 47 42.511334 47 37 L 47 13 C 47 7.4886661 42.511334 3 37 3 L 13 3 z M 14 5 L 20 5 L 20 22.587891 C 19.072675 22.211025 18.06076 22 17 22 C 15.93924 22 14.927325 22.211025 14 22.587891 L 14 5 z M 22 5 L 27.041016 5 C 27.05093 5.193444 27.048634 5.3899905 27.064453 5.5820312 L 29.058594 5.4179688 C 29.047392 5.2803089 29.049038 5.1386513 29.041016 5 L 34 5 C 34 5.185 34.003672 5.3697344 34.013672 5.5527344 L 36.011719 5.4453125 C 36.003719 5.2983125 36 5.149 36 5 L 37 5 C 41.430666 5 45 8.5693339 45 13 L 45 13.994141 C 44.850052 13.994136 44.699919 13.995241 44.550781 13.988281 L 44.451172 15.986328 C 44.633172 15.996328 44.816 16 45 16 L 45 20.958984 C 44.861446 20.950962 44.719691 20.952608 44.582031 20.941406 L 44.419922 22.935547 C 44.611188 22.951333 44.806995 22.948908 45 22.958984 L 45 35.974609 A 1 1 0 0 0 44.974609 35.974609 A 1 1 0 0 0 43.974609 36.974609 A 1 1 0 0 0 44.935547 37.972656 C 44.554489 41.134684 42.346976 43.719483 39.388672 44.638672 A 1 1 0 0 0 39.421875 44.386719 A 1 1 0 0 0 38.421875 43.386719 A 1 1 0 0 0 37.421875 44.386719 A 1 1 0 0 0 37.609375 44.96875 C 37.407637 44.983869 37.205723 45 37 45 L 22 45 L 22 36.234375 C 23.82647 34.766699 25 32.519061 25 30 C 25 27.480939 23.82647 25.233301 22 23.765625 L 22 21.916016 A 1 1 0 0 0 22.037109 21.917969 A 1 1 0 0 0 23.037109 20.917969 A 1 1 0 0 0 22.037109 19.917969 A 1 1 0 0 0 22 19.919922 L 22 5 z M 12 5.0683594 L 12 13.056641 A 1 1 0 0 0 11.205078 14.035156 A 1 1 0 0 0 12 15.013672 L 12 23.765625 C 10.17353 25.233301 9 27.480939 9 30 C 9 32.519061 10.17353 34.766699 12 36.234375 L 12 44.931641 C 8.045415 44.441222 5 41.091155 5 37 L 5 22.203125 A 1 1 0 0 0 5.6523438 22.447266 A 1 1 0 0 0 6.6523438 21.447266 A 1 1 0 0 0 5.6523438 20.447266 A 1 1 0 0 0 5 20.689453 L 5 13 C 5 12.095877 5.1554398 11.231254 5.4296875 10.421875 A 1 1 0 0 0 5.6523438 10.447266 A 1 1 0 0 0 6.6523438 9.4472656 A 1 1 0 0 0 6.2753906 8.6660156 C 7.5264027 6.7242214 9.5928063 5.366882 12 5.0683594 z M 29.480469 8.03125 L 27.537109 8.5058594 C 27.770109 9.4608594 28.082891 10.407359 28.462891 11.318359 L 30.306641 10.548828 C 29.966641 9.7328281 29.688469 8.88525 29.480469 8.03125 z M 36.525391 8.0390625 L 34.642578 8.7148438 C 35.007578 9.7308438 35.521969 10.686641 36.167969 11.556641 L 37.773438 10.363281 C 37.244437 9.6512812 36.823391 8.8690625 36.525391 8.0390625 z M 8.9296875 10.740234 A 1 1 0 0 0 7.9296875 11.740234 A 1 1 0 0 0 8.9296875 12.740234 A 1 1 0 0 0 9.9296875 11.740234 A 1 1 0 0 0 8.9296875 10.740234 z M 39.636719 12.228516 L 38.443359 13.833984 C 39.313359 14.480984 40.270156 14.993422 41.285156 15.357422 L 41.960938 13.474609 C 41.130937 13.176609 40.348719 12.757516 39.636719 12.228516 z M 31.517578 12.904297 L 29.814453 13.953125 C 30.329453 14.789125 30.915641 15.595703 31.556641 16.345703 L 33.078125 15.046875 C 32.503125 14.374875 31.978578 13.653297 31.517578 12.904297 z M 34.949219 16.919922 L 33.648438 18.439453 C 34.397438 19.080453 35.202062 19.666594 36.039062 20.183594 L 37.089844 18.482422 C 36.339844 18.020422 35.619219 17.493922 34.949219 16.919922 z M 39.443359 19.689453 L 38.673828 21.535156 C 39.582828 21.916156 40.528328 22.227937 41.486328 22.460938 L 41.958984 20.517578 C 41.102984 20.308578 40.256359 20.029453 39.443359 19.689453 z M 25.3125 22.210938 A 1 1 0 0 0 24.3125 23.210938 A 1 1 0 0 0 25.3125 24.210938 A 1 1 0 0 0 26.3125 23.210938 A 1 1 0 0 0 25.3125 22.210938 z M 8.9296875 22.740234 A 1 1 0 0 0 7.9296875 23.740234 A 1 1 0 0 0 8.9296875 24.740234 A 1 1 0 0 0 9.9296875 23.740234 A 1 1 0 0 0 8.9296875 22.740234 z M 28.589844 24.505859 A 1 1 0 0 0 27.589844 25.505859 A 1 1 0 0 0 28.589844 26.505859 A 1 1 0 0 0 29.589844 25.505859 A 1 1 0 0 0 28.589844 24.505859 z M 17 26 L 20 34 L 17 32 L 14 34 L 17 26 z M 31.867188 26.798828 A 1 1 0 0 0 30.867188 27.798828 A 1 1 0 0 0 31.867188 28.798828 A 1 1 0 0 0 32.867188 27.798828 A 1 1 0 0 0 31.867188 26.798828 z M 35.144531 29.09375 A 1 1 0 0 0 34.144531 30.09375 A 1 1 0 0 0 34.244141 30.527344 C 33.676419 30.843299 32.80406 31.179687 31.570312 31.179688 C 29.290312 31.179687 28.410156 30.050781 28.410156 30.050781 C 27.510156 31.370781 27 32.990469 27 34.730469 C 27 39.300469 30.58 43 35 43 C 39.42 43 43 39.300469 43 34.730469 C 43 32.990469 42.489844 31.370781 41.589844 30.050781 C 41.589844 30.050781 40.709688 31.179688 38.429688 31.179688 C 37.357564 31.179688 36.547531 30.919636 35.978516 30.644531 A 1 1 0 0 0 36.144531 30.09375 A 1 1 0 0 0 35.144531 29.09375 z M 25.3125 34.210938 A 1 1 0 0 0 24.3125 35.210938 A 1 1 0 0 0 25.3125 36.210938 A 1 1 0 0 0 26.3125 35.210938 A 1 1 0 0 0 25.3125 34.210938 z M 14 37.412109 C 14.927325 37.788975 15.93924 38 17 38 C 18.06076 38 19.072675 37.788975 20 37.412109 L 20 45 L 14 45 L 14 37.412109 z"/></svg>
						</div>
						
					</div>
					@* <div class="PlayersContainer d-flex align-items-center gap-1">
						<div class="me-2">Jugadores:</div>
						@foreach (var p in CharacterSelectorService.Players)
						{
							<div class="@(CharacterSelectorService.CurrentMode == CharacterSelectorService.SelectionModes.character?"CharacterBox":"")" style="background:black;" @onclick=@(()=>{CharacterSelectorService.FinishSelection(p);})>
								@p.Name
							</div>
						}
					</div> *@
					<div class="d-flex w-100 gap-2">
						
						@foreach(var c in Game.People.Circles)
						{
							<div class="CircleContainer @(IsCurrentCircle(c)? "SuperWide" : "Small") @(IsMaster?"":"opacity:1;")">
								<div class="header" @onclick=@(()=>{SelectCircle(c);})>
									<span class="ms-2">@c.Name</span>
									@if(c.Name == "Mortalis")
									{
										<span class="Small opacity-50" style="font-size:12px">Cazadores, despertados, veteranos</span>
									}else if(c.Name == "Noche")
									{
										<span class="Small opacity-50" style="font-size:12px">Vampiros, lobos, espectros</span>
									}else if(c.Name == "Poder")
									{
										<span class="Small opacity-50" style="font-size:12px">Magos, Oráculos, Juramentados</span>
									}else if(c.Name == "Velo")
									{
										<span class="Small opacity-50" style="font-size:12px">Corrompidos, Hadas, Diablos</span>
									}
									@if(IsMaster && IsCurrentCircle(c))
									{
										<button class="btn btn-outline-success" @onclick=@(()=>{EditCircle(c);}) @onclick:stopPropagation><i class="bi bi-pencil"></i></button>
									}
								</div>

								<div class="CircleBody">
									@foreach(PbtAFaction f in c.Factions)
									{
										<div class="FactionContainer @(f.Status == FactionStatuses.Manteniendo?"opacity-50":"")"
											 style="@(f.IsDebilitated?"background:#370404;":"")">
											<div class="header" style="@(f.IsDebilitated?"background:#370404;":"")" @onclick=@(()=>{SelectFaction(f);})>
												<FactionCard Faction="f" IsMaster="IsMaster" Game="Game"/>
											</div>
											<div class="FactionBody">
												@foreach(PbtACharacter ch in f.Members)
												{
													<div class="@(CharacterSelectorService.CurrentMode == CharacterSelectorService.SelectionModes.character?"CharacterBox":"")"
														 @onclick=@(()=>{CharacterClicked(ch);})>
														@if(HasImage(ch))
														{
															<ImageCard Image="GetImage(ch)" IsMaster=IsMaster IsInPeopleViewer="true" ForcedSize="150" />
														}
														else
														{
															<div class="p-3 rounded" style="background:#2f2f2f;">
																<h4>@if(IsMaster)
																	{
																		<HiddeableInput @bind-Value=ch.Name EditFinished="SpreadChanges" />
																	}
																	else
																	{
																		@ch.Name
																	}
																</h4>
															</div>
														}

														@if (IsMaster && IsCurrentCircle(c))
														{
															<div class="CharacterDetailsBox">
																<div>
																	<span>Quiere</span>
																	@ch.WhatWants
																</div><div>
																	<span>NO quiere</span>
																	@ch.WhatDoesNotWant
																</div><div>
																	<span>Complicación</span>
																	@ch.Complication
																</div>
																<button class="btn btn-outline-success" style="width:40px;" @onclick=@(()=>{EditCharacter(ch);}) @onclick:stopPropagation><i class="bi bi-pencil"></i></button>
															</div>
														}
																							
													</div>
												}
											</div>
											<div class="p-2 d-flex">
												@if (IsMaster && SelectedFaction == f)
												{
													<div class="d-flex flex-grow-1 align-items-center gap-1">
														<EditForm Model="f" class="w-100">
															<InputTextArea class="form-control" @bind-Value=f.Assets @onfocusout=SpreadChanges />
														</EditForm>
														<i class="bi bi-send"></i>
													</div>
												}
												else
												{
													<DecodedString Value="@f.Assets" />
												}
											</div>

											@if (IsMaster && IsCurrentCircle(c) && IsCurrentFaction(f))
											{
												<button class="btn btn-primary" @onclick=@(()=>{Game.People.AddCharacterToFaction(new PbtACharacter{Name = "New Char", ID = Guid.NewGuid()}, f);})>Add Character</button>
											}
										</div>
									}
								</div>

								@if(IsMaster && SelectedCircle is not null && SelectedCircle == c)
								{
									<div class="d-flex gap-1 p-1">
										<button class="btn btn-primary" @onclick=@(()=>{Game.People.AddNewFactionToCircle(c);})>Add Faction</button>
										<button class="btn btn-danger" @onclick=@(()=>{Delete(c);})><i class="bi bi-trash3"></i></button>
									</div>
								}
						
							</div>
						}				
					</div>
					@if (IsMaster)
					{
						<button class="btn btn-primary" @onclick=AddNewCircle>Add circle</button>
						<button class="btn btn-primary" @onclick=SaveChanges>Save changes</button>
						<a href="@($"/GameImages/{GameID.ToString()}/People.json")">Download json</a>
						<EditForm Model="this">
							<InputFile OnChange="LoadPeopleJson" class="form-control" style="background: var(--bs-gray-700); border: none; color: white;" />
						</EditForm>
					}
					else
					{
						
					}
				</div>
			}
			else if (CurrentlyViewing == Views.FactionView)
			{
			
			}
			else if (CurrentlyViewing == Views.CharacterView)
			{
			
			}
			else if (CurrentlyViewing == Views.CircleEdit && SelectedCircle is not null)
			{
				<div class="d-flex gap-1">
					<EditForm Model="SelectedCircle">
						<InputText class="form-control" @bind-Value="SelectedCircle.Name"/>
						<button class="btn btn-primary" @onclick="@(()=>{CurrentlyViewing = Views.FactionsList;})">OK</button>
					</EditForm>
				</div>
			}
			else if (CurrentlyViewing == Views.FactionEdit && SelectedFaction is not null)
			{
				<EditForm Model="SelectedFaction">
					<div class="d-flex flex-column gap-2">
						<InputText class="form-control" @bind-Value="SelectedFaction.Name" />
						<div class="d-flex gap-1 align-items-center">
							<label>Fuerza:</label>
							<InputNumber class="form-control" @bind-Value="SelectedFaction.Strength"/>
							<TrackViewer MaxValue="3" Value="@SelectedFaction.StrengthTemp" />
						</div>
						<div class="d-flex gap-1 align-items-center">
							<label>Fuerza:</label>
							<InputNumber class="form-control" @bind-Value="SelectedFaction.Strength" />
						</div>
						<div class="d-flex gap-1 align-items-center">
							<label>Tamaño:</label>
							<InputNumber class="form-control" @bind-Value="SelectedFaction.Size" />
							<TrackViewer MaxValue="3" Value="@SelectedFaction.SizeTemp" />
						</div>
						
						
						<button class="btn btn-primary" @onclick="FinishEditing">OK</button>
					</div>
				</EditForm>
			}
			else if (CurrentlyViewing == Views.CharacterEdit && SelectedCharacter is not null)
			{
				<div class="d-flex gap-1">
					<EditForm Model="SelectedCharacter">
						<InputFile OnChange="ImagesService.SaveImageToDisk" class="form-control" style="background: var(--bs-gray-700); border: none; color: white;" />
						<span>Nombre</span>
						<InputText class="form-control" @bind-Value="SelectedCharacter.Name" />
						<span>Quiere</span>
						<InputText class="form-control" @bind-Value="SelectedCharacter.WhatWants" />
						<span>No quiere</span>
						<InputText class="form-control" @bind-Value="SelectedCharacter.WhatDoesNotWant" />
						<span>Complicación</span>
						<InputText class="form-control" @bind-Value="SelectedCharacter.Complication" />
						<div class="form-check pt-1 pb-3">
							<InputCheckbox class="form-check-input" @bind-Value="SelectedCharacter.IsKnownByPlayers" />
							<label class="form-check-label" for="flexCheckDefault">
								Known by players
							</label>
						</div>
					
						<button class="btn btn-primary" @onclick="@(()=>{CurrentlyViewing = Views.FactionsList;})">OK</button>
						<button class="btn btn-danger" @onclick="DeleteSelectedCharacter">Delete</button>
					</EditForm>
				</div>
			}
		}
		
	</div>
</div>

@code{
	[Parameter] public IGameController Game{get;set;}
	[Parameter] public Guid GameID { get; set; }
	[Parameter] public bool IsMaster { get; set; }
	[Parameter] public EventCallback ExitRequested { get; set; }
	[Parameter] public EventCallback ShowCityMapRequested { get; set; }
	[Parameter] public EventCallback<ICharacter> SelectionFinished { get; set; }
	[Parameter] public bool PreventFullScreenMode { get; set; } = false;


	private enum Views { FactionsList, FactionView, CharacterView, CircleEdit, FactionEdit, CharacterEdit }
	private Views CurrentlyViewing = Views.FactionsList;

	private PbtAFaction? SelectedFaction = null;
	private PbtACharacter? SelectedCharacter = null;
	private Circle? SelectedCircle = null;

	protected override async Task OnParametersSetAsync()
	{
		if (ImagesService.AllImages.Count == 0) await ImagesService.LoadAll(GameID);
		if (Game.People is not null && Game.People.Circles.Count <= 1)
			Game.People.LoadFromJsonFile(GameID);

		CharacterSelectorService.ForceUIUpdate -= Refresh;
		CharacterSelectorService.ForceUIUpdate += Refresh;

		Game.UpdatePeopleViewerInAllClientsEvent -= Refresh;
		Game.UpdatePeopleViewerInAllClientsEvent += Refresh;

		foreach(var m in Game.People!.Circles.SelectMany(c => c.Factions).SelectMany(f => f.Members))
		{
			var p = Game.Players.Find(x=>x.Name == m.Name);

			if (p is not null)
			{
				m.ID = p.ID;
				m.IsNPC = false;
			}
			else
				m.IsNPC = true;
		}
	}

	private void Refresh(object? sender, EventArgs e) => InvokeAsync(StateHasChanged);

	private void CharacterClicked(PbtACharacter ch)
	{
		if (CharacterSelectorService.CurrentMode == CharacterSelectorService.SelectionModes.character)
			CharacterSelectorService.FinishSelection(ch);
		else
		{
			SelectedCharacter = ch;
			SelectedFaction = Game.People.Circles
				.SelectMany(x => x.Factions)
				.FirstOrDefault(f => f.Members.Any(m => m.ID == ch.ID));

			SelectedCircle = Game.People.Circles.FirstOrDefault(x => x.Factions.Contains(SelectedFaction));
		}
	}


	private async Task LoadPeopleJson(InputFileChangeEventArgs e)
	{
		var maxFileSize = 10 * 1024 * 1024; // 10 MB as an example, you can adjust this

		var file = e.File;

		if (file != null)
		{
			if (file.Size > maxFileSize)
			{
				return;
			}
			else
			{
				using (var stream = file.OpenReadStream())
				{
					using (var reader = new StreamReader(stream))
					{
						var jsonContent = await reader.ReadToEndAsync();
						Game.People.LoadFromJsonString(jsonContent, GameID);
					}
				}
			}
		}
	}

	private void SavePeopleToFile()
	{
		Game.People.StoreInJsonFile(GameID);
	}


	private bool HasImage(PbtACharacter ch)
	{
		var img = ImagesService.AllImages.Find(x => x.Name == ch.Name);
		return img != null;
	}

	private PbtAImage GetImage(PbtACharacter ch)
	{
		var img = ImagesService.AllImages.Find(x => x.Name == ch.Name);
		if (img is null) return null;
		else return img;
	}

	private string GetImageSrc(PbtACharacter ch)
	{
		var img = ImagesService.AllImages.Find(x => x.Name == ch.Name);
		if (img is null) return "";
		else return img.src;
	}

	private void SelectCircle(Circle c)
	{
		if (SelectedCircle == c) SelectedCircle = null;
		else SelectedCircle = c;
	}
	private void SelectFaction(PbtAFaction f)
	{
		if (SelectedFaction == f) SelectedFaction = null;
		else SelectedFaction = f;

		SelectedCircle = Game.People.Circles.FirstOrDefault(c => c.Factions.Contains(SelectedFaction));
	}

	private bool IsCurrentCircle(Circle c)
	{
		if (SelectedCircle is null) return false;
		else return SelectedCircle == c;
	}

	private bool IsCurrentFaction(PbtAFaction f)
	{
		if (SelectedFaction is null) return false;
		else return SelectedFaction == f;
	}

	private void AddNewCircle(){
		PbtAFaction DefaultFaction = new PbtAFaction
			{
				ID = Guid.NewGuid(),
				Members = new List<PbtACharacter>(),
				Name= "Default faction"
			};

		Game.People.Circles.Add(new Circle("New Circle", DefaultFaction));
	}

	private void EditCircle(Circle c)
	{
		SelectedCircle = c;
		CurrentlyViewing = Views.CircleEdit;
	}

	private void EditFaction(PbtAFaction f)
	{
		SelectedFaction = f;
		CurrentlyViewing = Views.FactionEdit;
	}

	private void EditCharacter(PbtACharacter ch)
	{
		SelectedCharacter = ch;
		CurrentlyViewing = Views.CharacterEdit;
	}

	private void Delete(Circle c){
		Game.People.Circles.Remove(c);
		SelectedCircle = null;
	}

	private void SaveChanges(){
		Game.People.StoreInJsonFile(GameID);
	}

	private void FinishEditing()
	{
		CurrentlyViewing = Views.FactionsList;
		SpreadChanges();
	}

	private void SpreadChanges()
	{
		Game.UpdatePeopleViewerInAllClients();
	}

	private void DeleteSelectedCharacter()
	{
		SelectedFaction = Game.People.Circles
			.SelectMany(x => x.Factions)
			.FirstOrDefault(f => f.Members.Any(m => m.ID == SelectedCharacter.ID));
		
		if(SelectedFaction is not null && SelectedCharacter is not null)
		{			
			SelectedFaction.Members.Remove(SelectedCharacter);
			SelectedCharacter = null;
		}

		CurrentlyViewing = Views.FactionsList;
	}
}