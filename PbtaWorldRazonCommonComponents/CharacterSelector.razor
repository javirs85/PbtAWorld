@using PbtALib;
@inject CharacterSelectorService CSService

@if (IsOnScreen)
{
    <div class="FullScreenModal" @onclick=Hide>
        <div class="ModalBody" @onclick:stopPropagation>
            @if (CSService.Campaign is not null && CSService.Campaign.Circles.Count > 1)
            {
                <div class="CirclesPackContainer">
                    @foreach (var c in CSService.Campaign.Circles)
                    {
                        <div class="CircleContainer">
                            <div class="CircleContainerHeader">@c.Name</div>
                            @foreach(var f in c.Factions)
                            {
                                <div class="FactionContainer">
                                    <div class="FactionContainerHeader">
                                        <div style="width:25px;"></div>
										<div class="flex-grow-1">@f.Name</div>
                                        <div style="width:25px;"><i class="bi bi-pencil-square"></i></div>
                                    </div>
                                    <div class="FactionContainerBody">
                                        @foreach(var p in f.Members)
                                        {
                                            <div class="Character" @onclick=@(()=>{CSService.Select(p);})>
                                                @p.Name
                                            </div>
                                        }
                                        <div class="button">
                                            <i class="bi bi-person-add fs-4" style="color:#509750"></i>
                                        </div>
                                    </div>									
                                </div>
                            }
                            <div class="button mt-2">
                                <i class="bi bi-house-add"></i> Añadir facción
                            </div>
                        </div>
                    }
                </div>
            }            
        </div>
    </div>

    <!--Faction edit modal-->
    <div class="FullScreenModal">
        <div class="ModalBody">
            
        </div>
    </div>
}

@code {
    private bool IsOnScreen = false;
    private ICharacter? SelectedCharacter = null;

    public enum SelectionModes {faction, character};
    private SelectionModes CurrentSelectionMode = SelectionModes.character;


    private bool IsShowingEditFaction = false;
    private void HideEditFaction() { IsShowingEditFaction = false; }
    private void ShowEditFaction(Faction f) { 
        IsShowingEditFaction = true; 
    }

    protected override void OnParametersSet()
    {
        CSService.Show += (p, mode) => {
            CurrentSelectionMode = mode;
            IsOnScreen = true; 
            StateHasChanged(); 
        };
        CSService.Hide += (p, e) => { IsOnScreen = false; };
    }

    private void Hide()
    {
        IsOnScreen = false; StateHasChanged();
    }

    private void Show()
    {
        IsOnScreen = true; StateHasChanged();
    }

    public class CharacterSelectorService
    {
        public event EventHandler<SelectionModes> Show;
        public event EventHandler Hide;

        public IPeopleCast? Campaign = null;
        public void SetPeople(IPeopleCast _people) => Campaign = _people;

        TaskCompletionSource<ICharacter> tcs = new();

        public async Task<ICharacter> StartSelection(SelectionModes mode = SelectionModes.character)
        {
            Show.Invoke(this, mode);
            tcs = new();
            return await tcs.Task;
        }

        public void Select(ICharacter character)
        {
            Hide.Invoke(this, EventArgs.Empty);
            tcs.SetResult(character);
        }
    }
}
