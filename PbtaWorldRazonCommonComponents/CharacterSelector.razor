@using Microsoft.AspNetCore.Components.Forms
@using PbtALib;
@inject CharacterSelectorService CSService
@inject ImagesService ImagesService
@inject IDataBaseController DB;

<div class="FullScreenModal" @onclick=Hide style="z-index:8888;">
    <div class="ModalBody" @onclick:stopPropagation>
        @if (CSService.Game.People is not null && CSService.Game.People.Circles.Count > 1)
        {
            <div class="CirclesPackContainer">
                @foreach (var c in CSService.Game.People.Circles)
                {
                    <div class="CircleContainer">
                        <div class="CircleContainerHeader">@c.Name</div>
                        @foreach(var f in c.Factions)
                        {
                            <div class="FactionContainer">
                                <div class="FactionContainerHeader">
									<div class="flex-grow-1">@f.Name</div>
                                    <div class="button" style="width:25px;" @onclick=@(()=>{EditFaction(f);})><i class="bi bi-pencil-square"></i></div>
                                </div>
                                <div class="FactionContainerBody">
                                    @foreach(var p in f.Members)
                                    {
										<div class="d-flex Character">
                                            <i class="bi bi-pencil-square hoverable me-2" @onclick=@(()=>{EditChar(p);})></i>
                                            <div class="" @onclick=@(()=>{CSService.FinishSelection(p);})>
                                                @p.Name
                                            </div>
                                        </div>                                            
                                    }
                                    <div class="button" @onclick=@(()=>{AddNewCharacter(f);})>
                                        <i class="bi bi-person-add fs-4" style="color:#509750"></i>
                                    </div>
                                </div>									
                            </div>
                        }
                        <div class="button mt-2" @onclick=@(()=>{AddNewFaction(c);})>
                            <i class="bi bi-house-add"></i> Añadir facción
                        </div>
                    </div>
                }
            </div>
        }            
    </div>
</div>

<!--Faction edit modal-->
<div class="FullScreenModal @(IsShowingEditFaction?"":"HideModal")">
    <div class="ModalBody">
        @if(SelectedFaction is not null)
        {
            <EditForm Model="SelectedFaction">
                <InputText @bind-Value=SelectedFaction.Name />
                <button class="btn btn-primary" @onclick=UpdateSelectedFaction><i class="bi bi-floppy"></i></button>
                <button class="btn btn-danger" @onclick=DeleteSelectedFaction>Eliminar</button>
            </EditForm>
        }            
    </div>
</div>

<!--ICharacter edit modal-->
<div class="FullScreenModal @(IsShowingEditIChar?"":"HideModal")">
    <div class="ModalBody ">
        @if (SelectedCharacter is not null)
        {
            <EditForm Model="SelectedCharacter">
                <div class="d-flex flex-column gap-2">
                    <div class="d-flex gap-2 p-3" 
                            style="border: 1px solid #626673;
                            border-radius: 4px;
                            background: #3b3b3f;">
                        <div class="d-flex flex-column justify-content-center gap-2">
                            <label>Nombre</label>
                            <InputText @bind-Value=SelectedCharacter.Name />
                            <label>Que ofrece</label>
                            <InputText @bind-Value=SelectedCharacter.CanOffer />
                            <label>Objetivo</label>
                            <InputText @bind-Value=SelectedCharacter.Goal />
                        </div>
                        <div class="d-flex flex-column gap-2">
                            @if(SelectedCharacter.Image != string.Empty)
                            {
                                <div>
                                    <img style="max-width:170px; height:auto;" src="@SelectedCharacter.Image" alt="img" />
                                </div>
                            }
                            <button class="btn btn-primary" style="width:170px;" @onclick=ShowImagesToChoseFrom><i class="bi bi-card-image"></i> Cambiar imagen</button>
                        </div>
                    </div>
                    <div class="d-flex gap-2 justify-content-center">
                        <button class="btn btn-primary flex-grow-1" @onclick=UpdateSelectedCharacter><i class="bi bi-floppy"></i> Guardar cambios</button>
                        <button class="btn btn-danger flex-grow-1" @onclick=DeleteSelectedCharacter>Eliminar</button>
                    </div>
                </div>
                @if(IsShowingImages)
                {
                    <div class="d-flex flex-column">
                    @foreach(var pack in AvailableImages)
                    {
                        @pack.Path
                        <div class="d-flex flex-wrap">
                            @foreach(var i in pack.Images)
                                {
                                <img src="@i" width="100" alt="@i" @onclick=@(async()=>{await SetImage(@i);}) />
                                }
                            </div>
                    }
                    </div>
                }
            </EditForm>
        }
    </div>
</div>

@code {
    [Parameter] public EventCallback CloseRequest {get;set; }
    [Parameter] public List<ICharacter> Players { get; set; } = new();

    private PbtACharacter? SelectedCharacter = null;
    private PbtAFaction? SelectedFaction = null;
    private bool IsShowingImages = false;
    private FolderOfImages? SelectedFolder = null;

    private List<FolderOfImages> AvailableImages = new();
    private class FolderOfImages
    {
        public string Path = string.Empty;
        public List<string> Images = new();
    }

    private PbtALib.CharacterSelectorService.SelectionModes CurrentSelectionMode = PbtALib.CharacterSelectorService.SelectionModes.character;

    private bool IsShowingEditFaction = false;
    private void HideEditFaction() { IsShowingEditFaction = false; }
    private void ShowEditFaction(IPbtAFaction f) { 
        IsShowingEditFaction = true; 
    }

    private bool IsShowingEditIChar = false;
    private void HideEditIChar() { IsShowingEditIChar = false; }
    private void ShowEditIChar(IPbtAFaction f)
    {
        IsShowingEditIChar = true;
    }

    private async Task ShowImagesToChoseFrom()
    {
        var folders = System.IO.Directory.GetDirectories("wwwroot/imgs");
        string wwwRootPath = Path.Combine("wwwroot");
        AvailableImages.Clear();
        foreach (var f in folders)
        {
            if (f == "wwwroot/imgs\\DW") continue;
            if (f == "wwwroot/imgs\\Icons") continue;
            if (f == "wwwroot/imgs\\GameCovers") continue;
            if (f == "wwwroot/imgs\\US") continue;

            var pack = new FolderOfImages { Path = System.IO.Path.GetFileName(f) };
            @foreach (var p in System.IO.Directory.GetFiles(f, "*.png"))
            {
                pack.Images.Add(Path.GetRelativePath(wwwRootPath, p));
            }
            if(pack.Images.Count > 0)
                AvailableImages.Add(pack);
        }
        IsShowingImages = true;
    }

    private async Task SetImage(string img)
    {
        if(SelectedCharacter is not null)
        {
            SelectedCharacter.Image = img;
            await DB.StoreChangesinCharacter(
                    SelectedCharacter.ID,
                    SelectedCharacter.Name, 
                    System.Text.Json.JsonSerializer.Serialize(SelectedCharacter));
        }
        IsShowingImages = false;
    }

    protected override void OnParametersSet()
    {
        /*CSService.Show += (p, mode) => {
            CurrentSelectionMode = mode;
            IsOnScreen = true; 
            StateHasChanged(); 
        };
        CSService.Hide += (p, e) => { IsOnScreen = false; };
    */
    }

    private void Hide()
    {
        CloseRequest.InvokeAsync();
    }
    private void Show()
    {
    }

    private  void EditChar(PbtACharacter ch)
    {
        SelectedCharacter = ch;
        IsShowingEditIChar = true;
    }

    private void EditFaction(PbtAFaction f)
    {
        SelectedFaction = f;
        IsShowingEditFaction= true;
    }

    private void AddNewFaction(Circle c)
    {
        var newF = CSService?.Game?.People?.AddNewFactionToCircle(c);

        SelectedFaction = newF ;
        IsShowingEditFaction = true;
    }

    private void AddNewCharacter(IPbtAFaction f)
    {
       /* PNJ pnj = new PNJ();
        pnj.Name = "Nuevo PNJ";
        CSService?.People?.AddCharacterToFaction(pnj, f);
        SelectedCharacter = pnj;
        IsShowingEditIChar = true;
        */
    }

    private async Task UpdateSelectedFaction()
    {
        if(CSService is not null && CSService.Game.People is not null &&  SelectedFaction is not null)
            await CSService?.Game?.People?.SaveChangesOnFaction(SelectedFaction);

        IsShowingEditFaction = false;
    }

    private async Task UpdateSelectedCharacter()
    {
        if (CSService is not null && CSService.Game.People is not null && SelectedCharacter is not null)
            await CSService?.Game?.People?.SaveChangesOnCharacter(SelectedCharacter);

        IsShowingEditIChar = false;
    }

    private async Task UpdateSelectedICharacter(PbtACharacter ch)
    {
        await CSService?.Game?.People?.SaveChangesOnCharacter(ch);
    }

    private async Task DeleteSelectedFaction()
    {
        await CSService?.Game?.People?.DeleteFaction(SelectedFaction);
        IsShowingEditFaction = false;
    }

    private async Task DeleteSelectedCharacter()
    {
        await CSService?.Game?.People?.DeleteCharacter(SelectedCharacter);
        IsShowingEditIChar = false;
    }

}
