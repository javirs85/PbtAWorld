@using WhiteBoard
@inject WhiteBoardService service

<div class="d-flex flex-column align-items-center">
	@if(IsMaster)
	{
		<div class="d-flex flex-column">
			<HiddeableInput @bind-Value=clock.Title EditFinished="SpreadUpdate"/>
			<div class="d-flex">
				<i class="bi bi-trash3" @onclick=DeleteMe></i>
				<i class="bi bi-send" @onclick=SpreadUpdate></i>
				<i class="bi bi-@(clock.Color=="red"?"circle-fill":"circle")" style="color:red;" @onclick=@(()=>{clock.Color = "red";})></i>
				<i class="bi bi-@(clock.Color=="#20666d"?"circle-fill":"circle")" style="color:#20666d;" @onclick=@(()=>{clock.Color = "#20666d";})></i>
				<i class="bi bi-@(clock.Color=="green"?"circle-fill":"circle")" style="color:green;" @onclick=@(()=>{clock.Color = "green";})></i>

			</div>
		</div>
	}
	else
	{
		@if (!HideTitle)
		{
			<div class="fs-5 text-center">@clock.Title</div>
		}
	}
	<div class="CircularClockContainer"
		 style="width:@(Width)px;
		height:@(Width)px;
		min-height:@(Width)px;
		max-height:@(Width)px;"
		 @onclick=Clicked>
		<div class="UpperLines">
			@foreach (var l in lines)
			{
				<div class="line" style="transform:rotate(@(l.degs)deg);"></div>
			}
		</div>

		<div class="LeftHalfMovingPart  d-flex" style="transform: rotate(@(LeftSideDegs)deg); 
														@(clock.Steps.Count==4?"transition: transform linear 0.4s;":"")
														@(clock.Steps.Count==6?"transition: transform linear 0.3s;":"")
														@(clock.Steps.Count==8?"transition: transform linear 0.3s;":"")">
			<div class="flex-fill" style="background:@(clock.Color)"></div>
			<div class="flex-fill"></div>
		</div>
		<div class="LeftHalfCover" style="background:@BackColor; opacity:@(ShowLefttCover?"1":"0");">
		</div>
		@if(ShowQuarterFakeCover)
		{
			<div class="QuarterFakeCover" style="background:@BackColor;"></div>
		}

		<div class="RightHalfMovingPart  d-flex" style="transform: rotate(@(RightSideDegs)deg);
														@(clock.Steps.Count==4?"transition: transform linear 0.4s;":"")
														@(clock.Steps.Count==6?"transition: transform linear 0.3s;":"")
														@(clock.Steps.Count==8?"transition: transform linear 0.3s;":"")">
			<div class="flex-fill"></div>
			<div class="flex-fill" style="background:@(clock.Color)"></div>
		</div>
		<div class="RightHalfCover" style="background:@BackColor;">
		</div>

		<div class="Floor" style="background:@BackColor;"></div>
	</div>
</div>

@code {
	[Parameter] public float Width { get; set; } = 200;
	[Parameter] public Clock clock { get; set; } = new Clock("Test", 6);
	[Parameter] public string BackColor { get; set; } = "#000";
	[Parameter] public bool HideTitle { get; set; } = false;
	[Parameter] public bool IsMaster { get; set; } = false;
	[Parameter] public EventCallback SpreadUpdate{ get; set; }
	[Parameter] public EventCallback DeleteMe{ get; set; }

	string debug = "";
	double lineSteps = 0;


	private class Line
	{
		public int degs = 0;
	}

	private List<Line> lines = new();

	protected override void OnParametersSet()
	{
		int n = clock.Steps.Count;
		lineSteps = 360 / n;

		if(lines.Count == 0)
		{
			for (int i = 0; i < n; ++i)
			{
				lines.Add(new Line { degs = (int)lineSteps * i });
			}
		}
		
		if(!IsMaster)
		{

			clock.UpdateRequested -= RePaint;
			clock.UpdateRequested += RePaint;
		}
	}

	private void RePaint(object s, EventArgs? e) => RePaint();

	private int deg;
	int RightSideDegs = 0;
	int LeftSideDegs = 0;
	bool ShowLefttCover = true;
	bool ShowQuarterFakeCover = true;

	public int Deg
	{
		get { return deg; }
		set
		{
			deg = value;
			if (deg < 0) deg = 0;
			if (deg > 360) deg = 360;


			if (deg < 185 && deg > 95)
			{
				LeftSideDegs = deg;
				RightSideDegs = 0;
				ShowLefttCover = true;
				ShowQuarterFakeCover = true;
			}
			else if (deg < 180)
			{
				LeftSideDegs = deg;
				RightSideDegs = 0;
				ShowLefttCover = true;
				ShowQuarterFakeCover = false;
			}
			else
			{
				ShowLefttCover = false;
				LeftSideDegs = 180;
				RightSideDegs = deg - 180;
				ShowQuarterFakeCover = false;
			}
			InvokeAsync(StateHasChanged);
		}
	}

	public void RePaint()
	{
		Deg = (int) lineSteps * clock.Status;
	}

	async Task Clicked(MouseEventArgs e)
	{
		if (IsMaster)
		{
			double x = e.OffsetX;
			double y = e.OffsetY;

			double maxY = Width;
			double maxX = Width;

			double centerX = maxX / 2.0;
			double centerY = maxY / 2.0;

			double dx = centerX - x;
			double dy = centerY - y;

			double angle = Math.Atan2(dy, dx) * (180 / Math.PI);

			angle -= 90.0;
			if (angle < 0) angle += 360.0;

			if (angle > Deg)
			{
				clock.Status++;
			}
			else
			{
				clock.Status--;
			}

			RePaint();
			await SpreadUpdate.InvokeAsync();
		}
		else
			RePaint();
	}
}
