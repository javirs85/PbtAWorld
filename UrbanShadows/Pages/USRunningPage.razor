@using Microsoft.JSInterop
@using PbtALib;
@using UrbanShadows.Controls
@using UrbanShadows.Pages
@using static PbtaWorldRazonCommonComponents.CharacterSelector;
@using static PbtaWorldRazonCommonComponents.LastRollOverlay;

@inject IToastService Toaster;
@inject NavigationManager Navigation
@inject USGameController Game
@inject USMovesService Moves
@inject MoveSelector.MoveSelectorService  MSelector
@inject LastRollViewerService LastRollViewerService
@inject CharacterSelectorService CharacterSelectorService
@inject IDataBaseController Meta;
@inject VTTService VTT
@inject IJSRuntime JS

<MoveSelector />

	

<div class="MainSheetDiv" style="display:@(IsShowingVTT?"none":"") ;">
	<EditForm Model="Player">
		<div class="BigContainer d-flex">
			<div class="LeftColumn">
				<div class="LeftColumnHeader">
					<div class="HeaderInner">
						<div>@Player.Name</div>
						<div>-</div>
						<div>@Player.Archetype.ToUI()</div>
						<img src="imgs/US/UpgradeButton.svg" class="UpgradeButton" @onclick=ShowCircleAdvances/>
					</div>
				</div>
				<div class="STATS d-flex flex-column">
					<div class="d-flex">
						<div class="flex-grow-1"><StatViewer Attr="USAttributes.Blood" Player="Player" UpdateRequested="Update"/></div>
						<div class="flex-grow-1"><StatViewer Attr="USAttributes.Heart" Player="Player" UpdateRequested="Update" /></div>
						<div class="flex-grow-1"><StatViewer Attr="USAttributes.Mind" Player="Player" UpdateRequested="Update" /></div>
						<div class="flex-grow-1"><StatViewer Attr="USAttributes.Soul" Player="Player" UpdateRequested="Update" /></div>
					</div>
					<div class="d-flex">
						<div class="flex-grow-1"><StatViewer Attr="USAttributes.Mortality" Player="Player" UpdateRequested="Update" /></div>
						<div class="flex-grow-1"><StatViewer Attr="USAttributes.Night" Player="Player" UpdateRequested="Update" /></div>
						<div class="flex-grow-1"><StatViewer Attr="USAttributes.Power" Player="Player" UpdateRequested="Update" /></div>
						<div class="flex-grow-1"><StatViewer Attr="USAttributes.Veil" Player="Player" UpdateRequested="Update" /></div>
					</div>
				</div>
				@if (Player.IsNightTick == true && Player.IsMortalisTick == true && Player.IsPowerTick == true && Player.IsVeilTick == true)
				{
					<div class="w-100 p-2 d-flex justify-content-center" style="background: #360b0b;">
						<div class="RoundButton IntegratedRed" @onclick=ShowCircleAdvances>
							Obtener mejora
						</div>
						<div class="RoundButton IntegratedRed" @onclick=ResetCircles>
							Reset
						</div>
					</div>
				}
				<div class="CORRUPCION d-flex flex-column CorruptionArea Darker">
					<div class="LeftColumnTittle">CORRUPCIÓN</div>
					<div style="font-size:14px; text-align:center;">@Player.CorruptionMoveDetail</div>
					<div class="flex-grow-1 d-flex justify-content-around align-items-center gap-3">
						<img src="imgs/Icons/Skull_@(Player.Corruption >= 1?"YES":"NO").png" style="cursor:pointer;" @onclick=@(_ => CorruptionClicked(1)) />
						<img src="imgs/Icons/Skull_@(Player.Corruption >= 2?"YES":"NO").png" style="cursor:pointer;" @onclick=@(_ => CorruptionClicked(2)) />
						<img src="imgs/Icons/Skull_@(Player.Corruption >= 3?"YES":"NO").png" style="cursor:pointer;" @onclick=@(_ => CorruptionClicked(3)) />
						<img src="imgs/Icons/Skull_@(Player.Corruption >= 4?"YES":"NO").png" style="cursor:pointer;" @onclick=@(_ => CorruptionClicked(4)) />
						<img src="imgs/Icons/Skull_@(Player.Corruption >= 5?"YES":"NO").png" style="cursor:pointer;" @onclick=@(_ => CorruptionClicked(5)) />
						<img src="imgs/US/UpgradeButton.svg" class="UpgradeButton" @onclick=ShowCorruptionAdvances/>
					</div>
				</div>
				<div class="DAÑO d-flex flex-column justify-content-center px-4">
					<div class="LeftColumnTittle  d-flex justify-content-center">DAÑO</div>
					<div class="d-flex gap-2">
						<div class="d-flex flex-column flex-grow-1 gap-1 DamageArea Darker">
							<div class="WoundsContainer Soft">
								<div class="d-flex w-100 justify-content-around">
									<div class="Wound SoftInner @(Player.Damage > 0?"WoundMark":"")" @onclick=@(_ => WoundClicked(1))></div>
								</div>
								<InputText @bind-Value="WoundsLightText" style="background: #252323; color: white; border: none; outline:none;" />
							</div>
							<div class="WoundsContainer Mid">
								<div class="d-flex w-100 justify-content-around">
									<div class="Wound MidInner @(Player.Damage > 1?"WoundMark":"")" @onclick=@(_ => WoundClicked(2))></div>
									<div class="Wound MidInner @(Player.Damage > 2?"WoundMark":"")" @onclick=@(_ => WoundClicked(3))></div>
								</div>
								<InputText @bind-Value="WoundsMidText"
								@onchange=@(()=>{Game?.StoreChangesOnCharacter(Player,"Cambió el detalle de sus herídas.");})  
									style="background: #252323; color: white; border: none; outline:none;" />
							</div>
							<div class="WoundsContainer Hard">
								<div class="d-flex w-100 justify-content-around">
									<div class="Wound HardInner @(Player.Damage > 3?"WoundMark":"")" @onclick=@(_ => WoundClicked(4))></div>
									<div class="Wound HardInner @(Player.Damage > 4?"WoundMark":"")" @onclick=@(_ => WoundClicked(5))></div>
								</div>
								<InputText @bind-Value="WoundsHardText" style="background: #252323; color: white; border: none; outline:none;" />
							</div>
						</div>
						<div class="ArmorContainer">
							<div><InputText @bind-Value="ArmorString" style="width: 40px; border:none;  text-align:center;  outline:none; background:transparent;" /></div>
						</div>
					</div>
				</div>
				<div class="SEQUELAS d-flex flex-column mt-4">
					<div class="LeftColumnTittle w-100 d-flex justify-content-center mb-1">CICATRICES</div>
					<div class="d-flex flex-column gap-0 px-5" style="color: #bfbfbf;">
						<div class="d-flex gap-1">
							<RedCheckBox Style="RedCheckBox.Styles.bloodSplat"
							Value=Player.IsBloodScarUsed
							Clicked="@(async ()=>{await ToggleScar(USAttributes.Blood);})"
							/>
							Destrozado (-1 Sangre)
						</div>
						<div class="d-flex gap-1">
							<RedCheckBox Style="RedCheckBox.Styles.bloodSplat"
							Value=Player.IsHeartScarUsed
							Clicked="@(async ()=>{await ToggleScar(USAttributes.Heart);})"
							/>
							Descorazonado (-1 Corazón)
						</div>
						<div class="d-flex gap-1">
							<RedCheckBox Style="RedCheckBox.Styles.bloodSplat"
							Value=Player.IsMindScarUsed
							Clicked="@(async ()=>{await ToggleScar(USAttributes.Mind);})"
							/>
							Deshecho (-1 Mente)
						</div>
						<div class="d-flex gap-1">
							<RedCheckBox 
							Style="RedCheckBox.Styles.bloodSplat"
							Value=Player.IsSoulScarUsed
							Clicked="@(async ()=>{await ToggleScar(USAttributes.Soul);})"
							/>
							Quebrado (-1 Espíritu)
						</div>
					</div>
				</div>
				<div class="EQUIPO d-flex flex-column mt-4 flex-grow-1">
					<div class="LeftColumnTittle w-100 d-flex justify-content-center mb-1">EQUIPO</div>
					<div class="d-flex flex-grow-1 p-3 pt-0">
						<InputTextArea class="form-control" @bind-Value="EquipeText" 
							style="	background: #130202; color:#bfbfbf; 
									outline:none; border:1px solid #4E1212; 
									border-radius:4px; max-height:400px;" />
					</div>
				</div>
			</div>
			<div class="InnerColumn ms-2" style="@(CurrentFocus==FocusOn.firstColumn?"flex:2!important;":"flex:1!important")">
				<div class="InnerColumnPack BasicMoves">
					<div class="InnerColumnHeader" style="cursor: pointer;"
					@onclick=@(()=>{Select(null, FocusOnDetailed.nowhere);})>
						Movimientos básicos
					</div>
				
					<div class="InnerColumContent">
						@foreach (var m in BasicMovesOnScreen)
						{
							<MoveViewer ID="m.ID" 
								Player=Player 
								IsSelected=false 
								Clicked=@(_ => Select(m, FocusOnDetailed.Basic)) 
								ForceUpdate="Update" />
						}
					</div>
					<div class="LetItOutBox">
						@foreach(var m in Player.LIOs)
						{
							<div>@Moves.AllLio.Find(x=>x.ID==m)?.Text</div>
						}
					</div>
				</div>
			
			
				<div class="InnerColumnPack Deuda">
					<div class="InnerColumnHeader" style="cursor: pointer;"
					@onclick=@(()=>{Select(null, FocusOnDetailed.nowhere);})>
						Movimientos de deuda
					</div>
					@if (CurrentFocusDetail != FocusOnDetailed.Basic && CurrentFocusDetail != FocusOnDetailed.Circle)
					{
						<div class="InnerColumContent">
							@foreach (var m in Moves.AllMovements.Where(x => x.TypeOfMovement == MovementTypes.DebtMovements))
							{
								<MoveViewer 
									ID="m.ID" 
									Player=Player
									IsSelected=false 
									Clicked=@(_ => Select(m, FocusOnDetailed.DebtMoves)) 
									ForceUpdate="Update" />
							}
						</div>
					}
				</div>
			</div>
			<div class="InnerColumn" style="@(CurrentFocus==FocusOn.secondColumn?"flex:2!important;":"flex:1!important")">
				<div class="InnerColumnPack PlayBookMoves">
					<div class="InnerColumnHeader d-flex align-items-center gap-1" style="cursor: pointer;">
						Movimientos de @Player.Archetype.ToUI()  
							@if (Player.Archetype == US_Classes.Oracle || Player.Archetype == US_Classes.Sworn || Player.Archetype == US_Classes.Wolf)
							{
								@if (PlaybookMovesOnScreen.Count < 2)
								{
									<span class="fs-2">Elije DOS</span>
								}
							}
							else if (Player.Archetype == US_Classes.Mage)
							{

							}
							else
							{
								@if (PlaybookMovesOnScreen.Count < 3)
								{
									<span class="fs-2">Elije TRES</span>
								}
							}
							<i class="bi bi-exposure fs-4 editButton" @onclick=SelectPlaybookMoves></i>
						</div>
				
					<div class="InnerColumContent">
						@foreach (var m in PlaybookMovesOnScreen)
						{
							<MoveViewer ID="m.ID" Player=Player IsSelected=false Clicked=@(_ => Select(m, FocusOnDetailed.Playbook)) ForceUpdate="Update" />
						}
					</div>
				
				</div>
				<div class="InnerColumnPack CorruptionMoves">
					<div class="InnerColumnHeader  d-flex align-items-center gap-1" style="cursor: pointer;">
						Movimientos de Corrupción <i class="bi bi-exposure fs-4 editButton" @onclick=SelectNewCorruptionMove></i>
					</div>
					@if (CurrentFocusDetail != FocusOnDetailed.Playbook)
					{
						<div class="InnerColumContent">
							@foreach (var m in CorruptionMovesOnScreen)
							{
								<MoveViewer ID="m.ID" Player=Player IsSelected=false Clicked=@(_ => Select(m, FocusOnDetailed.Corruption)) ForceUpdate="Update" />
							}
						</div>
					}
				</div>
				@if(UniqueMovesOnScreen.Count != 0)
				{
					<div class="InnerColumnPack EspecialesPlaybook">
						<div class="InnerColumnHeader" style="cursor: pointer;"
							@onclick=@(()=>{Select(null, FocusOnDetailed.nowhere);})>
							Movimientos especiales de @Player.Archetype.ToUI()
						</div>
						@if (CurrentFocusDetail == FocusOnDetailed.nowhere || CurrentFocus == FocusOn.firstColumn || CurrentFocusDetail == FocusOnDetailed.Unique)
						{
							<div class="InnerColumContent">
								@foreach (var m in UniqueMovesOnScreen)
								{
									<MoveViewer ID="m.ID" Player=Player IsSelected=false Clicked=@(_ => Select(m, FocusOnDetailed.Unique)) ForceUpdate="Update" />
								}
							</div>
						}
					</div>
				}

				<div class="InnerColumnPack CircleMoves">
					<div class="InnerColumnHeader" style="cursor: pointer;"
						 @onclick=@(()=>{Select(null, FocusOnDetailed.nowhere);})>
						Movimientos de círculo
					</div>
					@if (CurrentFocusDetail != FocusOnDetailed.Basic)
					{
						<div class="InnerColumContent">
							@foreach (var m in Moves.AllMovements.Where(x => x.TypeOfMovement == MovementTypes.FactionMovement))
							{
								<MoveViewer ID="m.ID" Player=Player IsSelected=false Clicked=@(_ => Select(m, FocusOnDetailed.Circle)) ForceUpdate="Update" />
							}
						</div>
					}
				</div>
				@if (UniqueMovesOnScreen.Count == 0)
				{

					@foreach (var m in Moves.AllMovements.Where(x => x.TypeOfMovement == MovementTypes.DramaticMovement && x.Archetipe == Player.Archetype))
					{
						@if (m.Title.Contains("intimi") || m.Title.Contains("inicial") || m.Title.Contains("final"))
						{
							<div class="InnerColumnPack DramaMoves">
								<div class="InnerColumnHeader">

									@m.Title
									@if (m.Title.Contains("intimi"))
									{
										<img src="imgs/Icons/TicksCircleIcon.png" class="ms-2 opacity-50" style="margin-bottom:5px;" />
									}
								</div>
								<div class="InnerColumContent" style="font-size:14px; opacity: 0.75;">
									<DecodedString Value="@m.PreCondition.MainText" />
								</div>
							</div>
						}
					}
				}
			
			</div>
			<div class="InnerColumn" style="gap:0px !important;">
				<div class="PLAYBOOK UNIQUES InnerColumnPack">
					<div class="InnerColumnHeader d-flex align-items-center gap-1">
						@Player.ArchetypeUniqueTittle1
						<i class="bi bi-arrow-down-circle fs-4 editButton" data-bs-toggle="collapse"
						   data-bs-target="#Unique1original"></i>
					</div>
					<div class="InnerColumContent">
						<InputTextArea class="form-control" style="outline:none; border: none; background: black; color:#7d7d7d;"
						@bind-Value=Unique1Screen />
					</div>
					<div>
						<div id="Unique1original" class="collapse">
							<DecodedString Value="@Player.ArchetypeUniqueBody1" />
						</div>
					</div>
				</div>
				@if (!string.IsNullOrEmpty(Player.ArchetypeUniqueTittle2))
				{
					<div class="InnerColumnPack">
						<div class="InnerColumnHeader d-flex align-items-center gap-1">
							@Player.ArchetypeUniqueTittle2
							<i class="bi bi-arrow-down-circle fs-4 editButton" data-bs-toggle="collapse"
							   data-bs-target="#Unique2original"></i>
						</div>
						<div class="InnerColumContent">
							@if(Player.Archetype == US_Classes.Spectre)
							{
								<div class="fs-2">
									<TrackViewer CanEdit="true" Color="RedCheckBox.Styles.bootstrapDark" @bind-Value="@Player.Trauma" MaxValue="5"/>
								</div>
							}
							else
							{
								<InputTextArea class="form-control"
											   style="outline:none; border: none; background: black; color:#7d7d7d;"
											   @bind-Value=Unique2Screen />
							}							
						</div>
						<div>
							<div id="Unique2original" class="collapse">
								<DecodedString Value="@Player.ArchetypeUniqueBody2" />
							</div>
						</div>
					</div>
				}	
				
				<div class="DEBTS InnerColumnPack">
					<div class="InnerColumnHeader">Deudas</div>
					<div class="InnerColumContent" style="gap: 0 !important;">
						<div class="d-flex align-items-center gap-1" style="cursor: pointer;">
							Se me debe: <i class="bi bi-plus-circle fs-4 editButton" @onclick=AddToGetPaidDebt></i>
						</div>
						<div class="d-flex flex-wrap">
							@foreach(var deb in Game.AllDebts.Where(x=>x.ReceivingID == Player.ID).OrderBy(x=>x.PayingID))
							{
								<DebtViewer Debt="deb" Mode="DebtViewer.PayingMode.ToPay" ForceUpdateUI="Update" MinimalisticMode="true" />
							}
						</div>
						<div class="d-flex align-items-center gap-1 mt-1" style="cursor: pointer;">
							Debo: <i class="bi bi-plus-circle fs-4 editButton" @onclick=AddToPayDebt></i>
						</div>
						<div class="d-flex flex-wrap">
							@foreach (var deb in Game.AllDebts.Where(x => x.PayingID == Player.ID).OrderBy(x => x.ReceivingID))
							{
								<DebtViewer Debt="deb" Mode="DebtViewer.PayingMode.ToBePaid" ForceUpdateUI="Update" MinimalisticMode="true" />
							}
						</div>
					</div>
				</div>
				@if(UniqueMovesOnScreen.Count != 0)
				{

					@foreach (var m in Moves.AllMovements.Where(x => x.TypeOfMovement == MovementTypes.DramaticMovement && x.Archetipe == Player.Archetype))
					{
						@if (m.Title.Contains("intimi") || m.Title.Contains("inicial") || m.Title.Contains("final"))
						{
							<div class="InnerColumnPack DramaMoves">
								<div class="InnerColumnHeader">

									@m.Title
									@if(m.Title.Contains("intimi"))
									{
										<img src="imgs/Icons/TicksCircleIcon.png" class="ms-2 opacity-50" style="margin-bottom:5px;" />
									}
								</div>
								<div class="InnerColumContent" style="font-size:14px; opacity: 0.75;">
									<DecodedString Value="@m.PreCondition.MainText" />
								</div>
							</div>
						}
					}
				}
			</div>
			<div class="RightColumn">
				<div class="RightColumnButton" @onclick=OpenPeopleViewerRequested><i class="bi bi-people-fill"></i></div>
				<div class="RightColumnButton" @onclick=OpenLastRollViewerRequested><i class="bi bi-dice-5"></i></div>
				<div class="RightColumnButton" @onclick=OpenImageManagerRequested><i class="bi bi-image"></i></div>
				<div class="RightColumnButton" @onclick=OpenClocksViewerRequested><i class="bi bi-hourglass-split"></i></div>
				<div class="RightColumnButton" @onclick=OpenVTTInternal>
					<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="45" height="45" viewBox="0 0 255 247">
<path d="M0 0 C84.15 0 168.3 0 255 0 C255 81.51 255 163.02 255 247 C170.85 247 86.7 247 0 247 C0 165.49 0 83.98 0 0 Z " 
fill="transparent" transform="translate(0,0)" fill-rule="evenodd"/>
<path d="M0 0 C4.87880698 0.3772042 9.02632157 1.66115361 13.63891602 3.22949219 C14.54701523 3.53075012 15.45511444 3.83200806 16.39073181 4.14239502 C18.30272551 4.77959955 20.21298908 5.42201651 22.12158203 6.06933594 C25.03087017 7.05410042 27.94651149 8.01788788 30.86352539 8.97949219 C32.72657254 9.60324824 34.58921708 10.22820837 36.45141602 10.85449219 C37.75007347 11.28287384 37.75007347 11.28287384 39.07496643 11.71990967 C45.53098125 13.93017503 50.80811047 16.48390502 55.22875977 21.87011719 C58.07567816 25.25240741 60.99337379 28.54630917 63.97875977 31.80761719 C66.82400205 34.9266873 69.65075557 38.0551711 72.41625977 41.24511719 C75.37759433 44.65450237 78.42026281 47.98558095 81.47875977 51.30761719 C85.09963522 55.24048998 88.66834841 59.2097566 92.17016602 63.24902344 C94.40887227 65.79718369 96.69286188 68.30172312 98.97875977 70.80761719 C102.4369861 74.59966929 105.84823606 78.42452118 109.21704102 82.29589844 C114.58533691 88.42599241 120.08880172 94.43473482 125.60375977 100.43261719 C129.25705218 104.40801839 132.882875 108.40213973 136.40454102 112.49511719 C137.50615171 113.76347293 138.63069587 115.01210587 139.77172852 116.24511719 C140.33504883 116.86386719 140.89836914 117.48261719 141.47875977 118.12011719 C141.98407227 118.6628125 142.48938477 119.20550781 143.01000977 119.76464844 C143.32969727 120.27382812 143.64938477 120.78300781 143.97875977 121.30761719 C142.97875977 124.30761719 142.97875977 124.30761719 139.95922852 125.95605469 C138.06802166 126.83475692 136.16527616 127.68305211 134.25805664 128.52636719 C127.29154157 131.77204682 124.70964091 136.49305501 121.22875977 143.12011719 C120.61516602 144.2815625 120.00157227 145.44300781 119.36938477 146.63964844 C118.91047852 147.52007812 118.45157227 148.40050781 117.97875977 149.30761719 C113.1633002 145.89301859 108.85610061 142.32258844 104.74829102 138.08496094 C102.32368669 135.64965196 99.73920006 133.42717837 97.13891602 131.18261719 C92.1579822 126.85920266 87.29553595 122.39973629 82.40063477 117.97949219 C77.9971277 114.00823121 73.57069557 110.06940575 69.09594727 106.17871094 C66.58857681 103.9627876 64.12974388 101.69720811 61.66625977 99.43261719 C58.12866029 96.20031739 54.5375872 93.10705393 50.79125977 90.12011719 C45.20492723 85.61734054 40.00813856 80.74394936 34.81201172 75.79907227 C31.65103957 72.79413854 28.46946066 69.83361965 25.17797852 66.97167969 C24.51991211 66.38112793 23.8618457 65.79057617 23.18383789 65.18212891 C20.961384 63.23342789 20.961384 63.23342789 18.31665039 61.44482422 C8.75843647 54.16386963 6.15551604 44.81030818 2.74023438 33.65673828 C1.78587049 30.54001712 0.78467963 27.4415373 -0.22631836 24.34277344 C-0.86251082 22.35796899 -1.49607014 20.37231818 -2.12670898 18.38574219 C-2.42030807 17.46376038 -2.71390717 16.54177856 -3.0164032 15.59185791 C-4.38714603 11.09769605 -5.60371081 7.05849452 -5.02124023 2.30761719 C-3.02124023 0.30761719 -3.02124023 0.30761719 0 0 Z " 
fill="white" transform="translate(38.021240234375,14.6923828125)"/>
<path d="M0 0 C2 2 2 2 2.07777405 3.8200531 C1.34570218 9.70516414 -0.0437893 15.15196632 -1.87890625 20.78515625 C-2.16926254 21.68568222 -2.45961884 22.58620819 -2.7587738 23.51402283 C-3.37341483 25.40556422 -3.99304461 27.29549119 -4.61743164 29.18383789 C-5.55871084 32.05095829 -6.46411412 34.92790441 -7.36914062 37.80664062 C-13.00460182 55.2201437 -13.00460182 55.2201437 -21 61 C-22.29935385 62.13710878 -23.59192034 63.28205923 -24.875 64.4375 C-25.53242188 65.00339844 -26.18984375 65.56929688 -26.8671875 66.15234375 C-29.27376821 68.2371655 -31.63764945 70.36521533 -34 72.5 C-38.29684708 76.37636051 -42.63528331 80.20043587 -47 84 C-48.50031934 85.31213495 -50.00032601 86.62462751 -51.5 87.9375 C-52.66666667 88.95833333 -53.83333333 89.97916667 -55 91 C-57.89631874 89.69983484 -59.85194306 88.36489577 -61.98828125 86.0234375 C-62.52614258 85.43916992 -63.06400391 84.85490234 -63.61816406 84.25292969 C-64.17729492 83.63321289 -64.73642578 83.01349609 -65.3125 82.375 C-65.89354492 81.73981445 -66.47458984 81.10462891 -67.07324219 80.45019531 C-70.53045602 76.6598494 -73.94881507 72.83701528 -77.30078125 68.953125 C-80.81065876 64.91878303 -84.4147721 60.96732702 -88 57 C-86.71104283 54.18648214 -85.33731495 52.0674293 -83.20703125 49.828125 C-82.66272461 49.25030273 -82.11841797 48.67248047 -81.55761719 48.07714844 C-80.98172852 47.47418945 -80.40583984 46.87123047 -79.8125 46.25 C-78.62547304 44.99036407 -77.43926755 43.7299535 -76.25390625 42.46875 C-75.68687988 41.86675781 -75.11985352 41.26476563 -74.53564453 40.64453125 C-72.18682426 38.12916506 -69.9307798 35.53943293 -67.68359375 32.93359375 C-64.87636397 29.70951314 -61.98959743 26.55694638 -59.11328125 23.39453125 C-56.95213459 21.03025504 -56.95213459 21.03025504 -55.12890625 18.3671875 C-52.47773164 15.41927592 -50.36365935 14.62061812 -46.625 13.3125 C-45.9637915 13.07901855 -45.30258301 12.84553711 -44.62133789 12.60498047 C-43.04910384 12.05565189 -41.47366512 11.51545233 -39.89599609 10.98193359 C-37.09255081 10.03138082 -34.29698814 9.0595704 -31.50213623 8.08409119 C-28.82543112 7.15311975 -26.14471431 6.23413826 -23.46282959 5.31820679 C-22.12039932 4.85873502 -20.77895057 4.39638476 -19.4385376 3.93106079 C-17.52391728 3.26878327 -15.60380597 2.62244757 -13.68359375 1.9765625 C-12.56525146 1.59580566 -11.44690918 1.21504883 -10.29467773 0.82275391 C-6.70472148 -0.07373758 -3.68582909 -0.28561879 0 0 Z " 
fill="white" transform="translate(225,15)"/>
<path d="M0 0 C4.51034139 1.12445205 8.42618413 3.00022649 12.58666992 5.0456543 C13.45416367 5.46918686 14.32165741 5.89271942 15.21543884 6.3290863 C17.04392231 7.2266733 18.87018495 8.12879683 20.69433594 9.03515625 C23.47318057 10.40892071 26.26637307 11.74985806 29.0612793 13.09057617 C30.84155701 13.96945151 32.62088725 14.85024923 34.39916992 15.7331543 C35.22949234 16.12620255 36.05981476 16.51925079 36.91529846 16.92420959 C42.75447819 19.88895251 45.50741989 23.04523241 48.42651367 28.85424805 C48.7778688 29.50783798 49.12922394 30.16142792 49.4912262 30.83482361 C50.55843451 32.84107576 51.58321825 34.86417778 52.59838867 36.8972168 C52.96627502 37.62870438 53.33416138 38.36019196 53.7131958 39.11384583 C54.48147367 40.64470826 55.24771145 42.17659614 56.01196289 43.70947266 C57.18058276 46.04989732 58.35983154 48.38476018 59.53979492 50.71948242 C60.28914071 52.21590296 61.0378609 53.71263698 61.78588867 55.2097168 C62.13689636 55.90252243 62.48790405 56.59532806 62.84954834 57.30912781 C64.5667085 60.77644581 66.09359623 63.96860085 66.42651367 67.85424805 C65.02807617 70.05737305 65.02807617 70.05737305 63.05151367 72.10424805 C62.4044043 72.7900293 61.75729492 73.47581055 61.09057617 74.18237305 C58.43232378 76.8531055 58.43232378 76.8531055 56.26667786 77.27897644 C52.04518232 76.64767878 49.8615883 73.98647126 46.98388672 71.05859375 C46.35892807 70.4423967 45.73396942 69.82619965 45.09007263 69.19132996 C43.0266972 67.14997003 40.9821596 65.09084854 38.93823242 63.0300293 C37.51121398 61.60637832 36.08345395 60.18347032 34.65498352 58.76127625 C31.66363733 55.77730439 28.68152894 52.78446835 25.70556641 49.78515625 C21.88782819 45.93893125 18.04808392 42.11558776 14.20114422 38.29859638 C11.24875067 35.36425988 8.30835717 32.4181313 5.3714695 29.4682827 C3.96012342 28.05359827 2.54504557 26.6426268 1.12622643 25.23543739 C-0.85413913 23.26775298 -2.81779483 21.28478163 -4.77783203 19.296875 C-5.36842407 18.71640411 -5.95901611 18.13593323 -6.56750488 17.53787231 C-8.93229791 15.11032236 -10.46748984 13.49255201 -11.03190613 10.09367371 C-10.40808882 7.04626501 -9.12784624 5.67493275 -6.94848633 3.47924805 C-6.2755957 2.77026367 -5.60270508 2.0612793 -4.90942383 1.33081055 C-2.57348633 -0.14575195 -2.57348633 -0.14575195 0 0 Z " 
fill="white" transform="translate(43.573486328125,132.145751953125)"/>
<path d="M0 0 C2.01953125 1.453125 2.01953125 1.453125 3.8125 3.25 C4.71935547 4.12398437 4.71935547 4.12398437 5.64453125 5.015625 C7.47074382 7.6891581 7.5162214 8.79067174 7 12 C5.1386969 14.35452288 3.33073464 16.35267859 1.2043457 18.44262695 C0.58814865 19.0675856 -0.0280484 19.69254425 -0.66291809 20.33644104 C-2.70427802 22.39981647 -4.76339951 24.44435407 -6.82421875 26.48828125 C-8.24786973 27.91529969 -9.67077773 29.34305972 -11.0929718 30.77153015 C-14.07694366 33.76287634 -17.0697797 36.74498473 -20.0690918 39.72094727 C-23.9153168 43.53868548 -27.73866029 47.37842975 -31.55565166 51.22536945 C-34.48998817 54.177763 -37.43611674 57.1181565 -40.38596535 60.05504417 C-41.80064978 61.46639025 -43.21162125 62.8814681 -44.61881065 64.30028725 C-46.58649507 66.2806528 -48.56946642 68.2443085 -50.55737305 70.2043457 C-51.13784393 70.79493774 -51.71831482 71.38552979 -52.31637573 71.99401855 C-54.75428352 74.36890165 -56.36216637 75.89689989 -59.77864075 76.44914246 C-62.62873287 75.87287485 -63.75885533 74.84686917 -65.75 72.75 C-66.34296875 72.14671875 -66.9359375 71.5434375 -67.546875 70.921875 C-69.15628971 68.79329426 -69.65954524 67.63447835 -70 65 C-69.23071289 62.67260742 -69.23071289 62.67260742 -67.97265625 60.10546875 C-67.51383057 59.15671875 -67.05500488 58.20796875 -66.58227539 57.23046875 C-66.08074951 56.22628906 -65.57922363 55.22210938 -65.0625 54.1875 C-64.55904053 53.15882813 -64.05558105 52.13015625 -63.53686523 51.0703125 C-59.53816034 42.94967019 -55.39693489 34.91252426 -51 27 C-50.24662354 25.33420898 -50.24662354 25.33420898 -49.47802734 23.63476562 C-46.7151015 18.83965653 -42.44155211 17.02805429 -37.59765625 14.6875 C-36.68294052 14.22891602 -35.76822479 13.77033203 -34.82579041 13.29785156 C-32.89815944 12.33719532 -30.96561039 11.386352 -29.02856445 10.44482422 C-26.0635463 9.00050967 -23.11842387 7.52058977 -20.17382812 6.03515625 C-18.29534191 5.10460553 -16.41581769 4.17614667 -14.53515625 3.25 C-13.65481216 2.80744873 -12.77446808 2.36489746 -11.8674469 1.90893555 C-11.03986374 1.51101807 -10.21228058 1.11310059 -9.35961914 0.703125 C-8.63666153 0.34895508 -7.91370392 -0.00521484 -7.1688385 -0.37011719 C-4.42661813 -1.16652387 -2.71520486 -0.80434346 0 0 Z " 
fill="white" transform="translate(220,133)"/>
<path d="M0 0 C3.931308 3.712902 7.04797266 7.62574652 10.125 12.0625 C10.98140315 13.2828102 11.83816469 14.50286898 12.6953125 15.72265625 C13.28940918 16.57561279 13.28940918 16.57561279 13.89550781 17.44580078 C14.82925008 18.75972723 15.81194498 20.03865689 16.8046875 21.30859375 C18 23 18 23 18 25 C19.546875 24.87625 19.546875 24.87625 21.125 24.75 C26.78629834 25.11524505 29.58337413 27.43022539 33.3125 31.5625 C36.17746756 35.70078648 36.4868879 39.04997302 36 44 C34.13491261 48.67143383 31.57705205 52.05171086 27.1875 54.5625 C22.92550036 56.36843205 19.38910605 56.42668665 15 55 C11.12902802 52.88192099 8.18788718 50.85484884 6 47 C5.6325119 45.58244576 5.26683927 44.16442042 4.90234375 42.74609375 C3.09763524 37.24915809 -0.0661052 34.89538921 -4.75 31.75 C-5.4409375 31.26015625 -6.131875 30.7703125 -6.84375 30.265625 C-8.2125625 29.29819361 -9.58811797 28.34022229 -10.97070312 27.39257812 C-14.01206495 25.30548382 -17.00277084 23.149845 -20 21 C-15.76183463 15.93376232 -11.32591037 11.19961931 -6.625 6.5625 C-5.98433594 5.92634766 -5.34367188 5.29019531 -4.68359375 4.63476562 C-3.12469121 3.08749668 -1.56348584 1.54263508 0 0 Z " 
fill="white" transform="translate(212,174)"/>
<path d="M0 0 C5.06623768 4.23816537 9.80038069 8.67408963 14.4375 13.375 C15.07365234 14.01566406 15.70980469 14.65632812 16.36523438 15.31640625 C17.91250332 16.87530879 19.45736492 18.43651416 21 20 C17.287098 23.931308 13.37425348 27.04797266 8.9375 30.125 C7.7171898 30.98140315 6.49713102 31.83816469 5.27734375 32.6953125 C4.70870605 33.09137695 4.14006836 33.48744141 3.55419922 33.89550781 C2.24027277 34.82925008 0.96134311 35.81194498 -0.30859375 36.8046875 C-2 38 -2 38 -4 38 C-4.02126953 38.87011719 -4.02126953 38.87011719 -4.04296875 39.7578125 C-4.41594034 45.86648233 -5.55238665 48.75925239 -10 53 C-14.68917409 55.90948755 -19.6588697 55.60465626 -25 55 C-29.84983828 52.88370693 -32.27308941 49.95576116 -34.36328125 45.2109375 C-35.50307818 41.25311502 -35.33105242 37.88862436 -34 34 C-31.43583515 29.87538009 -28.55284301 26.8263804 -24 25 C-21.66796188 24.9222654 -19.33160941 24.91032272 -17 25 C-16.76925781 24.30648437 -16.53851562 23.61296875 -16.30078125 22.8984375 C-14.7305645 19.39963621 -12.5652313 16.59694646 -10.1875 13.625 C-9.28687554 12.47855918 -8.38712752 11.33142926 -7.48828125 10.18359375 C-7.05854004 9.63687012 -6.62879883 9.09014648 -6.18603516 8.52685547 C-4.02897013 5.74993396 -2.01149749 2.8831464 0 0 Z " 
fill="white" transform="translate(47,174)"/>
<path d="M0 0 C3.92356845 1.61613653 6.71389316 4.31334457 9.75 7.1875 C10.820993 8.18556325 11.89260823 9.18295923 12.96484375 10.1796875 C13.4841748 10.66405273 14.00350586 11.14841797 14.53857422 11.64746094 C19.88025747 16.59115041 25.46671585 21.27365312 31 26 C29.89331271 29.32006187 29.05427405 30.0582597 26.4375 32.25 C25.72464844 32.85457031 25.01179688 33.45914063 24.27734375 34.08203125 C23.52582031 34.71496094 22.77429688 35.34789062 22 36 C20.49732552 37.30943715 18.99718607 38.62179103 17.5 39.9375 C16.33333333 40.95833333 15.16666667 41.97916667 14 43 C10.91142321 40.38303224 9.60140709 37.30294673 7.875 33.6875 C4.5339325 27.35705632 1.338905 24.1694525 -5 21 C-5.77601562 20.59136719 -6.55203125 20.18273437 -7.3515625 19.76171875 C-9.21545934 18.8034255 -11.10523245 17.89570829 -13 17 C-11.38071731 13.09521545 -8.80673954 10.43827444 -5.9375 7.375 C-2.58466353 3.95790247 -2.58466353 3.95790247 0 0 Z " 
fill="white" transform="translate(91,121)"/>
</svg>




				</div>
				<div class="RightColumnButton" @onclick=ShowCityMoves><i class="bi bi-moon-stars-fill"></i></div>
				<div class="RightColumnButton hoverable" @onclick=OpenCityMapInternal>
					<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg"  
					viewBox="0 0 50 50" width="50px" height="50px" style="fill:white;">    
						<path d="M 13 3 C 7.4886661 3 3 7.4886661 3 13 L 3 37 C 3 42.511334 7.4886661 47 13 47 L 37 47 C 42.511334 47 47 42.511334 47 37 L 47 13 C 47 7.4886661 42.511334 3 37 3 L 13 3 z M 14 5 L 20 5 L 20 22.587891 C 19.072675 22.211025 18.06076 22 17 22 C 15.93924 22 14.927325 22.211025 14 22.587891 L 14 5 z M 22 5 L 27.041016 5 C 27.05093 5.193444 27.048634 5.3899905 27.064453 5.5820312 L 29.058594 5.4179688 C 29.047392 5.2803089 29.049038 5.1386513 29.041016 5 L 34 5 C 34 5.185 34.003672 5.3697344 34.013672 5.5527344 L 36.011719 5.4453125 C 36.003719 5.2983125 36 5.149 36 5 L 37 5 C 41.430666 5 45 8.5693339 45 13 L 45 13.994141 C 44.850052 13.994136 44.699919 13.995241 44.550781 13.988281 L 44.451172 15.986328 C 44.633172 15.996328 44.816 16 45 16 L 45 20.958984 C 44.861446 20.950962 44.719691 20.952608 44.582031 20.941406 L 44.419922 22.935547 C 44.611188 22.951333 44.806995 22.948908 45 22.958984 L 45 35.974609 A 1 1 0 0 0 44.974609 35.974609 A 1 1 0 0 0 43.974609 36.974609 A 1 1 0 0 0 44.935547 37.972656 C 44.554489 41.134684 42.346976 43.719483 39.388672 44.638672 A 1 1 0 0 0 39.421875 44.386719 A 1 1 0 0 0 38.421875 43.386719 A 1 1 0 0 0 37.421875 44.386719 A 1 1 0 0 0 37.609375 44.96875 C 37.407637 44.983869 37.205723 45 37 45 L 22 45 L 22 36.234375 C 23.82647 34.766699 25 32.519061 25 30 C 25 27.480939 23.82647 25.233301 22 23.765625 L 22 21.916016 A 1 1 0 0 0 22.037109 21.917969 A 1 1 0 0 0 23.037109 20.917969 A 1 1 0 0 0 22.037109 19.917969 A 1 1 0 0 0 22 19.919922 L 22 5 z M 12 5.0683594 L 12 13.056641 A 1 1 0 0 0 11.205078 14.035156 A 1 1 0 0 0 12 15.013672 L 12 23.765625 C 10.17353 25.233301 9 27.480939 9 30 C 9 32.519061 10.17353 34.766699 12 36.234375 L 12 44.931641 C 8.045415 44.441222 5 41.091155 5 37 L 5 22.203125 A 1 1 0 0 0 5.6523438 22.447266 A 1 1 0 0 0 6.6523438 21.447266 A 1 1 0 0 0 5.6523438 20.447266 A 1 1 0 0 0 5 20.689453 L 5 13 C 5 12.095877 5.1554398 11.231254 5.4296875 10.421875 A 1 1 0 0 0 5.6523438 10.447266 A 1 1 0 0 0 6.6523438 9.4472656 A 1 1 0 0 0 6.2753906 8.6660156 C 7.5264027 6.7242214 9.5928063 5.366882 12 5.0683594 z M 29.480469 8.03125 L 27.537109 8.5058594 C 27.770109 9.4608594 28.082891 10.407359 28.462891 11.318359 L 30.306641 10.548828 C 29.966641 9.7328281 29.688469 8.88525 29.480469 8.03125 z M 36.525391 8.0390625 L 34.642578 8.7148438 C 35.007578 9.7308438 35.521969 10.686641 36.167969 11.556641 L 37.773438 10.363281 C 37.244437 9.6512812 36.823391 8.8690625 36.525391 8.0390625 z M 8.9296875 10.740234 A 1 1 0 0 0 7.9296875 11.740234 A 1 1 0 0 0 8.9296875 12.740234 A 1 1 0 0 0 9.9296875 11.740234 A 1 1 0 0 0 8.9296875 10.740234 z M 39.636719 12.228516 L 38.443359 13.833984 C 39.313359 14.480984 40.270156 14.993422 41.285156 15.357422 L 41.960938 13.474609 C 41.130937 13.176609 40.348719 12.757516 39.636719 12.228516 z M 31.517578 12.904297 L 29.814453 13.953125 C 30.329453 14.789125 30.915641 15.595703 31.556641 16.345703 L 33.078125 15.046875 C 32.503125 14.374875 31.978578 13.653297 31.517578 12.904297 z M 34.949219 16.919922 L 33.648438 18.439453 C 34.397438 19.080453 35.202062 19.666594 36.039062 20.183594 L 37.089844 18.482422 C 36.339844 18.020422 35.619219 17.493922 34.949219 16.919922 z M 39.443359 19.689453 L 38.673828 21.535156 C 39.582828 21.916156 40.528328 22.227937 41.486328 22.460938 L 41.958984 20.517578 C 41.102984 20.308578 40.256359 20.029453 39.443359 19.689453 z M 25.3125 22.210938 A 1 1 0 0 0 24.3125 23.210938 A 1 1 0 0 0 25.3125 24.210938 A 1 1 0 0 0 26.3125 23.210938 A 1 1 0 0 0 25.3125 22.210938 z M 8.9296875 22.740234 A 1 1 0 0 0 7.9296875 23.740234 A 1 1 0 0 0 8.9296875 24.740234 A 1 1 0 0 0 9.9296875 23.740234 A 1 1 0 0 0 8.9296875 22.740234 z M 28.589844 24.505859 A 1 1 0 0 0 27.589844 25.505859 A 1 1 0 0 0 28.589844 26.505859 A 1 1 0 0 0 29.589844 25.505859 A 1 1 0 0 0 28.589844 24.505859 z M 17 26 L 20 34 L 17 32 L 14 34 L 17 26 z M 31.867188 26.798828 A 1 1 0 0 0 30.867188 27.798828 A 1 1 0 0 0 31.867188 28.798828 A 1 1 0 0 0 32.867188 27.798828 A 1 1 0 0 0 31.867188 26.798828 z M 35.144531 29.09375 A 1 1 0 0 0 34.144531 30.09375 A 1 1 0 0 0 34.244141 30.527344 C 33.676419 30.843299 32.80406 31.179687 31.570312 31.179688 C 29.290312 31.179687 28.410156 30.050781 28.410156 30.050781 C 27.510156 31.370781 27 32.990469 27 34.730469 C 27 39.300469 30.58 43 35 43 C 39.42 43 43 39.300469 43 34.730469 C 43 32.990469 42.489844 31.370781 41.589844 30.050781 C 41.589844 30.050781 40.709688 31.179688 38.429688 31.179688 C 37.357564 31.179688 36.547531 30.919636 35.978516 30.644531 A 1 1 0 0 0 36.144531 30.09375 A 1 1 0 0 0 35.144531 29.09375 z M 25.3125 34.210938 A 1 1 0 0 0 24.3125 35.210938 A 1 1 0 0 0 25.3125 36.210938 A 1 1 0 0 0 26.3125 35.210938 A 1 1 0 0 0 25.3125 34.210938 z M 14 37.412109 C 14.927325 37.788975 15.93924 38 17 38 C 18.06076 38 19.072675 37.788975 20 37.412109 L 20 45 L 14 45 L 14 37.412109 z"/></svg>
				</div>
				<div class="RightColumnButton" @onclick=ShowCharacterCreationModal><i class="bi bi-person-circle"></i></div>
				
			</div>
		</div>
	</EditForm>
</div>
<!--Modals-->
<!--VTT MiniSheet-->
<div class="VTTMiniSheet" style="display:@(IsShowingVTT?"block":"none")">
	<div class="Exit">
		<i class="bi bi-x-circle" @onclick="HideVTT"></i>
	</div>
	<div class="ClocksMini">
		<i class="bi bi-circle " @onclick="HideVTT"></i>
		<i class="bi bi-hourglass-split" style="font-size: 17px; top: -2px; left: 8px;" @onclick="OpenClocksViewerRequested"></i>
	</div>

	<div class="InnerColumContent">
		@foreach (var m in BasicMovesOnScreen)
		{
			<MoveViewer ID="m.ID"
						Player=Player
						IsSelected=false
						Clicked=@(_ => Select(m, FocusOnDetailed.Basic))
						ForceUpdate="Update" />
		}
	</div>
	<div class="InnerColumnPack PlayBookMoves">
		<div class="InnerColumnHeader d-flex align-items-center gap-1" style="cursor: pointer;">
			Movimientos de @Player.Archetype.ToUI() 
		</div>

		<div class="InnerColumContent">
			@foreach (var m in PlaybookMovesOnScreen)
			{
				<MoveViewer ID="m.ID" Player=Player IsSelected=false Clicked=@(_ => Select(m, FocusOnDetailed.Playbook)) ForceUpdate="Update" />
			}
		</div>

	</div>
	<div class="InnerColumnPack CorruptionMoves">
		<div class="InnerColumnHeader  d-flex align-items-center gap-1" style="cursor: pointer;">
			Movimientos de Corrupción 
		</div>
		@if (CurrentFocusDetail != FocusOnDetailed.Playbook)
		{
			<div class="InnerColumContent">
				@foreach (var m in CorruptionMovesOnScreen)
				{
					<MoveViewer ID="m.ID" Player=Player IsSelected=false Clicked=@(_ => Select(m, FocusOnDetailed.Corruption)) ForceUpdate="Update" />
				}
			</div>
		}
	</div>
	@if (UniqueMovesOnScreen.Count != 0)
	{
		<div class="InnerColumnPack EspecialesPlaybook">
			<div class="InnerColumnHeader" style="cursor: pointer;"
				 @onclick=@(()=>{Select(null, FocusOnDetailed.nowhere);})>
				Movimientos especiales de @Player.Archetype.ToUI()
			</div>
			@if (CurrentFocusDetail == FocusOnDetailed.nowhere || CurrentFocus == FocusOn.firstColumn || CurrentFocusDetail == FocusOnDetailed.Unique)
			{
				<div class="InnerColumContent">
					@foreach (var m in UniqueMovesOnScreen)
					{
						<MoveViewer ID="m.ID" Player=Player IsSelected=false Clicked=@(_ => Select(m, FocusOnDetailed.Unique)) ForceUpdate="Update" />
					}
				</div>
			}
		</div>
	}
</div>

<!-- Character creation Modal -->
<div class="FullScreenModal CharacterCreationPage d-flex flex-column justify-content-center @(IsShowingCharacterCreationModal?"":"HideModal")" 
	@onclick=HideCharacterCreationModal>
	<div class="CloseButton"></div>
	<CharacterCreationPage Player="Player" Game="Game" CloseMe="HideCharacterCreationModal" />
</div>

<!-- Faction Turn Modal -->
<div class="FullScreenModal CityMovesPage d-flex flex-column justify-content-center @(IsShowingCityMoves?"":"HideModal")"
	 @onclick=HideCityMoves>
	<div class="CloseButton"></div>
	<FactionTurnCharacters Player="Player" Game="Game" CloseMe="HideCityMoves" />
</div>
<!-- Circle Upgrades Modal -->
<div class="FullScreenModal CircleUpgrades d-flex flex-column justify-content-center @(IsShowingAdvances?"":"HideModal")" @onclick=HideCircleAdvances>
	<div class="CloseButton"></div>
	<div class="ModalBody Darker" style="" @onclick:stopPropagation=true>
		<div class="d-flex align-items-center justify-content-center gap-5">
			<div class="d-flex flex-column gap-2">
				<div class="pt-1" style="font-size:16px; font-weight:bold; margin-left:-10px;">
					Avances normales
				</div>
				@foreach (var advance in Player.AdvancesNormal)
				{
					<div @onclick=@(async _ => {await ToggleAdvance(advance, KindsOfAdvance.Normal);})>
						<AdvanceViewer Advance=advance />
					</div>
				}
			</div>
			<div class="d-flex flex-column gap-2">
				<div class="pt-3 d-flex flex-column" style="font-size:16px; font-weight:bold; margin-left:-10px;">
					<div>Avances extra</div>
					<div style="font-weight: normal; font-size: 14px; margin-top: -7px; margin-bottom: 3px;">
						(después de 5 normales)
					</div>
				</div>
				@foreach (var advance in Player.AdvancesExtra)
				{
					<div @onclick=@(async _ => {await ToggleAdvance(advance, KindsOfAdvance.Extra);})>
						<AdvanceViewer Advance=advance />
					</div>
				}
			</div>
		</div>
	</div>
</div>

<!-- Corruption Upgrades Modal -->
<div class="FullScreenModal CorruptionUpgrades d-flex flex-column justify-content-center @(IsShowingCorruptionAdvances?"":"HideModal")" @onclick=HideCorruptionAdvances>
	<div class="CloseButton"></div>
	<div class="ModalBody" @onclick:stopPropagation=true>
		<div class="d-flex flex-column align-items-center justify-content-start mb-3 w-100 h-100">
			<div class="py-1 pb-4" style="font-size:16px; font-weight:bold;">Avances de corrupción</div>
			<div class="flex-grow-1 d-flex flex-column justify-content-center w-100 gap-4">
				@foreach (var advance in Player.AdvancesCorruptions)
				{
					<div @onclick=@(async _ => {await ToggleAdvance(advance, KindsOfAdvance.Corruption);})>
						<AdvanceViewer Advance=advance />
					</div>
				}
			</div>
		</div>
	</div>
</div>

<!-- MoveViewer Modal -->
<div class="FullScreenModal FullScreenMoveViewer d-flex flex-column justify-content-center @(IsShowingOneMove?"":"HideModal")" @onclick=HideMoveViewer>
	<div class="CloseButton"></div>
	<div class="ModalBody" style="background:transparent; border:none; max-height:100% !important;">
		<div class="d-flex flex-column align-items-center justify-content-start mt-5 w-100 h-100">
			<div class="flex-grow-1 d-flex flex-column justify-content-center w-100 gap-4" style="max-width:800px;" @onclick:stopPropagation=true>
				@if (SelectedMovement is not null)
				{
					<MoveViewer ID=SelectedMovement.ID Player="Player" IsSelected=true FinishedRolling="HideMoveViewer" />
				}
			</div>
		</div>
	</div>
</div>


@code {
	[Parameter] public EventCallback OpenPeopleViewerRequested { get; set; }
	[Parameter] public EventCallback OpenImageManagerRequested { get; set; }
	[Parameter] public EventCallback OpenLastRollViewerRequested { get; set; }
	[Parameter] public EventCallback OpenClocksViewerRequested { get; set; }
	[Parameter] public EventCallback OpenVTTRequested { get; set; }
	[Parameter] public EventCallback OpenCityMapRequested { get; set; }
	[Parameter] public EventCallback CloseVTTRequested { get; set; }

	private void OpenVTTInternal()
	{
		IsShowingVTT = true;
		OpenVTTRequested.InvokeAsync();
	}
	
	private void OpenCityMapInternal()
	{
		//IsShowingVTT = true;
		OpenCityMapRequested.InvokeAsync();
	}

	

	private void HideVTT()
	{
		IsShowingVTT = false;
		CloseVTTRequested.InvokeAsync();
	}



	USMove? SelectedMovement = null;
	private List<USMove> BasicMovesOnScreen = new();
	private List<USMove> PlaybookMovesOnScreen = new();
	private List<USMove> UniqueMovesOnScreen = new();
	private List<USMove> CorruptionMovesOnScreen = new();

	private enum FocusOn { nowhere, firstColumn, secondColumn, thirdColumn }
	private enum FocusOnDetailed {nowhere, Basic, Circle, Drama, Playbook, Corruption,Unique, DebtMoves}
	private FocusOn CurrentFocus = FocusOn.nowhere;
	private FocusOnDetailed CurrentFocusDetail = FocusOnDetailed.nowhere;

	private bool IsShowingAdvances = false;
	private bool IsShowingOldRolls = false;
	private bool IsShowingPeople = false;
	private bool IsShowingVTT = false;
	private bool IsShowingClocks = false;
	private bool IsShowingCharacterCreationModal = false;
	private bool IsShowingCityMoves = false;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender) await JS.InvokeVoidAsync("autoResizeTextareas");
	}

	public string Unique1Screen
	{
		get { return Player.ArchetypeUniqueBody1UserText; }
		set 
		{
			if (Player.ArchetypeUniqueBody1UserText == value) return;
			Player.ArchetypeUniqueBody1UserText = value;
			Game.StoreChangesOnCharacter(Player, "actualizó sus detalles de libreto");
		}
	}
	public string Unique2Screen
	{
		get { return Player.ArchetypeUniqueBody2UserText; }
		set
		{
			if (Player.ArchetypeUniqueBody2UserText == value) return;
			Player.ArchetypeUniqueBody2UserText = value;
			Game.StoreChangesOnCharacter(Player, "actualizó sus detalles de libreto");
		}
	}
	private string WoundsLightText
	{
		get => Player.WoundsSoftDescription;
		set
		{
			if(value != Player.WoundsSoftDescription)
			{
				Player.WoundsSoftDescription = value;
				Game?.StoreChangesOnCharacter(Player, "heridas: "+value);
			}
		}
	}
	private string WoundsMidText
	{
		get => Player.WoundsMedDescription;
		set
		{
			if (value != Player.WoundsMedDescription)
			{
				Player.WoundsMedDescription = value;
				Game?.StoreChangesOnCharacter(Player, "heridas: " + value);
			}
		}
	}
	private string WoundsHardText
	{
		get => Player.WoundsHighDescription;
		set
		{
			if (value != Player.WoundsHighDescription)
			{
				Player.WoundsHighDescription = value;
				Game?.StoreChangesOnCharacter(Player, "heridas: " + value);
			}
		}
	}
	private string EquipeText
	{
		get => Player.Equipe;
		set
		{
			if (value != Player.Equipe)
			{
				Player.Equipe = value;
				Game?.StoreChangesOnCharacter(Player, "Equipo: " + Player.Equipe);
			}
		}
	}

	[Parameter] public USCharacterSheet Player { get; set; }
	protected async override void OnParametersSet()
	{
		if (Player is null) Player = new(Moves);

		VTT.Players = Game.Players;

		ChargeListsOnScreen();
	}

	private void ShowPeople()
	{
		IsShowingPeople = true;
	}

	private async Task SelectCharacterFromCast()
	{
		var selected = await CharacterSelectorService.StartSelection();
	}

	private void ShowLastRoll(object? sender, IRollReport report)
	{
		//LastRollViewerService.Show(report);
		IsShowingOldRolls = true;
		InvokeAsync(() => { StateHasChanged(); });
	}

	private void ShowInfo(object? sender, string msg) => Toaster.ShowInfo(msg);

	private void ChargeListsOnScreen()
	{

		PlaybookMovesOnScreen.Clear();
		UniqueMovesOnScreen.Clear();
		BasicMovesOnScreen.Clear();
		CorruptionMovesOnScreen.Clear();

		foreach (var m in Moves.AllMovements.Where(x => x.TypeOfMovement == MovementTypes.BasicMovements))
			BasicMovesOnScreen.Add(m);

		foreach (var m in Player.SelectedArchetypeMoves)
		{
			PlaybookMovesOnScreen.Add((USMove)Moves.GetMovement(m));
		}

		foreach (var m in from mov in Moves.AllMovements
								where
								mov.TypeOfMovement == MovementTypes.UniqueMove &&
								mov.Archetipe == Player.Archetype
								select mov.ID)
		{
			UniqueMovesOnScreen.Add((USMove)Moves.GetMovement(m));
		}

		var lio = (USMove)Moves.GetMovement(USMoveIDs.B_LiberarPoder, Player.Archetype);
		lio.TypeOfMovement = MovementTypes.BasicMovements;
		lio.PreCondition.Options = new List<string>();

		if (Player.LIOs is null || Player.LIOs.Count == 0)
		{
			Player.LIOs = (from l in Moves.AllLio where l.Archetype == Player.Archetype select l.ID).ToList();
			//await Game.StoreChangesOnCharacter(Player);
		}

		foreach (var hab in Player.LIOs)
		{
			lio.PreCondition.Options.Add(Moves.AllLio.Find(x => x.ID == hab)?.Text ?? "");
		}

		if (BasicMovesOnScreen.Find(x => x.ID == USMoveIDs.B_LiberarPoder) is null)
			BasicMovesOnScreen.Add(lio);

		foreach (var upgraded in Player.UpgradedMoves)
		{
			var m = PlaybookMovesOnScreen.Find(x => x.ID == upgraded);
			if (m is not null) m.IsImproved = true;
		}

		foreach (var m in Player.SelectedCorruptionMoves)
		{
			CorruptionMovesOnScreen.Add((USMove)Moves.GetMovement(m));
		}
	}
	private void Update(){
		ChargeListsOnScreen();
		InvokeAsync(()=> { StateHasChanged(); });
	}

	private void ToggleThridColumn(){
		SelectedMovement = null;

		if (CurrentFocus != FocusOn.thirdColumn)
			CurrentFocus = FocusOn.thirdColumn;
		else
			CurrentFocus = FocusOn.nowhere;
	}

	private async Task SelectPlaybookMoves()
	{
		List<MoveSelector.MovesPack> options = new();
		MoveSelector.MovesPack firstOption = new();
		firstOption.Title = Player.Archetype.ToUI();
		foreach (var m in Moves.AllMovements.Where(
			x => x.Archetipe == Player.Archetype &&
			x.TypeOfMovement == MovementTypes.ArchetipeMovement))
		{
			MoveSelector.MovesPackItem item = new();
			if (Player.SelectedArchetypeMoves.Contains(m.ID))
				item.IsAlreadySelected = true;
			else
				item.IsAlreadySelected = false;

			item.move = m;
			firstOption.Moves.Add(item);
		}
		options.Add(firstOption);

		foreach (US_Classes arc in Enum.GetValues(typeof(US_Classes)))
		{
			if (arc == Player.Archetype) continue;
			if (arc == US_Classes.All) continue;
			if (arc == US_Classes.NotSet) continue;

			firstOption = new();
			firstOption.Title = arc.ToUI();
			foreach (var m in Moves.AllMovements.Where(
				x => x.Archetipe == arc &&
				x.TypeOfMovement == MovementTypes.ArchetipeMovement))
			{
				MoveSelector.MovesPackItem item = new();
				if (Player.SelectedArchetypeMoves.Contains(m.ID))
					item.IsAlreadySelected = true;
				else
					item.IsAlreadySelected = false;

				item.move = m;
				firstOption.Moves.Add(item);
			}

			options.Add(firstOption);
		}


		await MSelector.StartSelection(options);

		Player.SelectedArchetypeMoves.Clear();
		PlaybookMovesOnScreen.Clear();

		foreach (var option in options)
		{
			foreach (var move in option.Moves)
			{
				if (move.IsAlreadySelected)
				{
					var m = move.move as USMove;
					Player.SelectedArchetypeMoves.Add(m.ID);
					PlaybookMovesOnScreen.Add(m);
				}

			}
		}

		await Game.StoreChangesOnCharacter(Player, "Actualizó sus movimientos de libreto");
		StateHasChanged();
	}

	private async Task SelectNewCorruptionMove()
	{
		List<MoveSelector.MovesPack> options = new();

		MoveSelector.MovesPack firstOption = new();
		firstOption.Title = Player.Archetype.ToUI();
		foreach (var m in Moves.AllMovements.Where(
			x => x.Archetipe == Player.Archetype &&
			x.TypeOfMovement == MovementTypes.CorruptionMovement))
		{
			MoveSelector.MovesPackItem item = new();
			if (Player.SelectedCorruptionMoves.Contains(m.ID))
				item.IsAlreadySelected = true;
			else
				item.IsAlreadySelected = false;

			item.move = m;
			firstOption.Moves.Add(item);
		}
		options.Add(firstOption);

		foreach (US_Classes arc in Enum.GetValues(typeof(US_Classes)))
		{
			if (arc == Player.Archetype) continue;
			if (arc == US_Classes.All) continue;
			if (arc == US_Classes.NotSet) continue;

			firstOption = new();
			firstOption.Title = arc.ToUI();
			foreach (var m in Moves.AllMovements.Where(
				x => x.Archetipe == arc &&
				x.TypeOfMovement == MovementTypes.CorruptionMovement))
			{
				MoveSelector.MovesPackItem item = new();
				if (Player.SelectedCorruptionMoves.Contains(m.ID))
					item.IsAlreadySelected = true;
				else
					item.IsAlreadySelected = false;

				item.move = m;
				firstOption.Moves.Add(item);
			}

			options.Add(firstOption);
		}


		await MSelector.StartSelection(options);

		Player.SelectedCorruptionMoves.Clear();
		CorruptionMovesOnScreen.Clear();

		foreach (var option in options)
		{
			foreach (var move in option.Moves)
			{
				if (move.IsAlreadySelected)
				{
					var m = move.move as USMove;
					Player.SelectedCorruptionMoves.Add(m.ID);
					CorruptionMovesOnScreen.Add(m);
				}

			}
		}

		await Game.StoreChangesOnCharacter(Player, "Actualizó sus movimientos de corrupción");
		StateHasChanged();
	}

	private async Task SelectNewLIOMove()
	{
		List<MoveSelector.MovesPack> options = new();

		MoveSelector.MovesPack firstOption = new();
		firstOption.Title = Player.Archetype.ToUI();
		foreach (var m in Moves.AllLio.Where(
			x=>x.Archetype == Player.Archetype))
		{
			MoveSelector.MovesPackItem item = new();
			if (Player.SelectedCorruptionMoves.Contains(m.ID))
				item.IsAlreadySelected = true;
			else
				item.IsAlreadySelected = false;

			item.move = m;
			firstOption.Moves.Add(item);
		}
		options.Add(firstOption);

		foreach(US_Classes arc in Enum.GetValues(typeof(US_Classes)))
		{
			if(arc == Player.Archetype) continue;
			if(arc == US_Classes.All) continue;
			if (arc == US_Classes.NotSet) continue;

			firstOption = new();
			firstOption.Title = arc.ToUI();
			foreach (var m in Moves.AllLio.Where(
				x => x.Archetype == arc))
			{
				MoveSelector.MovesPackItem item = new();
				if (Player.SelectedCorruptionMoves.Contains(m.ID))
					item.IsAlreadySelected = true;
				else
					item.IsAlreadySelected = false;

				item.move = m;
				firstOption.Moves.Add(item);
			}

			options.Add(firstOption);
		}


		await MSelector.StartSelection(options);

		Player.LIOs.Clear();

		foreach(var option in options)
		{
			foreach (var move in option.Moves)
			{
				if (move.IsAlreadySelected)
				{
					var m = move.move as USMove;
					Player.LIOs.Add(m.ID);
				}

			}
		}

		await Game.StoreChangesOnCharacter(Player, "Actualizó sus movimientos de dejarlo salir");
		StateHasChanged();
	}

	private bool IsThisMoveSelected(USMove mov) => SelectedMovement == mov;
	private void Select(USMove mov, FocusOnDetailed focus = FocusOnDetailed.nowhere)
	{
		// CurrentFocusDetail = focus;

		// if (CurrentFocusDetail == FocusOnDetailed.Basic || CurrentFocusDetail == FocusOnDetailed.Circle || CurrentFocusDetail == FocusOnDetailed.DebtMoves)
		// 	CurrentFocus = FocusOn.firstColumn;

		// else if (CurrentFocusDetail == FocusOnDetailed.Unique || CurrentFocusDetail == FocusOnDetailed.Drama)
		// 	CurrentFocus = FocusOn.secondColumn;

		// else if (CurrentFocusDetail == FocusOnDetailed.nowhere)
		// 	CurrentFocus = FocusOn.nowhere;
		// else
		// 	CurrentFocus = FocusOn.secondColumn;


		// if (mov == SelectedMovement){
		// 	SelectedMovement = null;
		// 	CurrentFocusDetail = FocusOnDetailed.nowhere;
		// 	CurrentFocus = FocusOn.nowhere;
		// }
		// else{
		// 	SelectedMovement = mov;
		// }
		SelectedMovement = mov;
		ShowMoveViewer();
	}

	private string ArmorString
	{
		get{ return Player.Armor.ToString(); }
		set
		{
			var oldValue = Player.Armor;
			var canparse = int.TryParse(value,out oldValue);
			if (canparse)
			{
				Player.Armor = oldValue;
				Game.StoreChangesOnCharacter(Player, "Actualizó su armadura a: " + Player.Armor);
			}
		}
	}

	private async Task CorruptionClicked(int n)
	{
		if (n > Player.Corruption) Player.Corruption++;
		else Player.Corruption--;

		await Game.StoreChangesOnCharacter(Player, "Actualizó marcó su corrupción a: "+n);
	}

	private async Task WoundClicked(int n)
	{
		if (n > Player.Damage) Player.Damage++;
		else Player.Damage--;

		await Game.StoreChangesOnCharacter(Player, "Modificó sus heridas");
	}

	async Task ToggleScar(USAttributes attribute)
	{
		var now = Player.GetScar(attribute);
		Player.SetScar(attribute, !now);

		await Game.StoreChangesOnCharacter(Player, "Ha marcado cicatriz, ajustado sus atributos y limpiado las heridas");
	}

	void ShowCircleAdvances() => IsShowingAdvances = true;
	void HideCircleAdvances() => IsShowingAdvances = false;
	void ShowCharacterCreationModal() => IsShowingCharacterCreationModal = true;
	void HideCharacterCreationModal() => IsShowingCharacterCreationModal = false;
	void ShowCityMoves() => IsShowingCityMoves = true;
	void HideCityMoves() => IsShowingCityMoves = false;
	private bool IsShowingCorruptionAdvances = false;
	void ShowCorruptionAdvances() => IsShowingCorruptionAdvances = true;
	void HideCorruptionAdvances() => IsShowingCorruptionAdvances = false;
	private bool IsShowingOneMove = false;
	void ShowMoveViewer() => IsShowingOneMove = true;
	void HideMoveViewer(){
		IsShowingOneMove = false;
		InvokeAsync(StateHasChanged);
	}

	async Task ResetCircles()
	{
		Player.IsMortalisTick = false;
		Player.IsNightTick = false;
		Player.IsPowerTick = false;
		Player.IsVeilTick = false;

		await Game.StoreChangesOnCharacter(Player, "Limpió sus círculos tras avanzar su ficha");
	}

	async Task ToggleAdvance(Advance adv, KindsOfAdvance kind)
	{

		if (kind == KindsOfAdvance.Normal)
		{
			adv.IsUsed = !adv.IsUsed;
			Player.AdvancesNormalBools[adv.ID] = adv.IsUsed;
		}
		else if (kind == KindsOfAdvance.Extra)
		{
			int count = Player.AdvancesNormalBools.Count(x => x == true);
			if (count < 5)
				Toaster.ShowError("No puedes marcar un avance extra hasta que hayas hecho al menos 5 avances normales");
			else
			{
				adv.IsUsed = !adv.IsUsed;
				Player.AdvancesExtraBools[adv.ID] = adv.IsUsed;
			}
		}
		else if (kind == KindsOfAdvance.Corruption)
		{
			adv.IsUsed = !adv.IsUsed;
			Player.AdvancesCorruptionBools[adv.ID] = adv.IsUsed;
			Player.Corruption = 0;
		}

		await Game.StoreChangesOnCharacter(Player, "Usó "+adv.Text);
	}

	private async Task AddToGetPaidDebt()
	{
		var ToWhom = await CharacterSelectorService.StartSelection();

		var d = new Debt
			{
				Amount = 1,
				PayingID = ToWhom.ID,
				ReceivingID = Player.ID,
				Reason = "Por qué?"
			};

		await Game.StoreDebt(d);

		StateHasChanged();
	}
	private async Task AddToPayDebt()
	{
		var ToWhom = await CharacterSelectorService.StartSelection();

		var d = new Debt
			{
				Amount = 1,
				PayingID = Player.ID,
				ReceivingID = ToWhom.ID,
				Reason = "Por qué?"
			};

		await Game.StoreDebt(d);

		StateHasChanged();
	}
}
