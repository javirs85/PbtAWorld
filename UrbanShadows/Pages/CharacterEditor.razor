@page "/EditPlayer/"

@inject USGameController Game
@inject NavigationManager Navigation
@inject USMovesService Moves

@using System.Text.Json 
@using Microsoft.AspNetCore.Components.Forms;

<div class="PbtASystemContainer BackPanel">
	
	<div>
		<EditForm Model="Player" OnSubmit="Submit">
			<div class="d-flex w-100">
				<div class="d-flex flex-column flex-grow-1">
					<div class="DataBoxSmall">
						<div class="DataHeader">Nombre:</div>
						<div class="DataBody">
							<InputText style="width: 100%; padding: 5px; background: var(--bs-gray-700);color: white;border: none;" @bind-Value=Player.Name />
						</div>
					</div>
					<div class="DataBoxSmall">
						<div class="DataHeader">Tipo:</div>
						<div class="DataBody">
							<InputText style="width: 100%; padding: 5px;background: var(--bs-gray-700);color: white;border: none;" @bind-Value=Player.Kind />
						</div>
					</div>
					<div class="DataBoxSmall">
						<div class="DataHeader">Tick:</div>
						<div class="DataBody">
							<InputText style="width: 100%; padding: 5px;background: var(--bs-gray-700);color: white;border: none;" @bind-Value=Player.Tick />
						</div>
					</div>
				</div>
				<div class="FAB">
					<i class="bi bi-x-square PanelButton red" @onclick=Dismiss />
					<i class="bi bi-check-square PanelButton green" @onclick=Submit />
				</div>
			</div>

			
			<div class="DataBox mt-3">
				<div class="DataHeader">Aspecto:</div>
				<div class="DataBody">
					<InputTextArea style="width: 100%;background: var(--bs-gray-700);color: white;border: none;" @bind-Value=Player.Aspecto />
				</div>
			</div>
			<div class="DataBox">
				<div class="DataHeader">Detalles:</div>
				<div class="DataBody">
					<InputTextArea style="width: 100%;background: var(--bs-gray-700);color: white;border: none;" @bind-Value=Player.Details />
				</div>
			</div>
			<div class="DataBox">
				<div class="DataHeader">Objetivo actual:</div>
				<div class="DataBody">
					<InputTextArea style="width: 100%;background: var(--bs-gray-700);color: white;border: none;" @bind-Value=Player.CurrentGoal />
				</div>
			</div>
			<div class="DataBox">
				<div class="DataHeader">Objetivo final:</div>
				<div class="DataBody">
					<InputTextArea style="width: 100%;background: var(--bs-gray-700);color: white;border: none;" @bind-Value=Player.FinalGoal />
				</div>
			</div>
			@if (/*Auth.IsMaster*/true)
			{
				<div class="DataBox">
					<div class="DataHeader">Master seeds:</div>
					<div class="DataBody">
						<InputTextArea style="width: 100%;background: var(--bs-gray-700);color: white;border: none;" @bind-Value=Player.MasterSeeds />
					</div>
				</div>
			}
			else
			{
				<div class="DataBox">
					<div class="DataHeader opacity-25">Las notas para el master han sido ocultadas</div>
				</div>
			}
			<div class="DataBox">
				<div class="DataHeader">Ticks:</div>
				<div class="DataBody">
					<div class="d-flex gap-2"><InputCheckbox @bind-Value=Player.IsDead></InputCheckbox>Muerto</div>
					<div class="d-flex gap-2"><InputCheckbox @bind-Value=Player.IsNPC></InputCheckbox>NPC</div>
				</div>
			</div>


			<div class="d-flex align-items-center justify-content-center flex-column">
				<InputFile OnChange="LoadFile" class="form-control" style="background: var(--bs-gray-700); border: none; color: white;" />

				<img src="@Data64" class="mt-2"/>
			</div>
			
			<div class="d-flex gap-2 justify-content-center align-items-center mt-2">
				<button class="btn btn-danger ">MUERTO</button>
			</div>
		</EditForm>
	</div>
</div>

@code {
	private USCharacterSheet Backup;
	private string Data64 = "";
	private string OriginalImage = "";

	[Parameter] public EventCallback Exit { get; set; }
	[Parameter] public USCharacterSheet Player { get; set; }

	protected async override Task OnParametersSetAsync()
	{
		Backup = Player?.Duplicate() ?? new USCharacterSheet(Moves);

		if (Data64 == "")
			RetrieveImage();

		Backup = new(Moves);
		if (Player == null) Player = new(Moves);

	}

	protected override void OnAfterRender(bool firstRender)
	{
		if(Data64 == "")
			RetrieveImage();
	}

	private async void LoadFile(InputFileChangeEventArgs e)
	{
		var format = "image/png";
		var resizedImage = await e.File.RequestImageFileAsync(format, 500, 500);
		var buffer = new byte[resizedImage.Size];
		await resizedImage.OpenReadStream().ReadAsync(buffer);
		Data64 = $"data: {format};base64,{Convert.ToBase64String(buffer)}";

		await Game.StoreImageBase64(Data64, Player.ID);
		StateHasChanged();
	}

	private async void RetrieveImage()
	{
		Data64 = await Game.getImageBase64Async(Player.ID);

		OriginalImage = Data64;
		StateHasChanged();
	}

	private async Task Submit()
	{
		await Game.StoreCharacter(Player);
		await Exit.InvokeAsync();
	}

	private async Task Dismiss()
	{
		Player = Backup;
		await Game.StoreCharacter(Player);
		await Exit.InvokeAsync();
	}
}
