@using PbtALib;
@using UrbanShadows.Controls
@using UrbanShadows.Pages
@using static PbtaWorldRazonCommonComponents.CharacterSelector;
@using static PbtaWorldRazonCommonComponents.LastRollOverlay;

@inject IToastService Toaster;
@inject NavigationManager Navigation
@inject USGameController Game
@inject USMovesService Moves
@inject MoveSelector.MoveSelectorService MSelector
@inject LastRollViewerService LastRollViewerService
@inject CharacterSelectorService CharacterSelectorService
@inject IDataBaseController Meta;
@inject WhiteBoard.WhiteBoardService WhiteboardService

<div class="text-light p-3 h-100 container-fluid" style="background:black;">
	<div class="BigContainer  d-flex h-100 flex-wrap gap-1">
		<div class="RightColumn row d-flex flex-column h-100 fs-2" style="width:60px;">
			<div class="RightColumnButton hoverable" @onclick=OpenPeopleViewerRequested><i class="bi bi-people-fill"></i></div>
			<div class="RightColumnButton hoverable" @onclick=OpenLastRollViewerRequested><i class="bi bi-dice-5"></i></div>
			<div class="RightColumnButton hoverable" @onclick=OpenImageManagerRequested><i class="bi bi-image"></i></div>
			<div class="RightColumnButton hoverable" @onclick=OpenClocksViewerRequested><i class="bi bi-hourglass"></i></div>
			<div class="RightColumnButton hoverable" @onclick=ShowCityMoves><i class="bi bi-moon-stars-fill"></i></div>
			<div class="RightColumnButton hoverable" @onclick=OpenVTTInternal><i class="bi bi-globe-europe-africa"></i></div>
		</div>
		<div class="d-flex gap-1 h-100 flex-grow-1 flex-wrap">
			<div class="d-flex flex-column" style="background:#25282c;">
				<MasterMovePackViewer MovesPack="MasterMoves" />
				<div class="d-flex flex-column gap-0">
					<div class="CircleSelector">
						<div style="max-width:100px;" class="CircleSelectorButton hoverable @(SelectedCircle == Circles.Mortalis?"Selected":"")" @onclick=@(()=>{SelectedCircle= Circles.Mortalis;})>Mort.</div>
						<div style="max-width:100px;" class="CircleSelectorButton hoverable @(SelectedCircle == Circles.Noche?"Selected":"")" @onclick=@(()=>{SelectedCircle= Circles.Noche;})>Noche</div>
						<div style="max-width:100px;" class="CircleSelectorButton hoverable @(SelectedCircle == Circles.Poder?"Selected":"")" @onclick=@(()=>{SelectedCircle= Circles.Poder;})>Poder</div>
						<div style="max-width:100px;" class="CircleSelectorButton hoverable @(SelectedCircle == Circles.Velo?"Selected":"")" @onclick=@(()=>{SelectedCircle= Circles.Velo;})>Velo</div>
					</div>
					<MasterMovePackViewer MovesPack="SelectedCircleMoves" NoPadding=true HideTittle="true" />
				</div>
				<div class="flex-grow-1 m-3">
					<button class="btn btn-dark w-100 h-100" @onclick=SaveAll>Save all changes</button>
				</div>
			</div>
			<div class="d-flex h-100 flex-wrap">
				<div class="d-flex flex-column gap-1" style="width:1050px;">
					@foreach (var p in from i in Game.Players
											where i.Name != "Master"
											select i as USCharacterSheet)
					{
						<div class="p-1" style="background:#25282c;">
							<div>@p.Name</div>
							<div class="d-flex flex-column ps-2">
								<div class="d-flex">
									<div class="d-flex flex-column" style="width:350px;">
										@foreach (var m in p.SelectedArchetypeMoves)
										{
											<div class="" style="background:red;">
												<MoveViewer ID="m"
															Player=Player
															IsSelected=@(SelectedMove is not null && SelectedMove == m)
															Clicked="@(()=>{MoveClicked(m);})"
															ForceUpdate="Update" />
											</div>
										}
									</div>
									<div class="d-flex flex-column" style="width:350px;">
										@foreach (var m in p.SelectedCorruptionMoves)
										{
											<div class="" style="background:red;">
												<MoveViewer ID="m"
															Player=Player
															IsSelected=@(SelectedMove is not null && SelectedMove == m)
															Clicked="@(()=>{MoveClicked(m);})"
															ForceUpdate="Update" />
											</div>
										}
									</div>
									<div class="d-flex flex-column" style="width:350px;">
										<EditForm Model="p">
											<InputTextArea 
												class="form-control h-100 w-100 bg-dark text-light" 
												style="border:1px solid #4f4f4f; outline:none !important;" 
												@bind-Value="p.CurrentGoal" />
										</EditForm>
									</div>
								</div>
							</div>
						</div>
					}
				</div>
			</div>
			<div class="d-flex flex-column flex-grow-1 h-100 gap-2" style="overflow:auto;">
				@foreach(var c in Game.People.Circles)
				{
					<div class="p-1" style="background:#25282c;">
						<div>@c.Name</div>
						<div class="d-flex flex-column">
							@foreach (var f in c.Factions)
							{
								<div>@f.Name</div>
								<EditForm Model="f">
									<InputTextArea 
										class="form-control bg-dark text-light" 
										style="border:1px solid #4f4f4f; outline:none !important;" 
										@bind-Value="@f.CurrentlyWorkingOn" />
								</EditForm>
							}
						</div>
					</div>
				}
			</div>
		</div>		
	</div>
</div>

<!--VTT MiniSheet-->
<div class="VTTMiniSheet" style="display:@(IsShowingVTT?"block":"none")">
	<div class="Exit">
		<i class="bi bi-x-circle" @onclick="HideVTT"></i>
	</div>
	<div class="ClocksMini">
		<i class="bi bi-circle " @onclick="HideVTT"></i>
		<i class="bi bi-hourglass-split" style="font-size: 17px; top: 0px; left: 9px;" @onclick="OpenClocksViewerRequested"></i>
	</div>
	<div class="TokensTry @(IsTokensTryMaximized?"":"Minimized")">
		@if(IsTokensTryMaximized)
		{
			<div class="hoverable w-100 d-flex justify-content-center bg-Dark" @onclick=@(()=>{IsTokensTryMaximized = false;})>Close</div>
			@foreach(VTTTokens t in Enum.GetValues(typeof(VTTTokens)))
			{
				@if (!t.IsProp() && !t.IsDungeonProp() && !t.IsForest()
						&& t != VTTTokens.Green6 && t != VTTTokens.BoxGray && t != VTTTokens.Black7 && t != VTTTokens.Black8
						&& t != VTTTokens.Red7 && t != VTTTokens.Red8 && t != VTTTokens.Blue7 && t != VTTTokens.Blue8
				)
				{
					<div class="TokenSelector" @onclick=@(()=>{AddMonster(t);})>
						<VTTTokenViewer VTTToken="t" isOUTSIDEMap=true/>
					</div>
				}
			}
		}
		else
		{
			<div class="hoverable" @onclick=@(()=>{IsTokensTryMaximized = true;})>Add token</div>
			<div class="hoverable" @onclick=AddFromPeople>Add from people</div>
		}

	</div>
	<div class="d-flex flex-column pack">
		<MasterMovePackViewer MovesPack="MasterMoves"/>
		<div class="CirclesSection d-flex flex-column gap-0">
			<div class="CircleSelector">
				<div class="CircleSelectorButton hoverable @(SelectedCircle == Circles.Mortalis?"hoverable Selected":"")" @onclick=@(()=>{SelectedCircle= Circles.Mortalis;})>Mort.</div>
				<div class="CircleSelectorButton hoverable @(SelectedCircle == Circles.Noche?"hoverable Selected":"")" @onclick=@(()=>{SelectedCircle= Circles.Noche;})>Noche</div>
				<div class="CircleSelectorButton hoverable @(SelectedCircle == Circles.Poder?"hoverable Selected":"")" @onclick=@(()=>{SelectedCircle= Circles.Poder;})>Poder</div>
				<div class="CircleSelectorButton hoverable @(SelectedCircle == Circles.Velo?"hoverable Selected":"")" @onclick=@(()=>{SelectedCircle= Circles.Velo;})>Velo</div>
			</div>
			<MasterMovePackViewer MovesPack="SelectedCircleMoves" HideTittle="true" />
		</div>
	</div>
	
	}
</div>

<!--VTT CityMoves-->
<div class="FullScreenModal CityMovesPage @(IsShowingCityMoves?"":"HideModal")"
	 @onclick=HideCityMoves>
	<div class="CloseButton"></div>
	<FactionTurnCharacters Player="Player" IsMaster=true Game="Game" CloseMe="HideCityMoves" />
</div>

@code {
	[Parameter] public USCharacterSheet Player { get; set; }
	[Parameter] public EventCallback OpenPeopleViewerRequested { get; set; }
	[Parameter] public EventCallback OpenImageManagerRequested { get; set; }
	[Parameter] public EventCallback OpenLastRollViewerRequested { get; set; }
	[Parameter] public EventCallback OpenClocksViewerRequested { get; set; }
	[Parameter] public EventCallback OpenVTTRequested { get; set; }
	[Parameter] public EventCallback CloseVTTRequested { get; set; }

	USMoveIDs? SelectedMove = null;

	private bool IsTokensTryMaximized = false;

	void Update()
	{
		InvokeAsync(() => { StateHasChanged(); });
	}

	void SaveAll()
	{
		Game.People.StoreInJsonFile(Game.SessionID);
		
	}


	void MoveClicked(USMoveIDs m)
	{
		if (SelectedMove == m)
			SelectedMove = null;
		else
			SelectedMove = m;
	}


	private bool IsShowingCityMoves = false;
	private bool IsShowingVTT = false;
	private void OpenVTTInternal()
	{
		IsShowingVTT = true;
		OpenVTTRequested.InvokeAsync();
	}

	private void HideVTT()
	{
		IsShowingVTT = false;
		CloseVTTRequested.InvokeAsync();
	}

	private void ShowCityMoves()
	{
		IsShowingCityMoves = true;
		OpenVTTRequested.InvokeAsync();
	}

	private void HideCityMoves()
	{
		IsShowingCityMoves = false;
		CloseVTTRequested.InvokeAsync();
	}


	private Circles SelectedCircle = Circles.Mortalis; 

	private MasterMovePack Agenda => Game.TextBook.MasterMovesPacks.Find(x => x.Title.Contains("Agenda")) ?? new();
	private MasterMovePack GeneralAdvice => Game.TextBook.MasterMovesPacks.Find(x => x.Title.Contains("advice")) ?? new();
	private MasterMovePack Principles => Game.TextBook.MasterMovesPacks.Find(x => x.Title.Contains("Principios")) ?? new();
	private MasterMovePack MasterMoves => Game.TextBook.MasterMovesPacks.Find(x => x.Title.Contains("Master moves")) ?? new();
	private MasterMovePack SelectedCircleMoves
	{
		get
		{
			return SelectedCircle switch
			{
				Circles.Mortalis => Game.TextBook.MasterMovesPacks.Find(x => x.Title.Contains("Mortandad")) ?? new(),
				Circles.Noche => Game.TextBook.MasterMovesPacks.Find(x => x.Title.Contains("Noche")) ?? new(),
				Circles.Poder => Game.TextBook.MasterMovesPacks.Find(x => x.Title.Contains("Poder")) ?? new(),
				Circles.Velo => Game.TextBook.MasterMovesPacks.Find(x => x.Title.Contains("Velo")) ?? new(),
				_ => Game.TextBook.MasterMovesPacks.Find(x => x.Title.Contains("Mortandad")) ?? new()
			};
		}
	}

	private void AddMonster(VTTTokens t)
	{
		WhiteboardService.AddToken(t);
	}

	private async Task AddFromPeople()
	{
		var dude = await CharacterSelectorService.StartSelection();
		WhiteboardService.AddTokenFromPeople(dude);
	}
}
