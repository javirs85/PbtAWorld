@using static PbtaWorldRazonCommonComponents.CharacterSelector;
@inject USGameController Game
@inject PbtALib.CharacterSelectorService Selector
@if (MinimalisticMode)
{
	<div class="PbtASystemContainer d-flex wrap">
		<div class="MinimalBox" @onclick=@(()=>{MinimalisticMode = false;})>
			@TheOtherName
		</div>
	</div>	
}
else
{
	@if (!IsEditing)
	{
		<div class="PbtASystemContainer DebtContainer">
			<div class="FirstColumn d-flex flex-column">
				<div class="TheOther" @onclick=ChooseCharacter>@TheOtherName</div>
			</div>
			<div class="DebtMain flex-grow-1">
				<EditableText @bind-Text=Debt.Reason EditFinished="StoreChanges"/>
			</div>
			<div class="ClossingButton" >
				<i class="bi bi-trash3-fill" @onclick=RemoveOneDebt/>
			</div>
		</div>
	}
}
	


@code {
	[Inject] IToastService Toaster { get; set; }
	/*[Inject] CharacterSelectionService Selector { get; set; }*/

	private bool IsEditing = false;

	public enum PayingMode {ToPay, ToBePaid};

	[Parameter] public Debt Debt { get; set; } = new();
	[Parameter] public PayingMode Mode { get; set; } = PayingMode.ToPay;
	[Parameter] public EventCallback ForceUpdateUI { get;set; }
	[Parameter] public bool MinimalisticMode { get; set; }

	string TheOtherName
	{
		get
		{
			if(Mode == PayingMode.ToBePaid){
				var ch = Game.GetCharacterByID(Debt.ReceivingID);
				if (ch.Name.Contains("Character not found"))
					return $"NO: {ch.ID.ToString()}";
				else
					return Game.GetCharacterByID(Debt.ReceivingID).Name;
			}
			else
				return Game.GetCharacterByID(Debt.PayingID).Name;
		}
	}

	private async Task ChooseCharacter()
	{
		var ch = await Selector.StartSelection();
		if (Mode == PayingMode.ToPay)
			Debt.PayingID = ch.ID;
		else
			Debt.ReceivingID = ch.ID;

		await Game.StoreDebt(Debt);
		StateHasChanged();
	}
	private async Task AddOneToDebt()
	{
		Debt.Amount++;
		await Game.StoreDebt(Debt);
		//await Data.ForceDataRefresh();
		StateHasChanged();
	}

	private async Task StoreChanges()
	{
		await Game.StoreDebt(Debt);
	}

	private async Task RemoveOneDebt()
	{
		Debt.Amount--;
		if (Debt.Amount <= 0)
		{
			await Game.DeleteDebt(Debt);
		}
		else
			await Game.StoreDebt(Debt);

		
		// StateHasChanged();
		// await ForceUpdateUI.InvokeAsync();
	}
}
