@page "/Running/{SelectedGameString}/{SelectedCharacterID:guid}"
@using DungeonWorld
@using PbtaWorldRazonCommonComponents
@using UrbanShadows
@using static PbtaWorldRazonCommonComponents.CharacterSelector;
@using static PbtaWorldRazonCommonComponents.LastRollOverlay;

@inject NavigationManager nav
@inject IDataBaseController Meta
@inject DinoGameController DinoGame
@inject DWGameController DWGame
@inject USGameController USGame
@inject USMovesService USMoves
@inject LastRollViewerService LastRollViewerService
@inject CharacterSelectorService CharacterSelectorService


<PbtaWorldRazonCommonComponents.LastRollOverlay/>
<CharacterSelector/>

@if(SelectedGame == AvailableGames.DI)
{
	<DinoIsland.Pages.PlayerViewer DinoPlayer="DinoPlayer"/>
}
else if(SelectedGame == AvailableGames.DW)
{
	@if(DWPlayer.Profession == DWClasses.DW_Master)
	{
		<DungeonWorld.Pages.MasterDW MasterPlayer="DWPlayer"/>
	}
	else
	{
		<DungeonWorld.Pages.DWPlayerSheet Player="DWPlayer" />
	}
	
}
else if(SelectedGame == AvailableGames.US)
{
	<UrbanShadows.Pages.USRunningPage Player="USPlayer" />
}

@code {
	[Parameter] public string SelectedGameString { get; set; } = "NotSet";
	[Parameter] public Guid SelectedCharacterID { get; set; } = new Guid();

	DinoCharacter DinoPlayer;
	DungeonWorld.DWCharacter DWPlayer;
	UrbanShadows.USCharacterSheet USPlayer;

	AvailableGames SelectedGame = AvailableGames.NotSet;

	private bool AlreadySet = false;
	protected override async Task OnParametersSetAsync()
	{
		if (AlreadySet) return;

		//we need a local version so the Pages in the html does not get set until the player is deserialized
		AvailableGames localGameId;
		bool isOk = Enum.TryParse(SelectedGameString, out localGameId);

		if (localGameId == AvailableGames.NotSet || !isOk)
			nav.NavigateTo("/");

		string data = "";

		data = await Meta.CharactersDB.GetSerializedDateForPlayer(SelectedCharacterID);



		if (localGameId == AvailableGames.DI)
		{
			DinoPlayer = System.Text.Json.JsonSerializer.Deserialize<DinoCharacter>(data);
			DinoPlayer.Game = DinoGame;
			Meta.SelectedPlayer = DinoPlayer;
		}
		else if(localGameId == AvailableGames.DW)
		{
			DWPlayer = System.Text.Json.JsonSerializer.Deserialize<DungeonWorld.DWCharacter>(data);
			var oldOne = Meta.SelectedSeason.Players.Find(x => x.ID == DWPlayer.ID);
			Meta.SelectedSeason.Players.Remove(oldOne);
			Meta.SelectedSeason.Players.Add(DWPlayer);
			Meta.SelectedPlayer = DWPlayer;
			DWGame.SessionID = Meta.SelectedSeason.CampaignGuid;
		}
		else if(localGameId == AvailableGames.US)
		{
			USPlayer = System.Text.Json.JsonSerializer.Deserialize<UrbanShadows.USCharacterSheet>(data);
			USPlayer?.ConnectoToMovesService(USMoves);
			CharacterSelectorService.Campaign = USGame.People;
			Meta.SelectedPlayer = USPlayer;
			foreach(var p in Meta.SelectedSeason.Players)
			{
				var str = await Meta.CharactersDB.GetSerializedDateForPlayer(p.ID);
				var usp = System.Text.Json.JsonSerializer.Deserialize<UrbanShadows.USCharacterSheet>(str);
				if(usp.Archetype == AvailableArchetypes.NotSet)
					usp.Archetype = (AvailableArchetypes)Enum.ToObject(typeof(AvailableArchetypes), usp.EncodedClass);
				USGame.Players.Add(usp);
				usp.IsNPC = false;
				var circle = USGame.People.Circles.Find(x => x.Name == usp.Circle.ToString());
				if (circle is not null)
					circle.DefaultFaction.Members.Add(usp);
			}
			AlreadySet = true;
		}


		LastRollViewerService.SetGameMode(localGameId);

		//we perform the update in the UI
		SelectedGame = localGameId;
	}
}
