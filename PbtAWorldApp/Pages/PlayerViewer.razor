@page "/"
@inject DinoMovesService Moves
@inject IToastService Toaster
@inject NavigationManager navigationManager
@inject DinoPlayer Player;
@using PbtAWorldApp.Controls.DinoControls

<EditForm Model="Player">
	<div class="Header ">
		<div class="ClassIconContainer">
			<img class="ClassIconPath" src="@Player.Class.ToPNGPath()" />
		</div>
		<div class="WideArea">	
			<div class="LongBlackStripe">
				<div class="d-flex">
					<InputText @bind-Value=Player.Name
							   class="borderlessInput"
					style="color:white;background:#000; width:150px; text-align:end; border:none; outline:none;"></InputText>
					<span style="margin-top: 1px;">: </span>
					<span style="margin-top: 2px; margin-right:5px;">&nbsp;El</span>
					<InputSelect 
						@bind-Value=Player.Class 
						style="background:#CCC; outline: none; border: none;">
						@foreach (DinoClasses op in Enum.GetValues(typeof(DinoClasses)))
						{
							@if(op != DinoClasses.NotSet)
							{
								<option value="@op">@op.ToUIString()</option>
							}
						}
					</InputSelect>
				</div>
				<div class="d-flex gap-2" style="font-family: Helvetica Neue; font-size:16px">
					<InputSelect @bind-Value=Player.Behavior style="background:#CCC; outline: none; border: none;">
						@foreach(var op in Player.BehaviorOptions)
						{
							<option value="@op">@op</option>
						}
					</InputSelect>
					<InputSelect @bind-Value=Player.Looks style="background:#CCC; outline: none; border: none;">
						@foreach (var op in Player.LooksOtions)
						{
							<option value="@op">@op</option>
						}
					</InputSelect>
				</div>
				<div class="d-flex gap-5">
					<div class="d-flex"> 
						@if(Player.Class == DinoClasses.Kid)
						{
							<i class="bi bi-info-circle me-2" title="Asigna +1, +1 y -1. "></i>
						}
						else
						{
							<i class="bi bi-info-circle me-2" title="Asigna +2, +1 y -1. Piensa que la característica favorita del @Player.Class.ToUIString() es @Player.FavoriteStat.ToUIString()"></i>
						}
						<InputText 
							style="width:40px; text-align:center; padding:5px"
							class="form-control"
							@bind-Value="UIInt">
						</InputText>
						<div class="ms-1">
							Inteligencia
						</div>
					</div>
					<div class="d-flex">
							<InputText style="width:40px; text-align:center; padding:5px"
								   class="form-control"
						@bind-Value="UIPhysic">
						</InputText>
						<div class="ms-1">
							Forma física
						</div>
					</div>
					<div class="d-flex">
						<InputText style="width:40px; text-align:center; padding:5px"
							   class="form-control"
					@bind-Value="UICold">
					</InputText>
					<div class="ms-1">
						Calma
					</div>
				</div>
				</div>
				<i class="text-light bi bi-x" style="font-size:40px; margin-top:-8px; "></i>
			</div>
			<div class="SubText">
				Has cazado la mayoría de las cosas que pueden cazarte, pero la forma en que estas cosas se mueven...
			</div>
		</div>
	</div>
	<div class="d-flex gap-2">
		<div class="flex-grow-1">

		</div>
		<div class="GeneralMoves ClassMoves  flex-grow-1 d-flex flex-column gap-3">
			<div>
				<h2>Movimientos de @Player.Class.ToUIString()</h2>
				<DinoMovesPack Moves=MovesOnScreen PackName="ClassMoves" OpenFirst=false AllowMultipleSelection =true/>
			</div>
			<div>
				<h2>Heridas</h2>
				<div class="d-flex flex-column w-100 mb-4">
					<InputText @bind-Value=Player.Wound1/>
					<InputText @bind-Value=Player.Wound2/>
					<div class="mt-1">
					<PlayerDownCheck/>
					</div>
				</div>
			</div>
			<div>
				<h2>Equipo</h2>
				<div class="d-flex flex-column w-100">
					<InputText @bind-Value=Gear0 />
					<InputText @bind-Value=Gear1 />
					<InputText @bind-Value=Gear2 />
					<InputText @bind-Value=Gear3 />
					<InputText @bind-Value=Gear4 />
					<InputText @bind-Value=Gear5 />
					<InputText @bind-Value=Gear6 />
					<InputText @bind-Value=Gear7 />
				</div>
			</div>
			
		</div>
		<div class="GeneralMoves flex-grow-1">
			<h2>Movimientos de peligro</h2>
			<DinoMovesPack Moves=Moves.DangerMoves PackName="DangerMoves" OpenFirst=false />

			<h2 class="mt-5">Movimientos de calma</h2>
			<DinoMovesPack Moves=Moves.SafetyMoves PackName="DangerMoves" OpenFirst=false />
		</div>		
		<div class="flex-grow-1">

		</div>
	</div>
</EditForm>

@code {
	PbtAWorldCommClient Client = new PbtAWorldCommClient();
	protected override async Task OnInitializedAsync()
	{
		Player.Name = "Sebas";
		Player.Class = DinoClasses.Engineer;
		Player.Clever = 1;
		Player.Fit = -1;
		Player.Steady = +2;

		Client.OnNewInfoMessageFromServer += (sender, msg) =>
		{
			Toaster.ShowInfo(msg.Body);
		};

		await Client.StartCommunication(navigationManager.BaseUri, Player.Name);
		Player.Connect(Client);
	}

	private List<DinoMove> MovesOnScreen
	{
		get
		{
			return Moves.AllMoves.FindAll(x => x.ForClass == Player.Class).ToList();
		}
	}

	private string Gear0 {
		get { return Player.Gear[0]; }
		set { Player.Gear[0] = value; }
	}
	private string Gear1
	{
		get { return Player.Gear[1]; }
		set { Player.Gear[1] = value; }
	}
	private string Gear2
	{
		get { return Player.Gear[2]; }
		set { Player.Gear[2] = value; }
	}
	private string Gear3
	{
		get { return Player.Gear[3]; }
		set { Player.Gear[3] = value; }
	}
	private string Gear4
	{
		get { return Player.Gear[4]; }
		set { Player.Gear[4] = value; }
	}
	private string Gear5
	{
		get { return Player.Gear[5]; }
		set { Player.Gear[5] = value; }
	}
	private string Gear6
	{
		get { return Player.Gear[6]; }
		set { Player.Gear[6] = value; }
	}
	private string Gear7
	{
		get { return Player.Gear[7]; }
		set { Player.Gear[7] = value; }
	}

	public void CustomParse(string newValue, ref int placeWhereToStore)
	{
		int val = 0;
		if (int.TryParse(newValue, out val))
		{
			if (val > -2 && val < 4)
				placeWhereToStore = val;
			else
			{
				Toaster.ShowError("El nuevo valor tiene que estar entre -1 y +3");
			}
		}
		else
		{
			Toaster.ShowError("Solo se pueden asignar números");
		}
	}

	

	private string UIInt
	{
		get { return Player.Clever.ToNiceUIStat(); }
		set
		{
			int val = Player.Clever;
			CustomParse(value, ref val);
			Player.Clever = val;
		}
	}
	private string UICold
	{
		get { return Player.Steady.ToNiceUIStat(); }
		set
		{
			int val = Player.Steady;
			CustomParse(value, ref val);
			Player.Steady = val;
		}
	}
	private string UIPhysic
	{
		get { return Player.Fit.ToNiceUIStat(); }
		set
		{
			int val = Player.Fit;
			CustomParse(value, ref val);
			Player.Fit = val;
		}
	}

}
