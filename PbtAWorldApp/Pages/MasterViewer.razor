@using PbtAWorldApp.Controls.DinoControls;
@inject DinoGameController Game;
@inject DinoPlayer Player;
@inject PbtAWorldCommClient Client;
@inject PNJs Pnjs;

<div class="container-fluid px-1">
	<div class="row px-1 gx-2">
		<div class="overlays" style="position: absolute;">
			@if (Game.LastRoll is not null && IsShowingLastRoll)
			{
				<div style="position: fixed;
							background: black;
							padding: 20px;
							padding-top: 0;
							border: 1px solid white;
							margin: 5px;
							z-index: 12;">
					<div @onclick=@(() =>{IsShowingLastRoll = false;})
						 class=""
						 style="cursor: pointer;
										position: relative;
										top: 0px;
										width: 100%;
										right: 0px;
										display: flex;
										align-items: center;
										gap: 20px;
										justify-content: space-between;">
						<h4 class="text-light">Último movimiento</h4>
						<i class="bi bi-x-lg text-light fs-2"></i>
					</div>
					<div class="LastRollContainer BoxPack @LastRollBoxColor">
						@if (Game.LastRoll is not null)
						{
							
							<div>@Game.LastRoll.Roller</div>
							<div>@Game.LastRoll.MoveTittle <span class="small opacity-50">con</span> @Game.LastRoll.Stat.ToUIString()</div>
							<div class="d-flex gap-2 justify-content-center m-4">
								<div class="d-flex align-items-center gap-2">
									<div class="dice">@Game.LastRoll.d1</div> +
									<div class="dice">@Game.LastRoll.d2</div> +
									<div class="dice" style="border-style: none; background: #ffffff3b;">
										@Game.LastRoll.bonus
									</div>
									=
								</div>
								<div class="RollResult">@Game.LastRoll.Total</div>
							</div>
						}
						else
						{
							<div class="small">Aún nadie ha tirado nada</div>
						}

					</div>
				</div>
			}
		</div>
		@if(!IsInGameMode)
		{
			<div class="col-md-6 col-lg-4 col-xl-4">
				<div class="BoxPack">
					<h4>Tierra firme <span class="fs-6">(elijen los jugadore)</span></h4>
					<RollableList Options="@Game.TextBook.WhyComingOptions"
									Tittle="Habéis llegado a tierra firme juntos, por que?"
									@bind-Value=@Game.WhyComing />
				</div>
				<div class="BoxPack">
					<h4>Quien sois?</h4>
					<p>
						Cada jugador escoge un libreto. No puede haber dos iguales. Sigue las instrucciones para crear tu héroe.
						</p>
					<p>
						Introducir vuestros héroes al resto de la mesa, sentiros libres de hacer una o dos preguntas pero no os lieis mucho. Habrá tiempo para conoceros mejor.
					</p>
				</div>
				<div class="RumorsPack BoxPack">
					<h4 @onclick=@(()=>{IsShowingRumors = !IsShowingRumors;})>
						<div class="d-flex justify-content-between" style="cursor:pointer;">
							<div class="d-flex align-items-center gap-1">Rumores <span class="fs-6"> (jugadores)</span></div>
						
							@if (IsShowingRumors)
							{
								<span class="small p-2 fs-6 mx-2" style="background:#354740; border-radius:4px;">Reducir</span>
							}
							else
							{
								<span class="small p-2 fs-6 mx-2" style="background:#354740; border-radius:4px;">Ampliar</span>
							}
						</div>					
					</h4>
					@if (IsShowingRumors)
					{
						@foreach (var p in Game.Players)
						{
							<RollableList Options="Game.TextBook.AvailableRumors"
											Tittle="@p.Name"
											@bind-Value=p.Rumor
											NewSelection="@(()=>{Game.RequestUpdateToUIOnClients();})"/>
								
						}
					}
					else
					{
						<table>
							@foreach (var p in Game.Players)
							{
								<tr>
									<td style="vertical-align: text-bottom;">@p.Name</td>
									<td>@p.Rumor</td>
								</tr>
							}
						</table>
					}
				</div>
				<div class="RumorsPack BoxPack">
					<h4>Lo que no sabéis:</h4>
					<ul>
						<li>¿Cómo es que hay dinosaurios vivos en la isla?</li>
						<li>Hay un complejo construido por el hombre en la isla. ¿Quién lo construyó y cuál es su propósito?</li>
						<li>El complejo ha caído, tal vez recientemente o tal vez hace algún tiempo. ¿Qué salió mal?</li>
					</ul>
				</div>
			</div>
			<div class="col-md-6 col-lg-4 col-xl-4">
				<div class="BoxPack">
					<h5>Que habéis oído sobre la isla antes de llagar?</h5>
					<p>
						Da un rumor a cada jugador
					</p>
					<p>Haz preguntas para clarificar el plan, asegúrate de que todo el mundo está de acuerdo en COMO llegan a la isla y que tienen que hacer allí cuando lleguen. Añade al mapa lo que sea necesario.</p>
					<MapMini @ref="Map" />
				</div>
				<div class="BoxPack">
					<h4>La llegada</h4>
					<p>
						Durante la llegada no pasó mucho tiempo hasta que encontraste vuestro primer dinosaurio<br/>
						<span class="small">haz una pregunta a cada personaje</span>
						<ul>
							<li>Describe la situación: ¿Dónde estabas y qué tipo de dinosaurio era?</li>
							<li>¿Cómo te sentiste al ver un dinosaurio real y vivo?</li>
							<li>¿Háblanos de una cosa extraña o inquietante acerca del dinosaurio?</li>
							<li>¿Cuéntanos una cosa extrañamente familiar acerca del dinosaurio?</li>
						</ul>	
					</p>
					<p>
						Poco después, algo salió mal.
						<ul>
							<li>¿Cuál fue la primera señal de que algo no estaba bien?</li>
							<li>¿A quién miraste instintivamente y por qué?</li>
							<li>¿Cuál es tu peor escenario personal?</li>
							<li>¿Qué te hizo darte cuenta de que estabas en serios problemas?</li>
						</ul>
					</p>
				</div>
			</div>
			<div class="col-md-6 col-lg-4 col-xl-4">
				<div class="BoxPack d-flex flex-column gap-2">
					<h4>Justo ahora</h4>
					<RollableList Options="Game.TextBook.WhereAreYouOptions"
								Tittle="Donde estáis? (jugadores)"
								@bind-Value=@Game.WhereAreYou />
					<RollableList Options="Game.TextBook.TheWayOutOptions"
								Tittle="Conoces una forma de salir de esta isla (aunque podría haber más). ¿Cuál es? Marca en el mapa (jugadores)"
								@bind-Value=@Game.TheWayOut />
				
					<h4>Por que no podéis simplemente iros?</h4>
					<RollableList Options="@Game.TextBook.ObstacleMCOptions"
								Tittle="Obstáculo (MC)"
								@bind-Value=@Game.ObstacleMC />
					<RollableList Options="@Game.TextBook.ObstaclePlayersOptions"
								Tittle="Misterio (Jugadores)"
								@bind-Value=@Game.ObstaclePlayers />

					<h4>Haz un movimiento duro, ponlos en peligro y pregunta: Que hacéis?</h4>
				</div>
			</div>
		}
		else
		{
			<div class="col-md-6 col-lg-4 col-xl-3">
				<div class="BoxPack MasterMoves d-flex flex-column gap-2">
					@foreach (var m in Game.TextBook.MasterMoves.OrderBy(x=>x.Order))
					{
						<div class="Move @m.HowOften.ToString()" @onclick=@(()=>{m.Use();})>
							@m.Tittle
						</div>
					}
				</div>
			</div>
			<div class="col-md-6 col-lg-4 col-xl-3 d-flex flex-column gap-1">
				<div class="BoxPack d-flex flex-column gap-2">
					<div>
						<strong>Salida:</strong> @Game.TheWayOut
					</div>
					<div>
						<strong>Obstáculo:</strong> @Game.ObstacleMC
					</div>
					<div>
						<strong>Misterio:</strong> @Game.ObstaclePlayers
					</div>
				</div>
				<div class="BoxPack MysteryBox">
					<h4>Misterio enlazado con su misterio <i @onclick=@(()=>{Game.SelectedSolution = null;}) class="bi bi-arrow-clockwise" style="cursor: pointer;"></i></h4>
					<div class="d-flex gap-2 mb-3">
						<div class="@(Game.SelectedMystery == Game.TextBook.WhyDinos?"MysteryButton selected":"MysteryButton")" @onclick=@(()=>{Game.SelectedMystery = Game.TextBook.WhyDinos;})>
							Why Dinos?
						</div>
						<div class="@(Game.SelectedMystery == Game.TextBook.WhyComplex?"MysteryButton selected":"MysteryButton")" @onclick=@(()=>{Game.SelectedMystery = Game.TextBook.WhyComplex;})>
							Why Complex?
						</div>
						<div class="@(Game.SelectedMystery == Game.TextBook.WhatWentGrong?"MysteryButton selected":"MysteryButton")" @onclick=@(()=>{Game.SelectedMystery = Game.TextBook.WhatWentGrong;})>
							What went wrong?
						</div>
					</div>
					
					<div class="d-flex flex-column gap-1" >
						@if (Game.SelectedMystery is not null)
						{
							@if (Game.SelectedSolution is not null && Game.SelectedMystery.Solutions.Contains(Game.SelectedSolution))
							{
								<div class="p-1"
								style="background: #00000044; cursor:pointer;">
									@Game.SelectedSolution.Solution<br />
									<small><strong>Pista:</strong> @Game.SelectedSolution.FirstClue</small>
								</div>
							}
							else
							{
								@foreach (var s in Game.SelectedMystery.Solutions)
								{
									<div class="p-1" 
									@onclick=@(()=>{Game.SelectedSolution = s;})
									style="background: #00000044; cursor:pointer;">
										@s.Solution<br/>
										<small><strong>Pista:</strong> @s.FirstClue</small>
									</div>
								}
							}
						}
					</div>
				</div>
				<div class="BoxPackSeparator">
					Cuando resuelvan el óbstaculo o el misterio ... 
				</div>
				<div class="BoxPack">
					<h4 class="d-flex gap-1 justify-content-between align-items-center">
						<div class="d-flex gap-1 align-items-center">
							Extinction event
							<i @onclick=@(()=>{Game.SelectedExtinctionEvent = null;}) class="bi bi-arrow-clockwise" style="cursor: pointer;"></i>
						</div>
						@if(Game.SelectedExtinctionEvent is not null)
						{
							<ClockViewer Clock="Game.SelectedExtinctionEvent.Clock"/>
						}						
					</h4>
					@if(Game.SelectedExtinctionEvent is null)
					{
						<div class="d-flex flex-wrap gap-1">
						@foreach(var ev in Game.TextBook.ExtinctionEvents)
						{
							<div class="MysteryButton" @onclick=@(()=>{Game.SelectedExtinctionEvent = ev;})>
								@ev.Tittle
							</div>
						}
						</div>
					}
					else
					{
						<div class="d-flex flex-column gap-1 p-1">
							<h5 class="MysteryButton text-center">@Game.SelectedExtinctionEvent.Tittle</h5>
							<h5 class="m-0"><strong>Movimientos de aviso</strong></h5>
							@foreach (var mv in Game.SelectedExtinctionEvent.WarningMoves)
							{
								<span>@mv</span>
							}
							<h5 class="m-0"><strong>Evento final</strong></h5>
							<span>@Game.SelectedExtinctionEvent.Clock.EventAt12</span>
							@foreach (var mv in Game.SelectedExtinctionEvent.NewMasterMoves.OrderBy(x=>x.Order))
							{
								<div class="Move @mv.HowOften.ToString()" @onclick=@(()=>{mv.Use();})>
									@mv.Tittle
								</div>
							}
						</div>
					}
				</div>
			</div>
			<div class="col-md-6 col-lg-4 col-xl-3 d-flex flex-column gap-1">
				<div class="BoxPack">
					<MapMini @ref="Map" />
				</div>
				<div class="BoxPack">
					@if(SelectedLoaction is not null)
					{
						<div>
							<div class="d-flex gap-1">
								<strong class="fs-3">@SelectedLoaction.Title</strong>
								<small class="flex-grow-1 border-start ps-1">@SelectedLoaction.Flavor</small>
							</div>
							Encontrarás: @SelectedLoaction.Things
							@foreach(var m in SelectedLoaction.LocationMoves)
							{
								<div class="Move">@m.Tittle</div>
							}
						</div>
					}
					<h4 class="border-top mt-4 pt-1">Localizaciones</h4>
					<h6>Naturales</h6>
					<div class="d-flex flex-wrap gap-1">
						@foreach(var loc in Game.TextBook.NaturalLocations)
						{
							<div class="MysteryButton @(loc == SelectedLoaction?"selected":"")"
								@onclick=@(()=>{SelectedLoaction = loc;})>
								@loc.Title</div>
						}
					</div>
					<h6>Artificiales</h6>
					<div class="d-flex flex-wrap gap-1">
						@foreach (var loc in Game.TextBook.ArtificialLocations)
						{
							<div class="MysteryButton @(loc == SelectedLoaction?"selected":"")"
							@onclick=@(()=>{SelectedLoaction = loc;})>
								@loc.Title
							</div>
						}
					</div>
					<h6>En el Complejo</h6>
					<div class="d-flex flex-wrap gap-1">
						@foreach (var loc in Game.TextBook.ComplexLocations)
						{
							<div class="MysteryButton @(loc == SelectedLoaction?"selected":"")"
							@onclick=@(()=>{SelectedLoaction = loc;})>
								@loc.Title
							</div>
						}
					</div>
					<h6>Extrañas</h6>
					<div class="d-flex flex-wrap gap-1">
						@foreach (var loc in Game.TextBook.ExtrangeLocations)
						{
							<div class="MysteryButton @(loc == SelectedLoaction?"selected":"")"
							@onclick=@(()=>{SelectedLoaction = loc;})>
								@loc.Title
							</div>
						}
					</div>
				</div>
			</div>
			<div class="col-md-6 col-lg-4 col-xl-3 d-flex flex-column gap-1">
				<div class="d-flex flex-wrap w-100 justify-content-center">
					<div class="w-100 d-flex gap-0 p-0">
						<div class="DinoSelectorButton @(_isShowingDinos?"selected":"")" @onclick=@(()=>{_isShowingDinos = true;})>
							Dinosaurios
						</div>
						<div class="DinoSelectorButton @(!_isShowingDinos?"selected":"")" @onclick=@(()=>{SelectPNJsPanel();})>
							PNJs
						</div>
					</div>
					<div class="BoxPack Monster">
						@if (_isShowingDinos)
						{
							@if (SelectedMonster is not null)
							{
							
								<div class="d-flex gap-2 align-items-center" style="cursor: pointer;" @onclick=@(()=>{SelectedMonster=null;})>
									<i class="bi bi-x-lg"></i>
									<h3>@SelectedMonster.KindName</h3>
									<div @onclick=@(()=>{Game.ShowImageToAllPlayers(SelectedMonster.Image);}) style="cursor: pointer;">
										<i class="bi bi-send-plus fs-4"></i>
									</div>
								</div>
								<small>@SelectedMonster.Flavor</small>
								<p class="border-white border-top mt-2 pt-3"><strong>Cuantos?</strong> @SelectedMonster.NumAppearing</p>
								<p><strong>Instinto:</strong> @SelectedMonster.Instinct</p>
								<p>
									<strong>Ejemplos:</strong>
									<ul>
										@foreach (var e in SelectedMonster.Examples)
										{
											<li>@e</li>
										}
									</ul>
								</p>
								@foreach (var m in SelectedMonster.Moves.OrderBy(x => x.Order))
								{
									<div class="Move @m.HowOften.ToString()" @onclick=@(()=>{m.Use();})>
										@m.Tittle
									</div>
								}
								<div class="mt-3">
									<RollableList Options="@Game.TextBook.Gimmicks"
													Tittle="Característica"
									@bind-Value=@Game.GimmickSelected />
								</div>
								<div class="w-100 d-flex justify-content-center p-3	">
									<img src="@SelectedMonster.Image.src" />
								</div>
							
							}
							else
							{
								<div class="d-flex flex-wrap">
								@foreach (var monster in Game.TextBook.Monsters)
								{
									<div class="DinoMonster" @onclick=@(()=>{SelectedMonster = monster;})>
										@monster.KindName
										<img src="@monster.Image.src" />
									</div>
								}
								</div>
							}
						}
						else
						{
							<button class="btn btn-primary" @onclick=@(() =>{_ShowPNJSelection = true;})>Añadir PNJ</button>
							<div class="d-flex flex-wrap">
								@foreach(var pnj in Game.PNJs)
								{
									<div class="d-flex">
										<div class="PNJInList SmallPnJ"
											 style="background-image: url(@pnj.Image.src);">
											<span class="PNJName">@pnj.Name</span>
										</div>
										<div>
											<div class="fw-bold">Puede ofrecer:</div>
											<div><small>@pnj.CanOffer</small></div>
											<div class="mt-2 fw-bold">Objetivo</div>
											<div><small>@pnj.Goal</small></div>
											<div @onclick=@(()=>{Game.ShowPNJToAllPlayers(pnj);}) style="cursor: pointer;">
												<i class="bi bi-send-plus fs-3"></i>
											</div>
										</div>
									</div>
								}
							</div>
							<div class="PNJSelectionPanel" style="@(_ShowPNJSelection?"display:block":"display:none")">
								<div @onclick=@(() =>{_ShowPNJSelection = false;})
									class="p-3 px-4"
									 style="cursor: pointer; position:fixed; top:0px; right: 20px; z-index:11; background: black; border-radius:100px;">
									<i class="bi bi-x-lg text-light fs-2"></i>
								</div>
								<div class="d-flex">
									<div class="d-flex flex-wrap flex-grow-1">
										@foreach (var p in Pnjs.PNJList)
										{
											<div class="PNJInList" 
												@onclick=@(()=>{SelecetedPnj = p;}) 
												style="background-image: url(@p.Image.src); cursor: pointer;">
												<span class="PNJName">@p.Name</span>
											</div>
										}
									</div>
									<div class="d-flex flex-column gap-2 border p-3 align-items-center" style="width: 1000px;">
										@if(SelecetedPnj is not null)
										{
											<div class="PNJInList"
												 style="background-image: url(@SelecetedPnj.Image.src)">
												<span class="PNJName">@SelecetedPnj.Name</span>
											</div>

											<EditForm class="d-flex flex-column gap-2 w-100" Model="SelecetedPnj">
												<InputText @bind-Value=SelecetedPnj.Name class="form-control" />
												<RollableList Options="@Game.TextBook.NPCGoals"
															Tittle="Objetivo del NPC"
															@bind-Value=@SelecetedPnj.Goal />
												<RollableList Options="@Game.TextBook.NPCOffers"
															Tittle="Que ofrece el NPC"
															@bind-Value=@SelecetedPnj.CanOffer />
												<div class="btn btn-primary" @onclick=@(()=>{Game.PNJs.Add(SelecetedPnj); _ShowPNJSelection=false;})>Añadir como nuevo</div>
												<div class="btn btn-primary" @onclick=@(()=>{Game.PNJs.Remove(SelecetedPnj); _ShowPNJSelection=false;})>Borrar</div>
											</EditForm>
										}										
									</div>
								</div>
							</div>
							
						}					
					</div>
				</div>
			</div>
		}
	</div>
</div>

@code {
	[Parameter] public MapMini? Map { get; set; } = null;
	[Parameter] public RollReport<DinoMoveIDs, DinoStates>? LastRoll { get; set; } = null;

	private bool IsShowingLastRoll = false;
	private string LastRollBoxColor
	{
		get
		{
			if (Game.LastRoll.Total >= 10) return "TotalSuccess";
			else if (Game.LastRoll.Total >= 7) return "HalfSuccess";
			else return "FailedRoll";
		}
	}

	private bool _isShowingDinos = true;
	private bool _ShowPNJSelection = false;

	private bool _isInGame = false;
	private DinoMonster? SelectedMonster = null;
	private PNJ? SelecetedPnj = null;
	[Parameter] public bool IsInGameMode
	{
		get { return _isInGame; }
		set { _isInGame = value; }
	}

	private Location? SelectedLoaction = null;

	private void SelectPNJsPanel()
	{
		_isShowingDinos = false;
	}

	private void SetNewRumor(Tuple<DinoPlayer, string> data)
	{
		var dp = data.Item1 as DinoPlayer;
		dp.Rumor = data.Item2;
		Game.SetRumor(dp.ID, data.Item2);
	}

	private bool IsShowingRumors = false;




	protected override void OnInitialized()
	{
		Player.UpdateUI += (o, e) =>
		{
			InvokeAsync(() => { StateHasChanged(); });
			Map?.Update();
		};
		Game.OnUIUpdate += (o, e) =>
		{
			InvokeAsync(() => { StateHasChanged(); });
		};

		Game.OnNewRoll += (o, roll) =>
		{
			IsShowingLastRoll = true;
			InvokeAsync(() => { StateHasChanged(); });
		};

		if (string.IsNullOrEmpty(Game.WhereAreYou)) Game.WhereAreYou = Game.TextBook.WhereAreYouOptions[0];
		if (string.IsNullOrEmpty(Game.ObstacleMC)) Game.ObstacleMC = Game.TextBook.ObstacleMCOptions[0];
		if (string.IsNullOrEmpty(Game.ObstaclePlayers)) Game.ObstaclePlayers = Game.TextBook.ObstaclePlayersOptions[0];
		if (string.IsNullOrEmpty(Game.TheWayOut)) Game.TheWayOut = Game.TextBook.TheWayOutOptions[0];
		if (string.IsNullOrEmpty(Game.WhyComing)) Game.WhyComing = Game.TextBook.WhyComingOptions[0];

	}
}
