@page "/CommTest"
@inject NavigationManager navigationManager
@inject IToastService Toaster
@inject DinoMovesService DinoMoves
@using Microsoft.AspNetCore.SignalR.Client;


<h1>Blazor SignalR Chat Sample</h1>
<hr />

@if (!Client.IsConnected)
{
    <p>
        Enter your name to start chatting:
    </p>

    <input type="text" maxlength="32" @bind="@_userName" />
    <button type="button" @onclick="@Start"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>

    // Error messages
    //@if (_message != null)
    //{
    //    <div class="invalid-feedback">@_message</div>
    //    <small id="emailHelp" class="form-text text-muted">@_message</small>
    //}
}
else
{
    // banner to show current user
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>You are connected as <b>@Client.UserName</b></span>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@Client.DisconnectAsync">Disconnect</button>
    </div>
    // display messages
    <div id="scrollbox">
        @foreach (var item in _messages)
        {
            @if (item.IsNotice)
            {
                <div class="alert alert-info">@item.ToScreen</div>
            }
            else
            {
                <div class="@item.CSS">
                    <div class="user">@item.Sender</div>
                    <div class="msg">@item.ToScreen</div>
                </div>
            }
        }
        <hr />
        <textarea class="input-lg" placeholder="enter your comment" @bind="@_newMessage"></textarea>
        <button class="btn btn-default" @onclick="SendMessage">Send</button>
        <button class="btn btn-default" @onclick="TestMoves">TestMoves</button>
    </div>
}

@code {
    PbtAWorldCommClient Client = new();
    string _newMessage = "";
    string _userName = "";
    List<UIMEssage> _messages = new();

    private void TestMoves()
    {
        var move = DinoMoves.DangerMoves.Find(x => x.ID == DinoMoveIDs.D_Run);
        var stat = move?.Roll ?? DinoIsland.DinoStates.D_NotSet;

    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        /*Client.OnNewInfoMessageFromServer += (sender, msg) =>
        {
        Toaster.ShowInfo(msg.Body);
        };
        Client.OnNewChatMessageFromServer += (sender, msg) =>
            {
            _messages.Add(new UIMEssage(Client, msg));
            InvokeAsync(() =>
                {
                _newMessage = "";
                StateHasChanged();
        });
        };
        */
        Client.OnNewErrorMessage += (sender, msg) => Toaster.ShowError(msg);
    }

    private async Task SendMessage()
    {
        // await Client.SendAsync(new ChatMessage(_newMessage) as PbtAMessage);
    }

    private async Task Start()
    {
        await Client.StartCommunication(navigationManager.BaseUri, _userName);
    }

    private class UIMEssage
    {
        public PbtAMessage? Message { get; set; }

        private string ClientUserName = "";

        public UIMEssage(PbtAWorldCommClient client, PbtAMessage msg)
        {
            ClientUserName = client.UserName;
            Message = msg;
        }

        public string ToScreen
        {
            get
            {
                /*  if (Message is InfoMessage) return (Message as InfoMessage)?.Body ?? "Message is null";
                   else if (Message is ChatMessage) return (Message as ChatMessage)?.Parameters["message"] ?? "Message is null";
                   else return "Unknown message type";
                   */
                return "";
            }
        }
        public string Sender => Message?.Sender ?? "Unknown sender";
        public bool IsNotice => /*Message is InfoMessage ? true : */false;
        public string CSS => ClientUserName == Message?.Sender ? "sent" : "received" ?? "received";
    }

}
