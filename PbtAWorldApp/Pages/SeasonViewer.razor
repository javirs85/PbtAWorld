@page "/SeasonViewer/{SelectedSeasonID:guid}"
@using DungeonWorld;
@using UrbanShadows;
@inject IDataBaseController Meta;
@inject NavigationManager nav;
@inject DinoCharacter DinoCharacter;
@inject DinoGameController DinoGame;
@inject USMovesService Moves;

@inject IToastService Toaster;

<PageTitle>Seleccione su personaje</PageTitle>

<div class="FullPage">
	<div class="DarkUpperMenu d-flex align-items-center justify-content-between">
		<i class="bi bi-arrow-left-short fs-1 p-2" style="cursor:pointer;" @onclick=GoBack></i>
		<p class="mt-3">@Meta.SelectedGame.ToUI() / @Meta.SelectedSeason?.Name</p>
		<i class="bi bi-arrow-left-short fs-1 p-2" style="cursor:pointer; color:black" @onclick=GoBack></i>
	</div>
	<div class="Title">
		<h3>Elije tu personaje</h3>
		<i class="bi bi-arrow-clockwise fs-5 p-2" style="cursor:pointer; margin-top:-5px;" @onclick=Reload></i>
	</div>
	<div class="d-flex gap-2 p-2">
		<div class="p-3 d-flex flex-column gap-1 align-items-center" style="background:black;">
			<img src="@Meta.SelectedGameCover" />
			<div class="bitTittle fs-1 text-light opacity-50">@Meta.SelectedSeason?.Name</div>
			@if (Meta.SelectedSeason is not null &&  IsShowingTools)
			{
				<EditForm Model="Meta.SelectedSeason">
					<div class="w-100 p-2" style="border: 1px solid gray; position:relative;" >
						<i class="bi bi-x-lg text-light" style="position:absolute; right: 10px; cursor:pointer" @onclick=@(()=>{IsShowingTools = false;})></i>
						<h3>Cambiar nombre</h3>
						<div class="d-flex gap-1">
							<InputText class="form-control" @bind-Value=Meta.SelectedSeason.Name></InputText>
							<div class="btn btn-primary" @onclick=UpdateSeasonName>Actualizar</div>
						</div>
						<div class="btn btn-danger w-100 mt-1" @onclick=Delete>Eliminar</div>
					</div>
				</EditForm>
			}
			else
			{
				<i class="bi bi-gear text-light opacity-50 w-100" style="cursor:pointer" @onclick=@(()=>{IsShowingTools = true;})></i>
			}
		</div>
		<div class="p-3" style="background: black;">
			
			@if (Meta.SelectedSeason is null || Meta.SelectedSeason.Players.Count == 0)
			{
				<small>No hay personajes...</small>
			}
			else
			{
				@if (IsLoadingFromDB)
				{
					<p>Cargando datos de la base de datos ...</p>
				}
				@foreach(var p in Meta.SelectedSeason.Players)
				{
					<div class="PlayerBox d-flex gap-2 align-items-center @(p == Meta.SelectedPlayer?"Selected":"")" @onclick=@(async ()=>{await SelectPlayer(p);})>
						@p.Name (@FromClassIDToUI(p.EncodedClass))
						@if(p==Meta.SelectedPlayer)
						{
							<div class="btn btn-primary" @onclick=Start>Empezar a jugar!</div>
							@if (IsShowingDeleteCharacterButton)
							{
								<div class="btn btn-danger" @onclick=DeleteSelectedCharacter>Eliminar personaje</div>
							}
							else
							{
								<div class="bg-danger text-light rounded-circle p-2 py-1"
									style="cursor:pointer"
									@onclick=@(()=>{IsShowingDeleteCharacterButton = true;})>
									<i class="bi bi-three-dots"></i>
								</div>
							}
						}						
					</div>
				}
			}
			@if (IsShowingNewCharacterTools)
			{
				<div class="PlayerBox opacity-50" style="border: none!important;" @onclick=@(()=>{IsShowingNewCharacterTools = false;})>
					Crear un personaje nuevo
				</div>
			}
			else
			{
				<div class="PlayerBox" @onclick=@(()=>{IsShowingNewCharacterTools = true; Meta.SelectedPlayer = null;})>
					Crear un personaje nuevo
				</div>
			}
			
		</div>
		@if(IsShowingNewCharacterTools)
		{
			<div class="p-3 d-flex flex-column gap-2 text-light" style="background: black;">
				<p>Crear nuevo personaje de tipo...</p>
				<EditForm Model="this">
					<InputText class="form-control" @bind-Value=NewCharacterName></InputText>
				</EditForm>

				@if(Meta.SelectedGame == AvailableGames.DW)
				{
					@foreach (DWClasses c in Enum.GetValues(typeof(DWClasses)))
					{
						@if(c != DWClasses.DW_NotSet)
						{
							<div class="btn btn-primary" @onclick=@(async ()=>{await CreateNewDWCharacter(c);})>@c.ToUI()</div>
						}
					}
				}else if(Meta.SelectedGame == AvailableGames.DI)
				{
					@foreach (DinoIsland.DinoClasses c in Enum.GetValues(typeof(DinoIsland.DinoClasses)))
					{
						@if (c != DinoClasses.NotSet)
						{
							<div class="btn btn-primary" @onclick=@(async ()=>{await CreateNewDinoCharacter(c);})>@c.ToUIString()</div>
						}
					}
				}
				else if (Meta.SelectedGame == AvailableGames.US)
				{
					@foreach (UrbanShadows.AvailableArchetypes c in Enum.GetValues(typeof(UrbanShadows.AvailableArchetypes)))
					{
						@if (c != UrbanShadows.AvailableArchetypes.NotSet && c != AvailableArchetypes.All)
						{
							<div class="btn btn-primary" @onclick=@(async ()=>{await CreateNewUSCharacter(c);})>@c.ToUI()</div>
						}
					}
				}
				else if (Meta.SelectedGame == AvailableGames.SV)
				{
					@foreach (ScumAndVillainy.SVClasses c in Enum.GetValues(typeof(ScumAndVillainy.SVClasses)))
					{
						@if (c != ScumAndVillainy.SVClasses.NotSet && c != ScumAndVillainy.SVClasses.All)
						{
							<div class="btn btn-primary" @onclick=@(async ()=>{await CreateNewSVCharacter(c);})>@c.ToUI()</div>
						}
					}
				}
			</div>
		}
	</div>
</div>
@code {
	[Parameter] public Guid SelectedSeasonID { get; set; } = new Guid();

	private bool IsShowingTools = false;
	private bool IsShowingNewCharacterTools = false;
	private string NewCharacterName = "Nombre";
	private bool IsShowingDeleteCharacterButton = false;
	private bool IsLoadingFromDB = false;

	protected async override Task OnParametersSetAsync()
	{
		if (SelectedSeasonID == new Guid())
			nav.NavigateTo("/");
		else
		{
			if(Meta.SelectedSeason is null || Meta.SelectedGame is null)
			{
				IsLoadingFromDB = true;
				Meta.SelectedSeason = await Meta.SeasonsDB.GetSeason((Guid)SelectedSeasonID);
				IsLoadingFromDB = false;
				if(Meta.SelectedSeason is not null)
				{
					Meta.SelectedGame = Meta.SelectedSeason?.GameID;
					IsLoadingFromDB = true;
					await Meta.LoadPlayerNamesForSeason(Meta.SelectedSeason);
					IsLoadingFromDB = false;
				}
				else
					nav.NavigateTo("/");
			}
		}
	}

	public string FromClassIDToUI(int classID)
	{
		if (Meta.SelectedGame == AvailableGames.DI)
		{
			return DinoIsland.Extensions.ToUIString((DinoIsland.DinoClasses)classID);
		}
		else if (Meta.SelectedGame == AvailableGames.DW)
		{
			return DWExtesions.ToUI((DWClasses)classID);
		}
		else if(Meta.SelectedGame == AvailableGames.US)
		{
			return ((AvailableArchetypes)classID).ToUI();
		}
		else if (Meta.SelectedGame == AvailableGames.SV)
		{
			return ((ScumAndVillainy.SVClasses)classID).ToUI();
		}
		else
			return "Wrong SelectedGame at FromClassIDToUI";
	}


	private void GoBack()
	{
		nav.NavigateTo($"SeasonSelection/{Meta.SelectedGame}");
	}

	private async Task Delete()
	{
		await Meta.DeleteSelectedSeason();
		nav.NavigateTo("SeasonSelection/"+Meta.SelectedGame);
	}

	private async Task DeleteSelectedCharacter() => await Meta.DeleteSelectedCharacter();

	public Type AvailableProfessionsForSelectedGame
	{
		get
		{
			if (Meta.SelectedGame == AvailableGames.DW) return typeof(DWClasses);
			else if (Meta.SelectedGame == AvailableGames.DI) return typeof(DinoIsland.DinoClasses);
			//else if (Meta.SelectedGame == AvailableGames.US) return typeof(AvailableProfesionsforUS);
			else return null;
		}
	}

	private async Task SelectPlayer(ICharacter p)
	{
		IsShowingNewCharacterTools = false;
		IsShowingTools = false;
		Meta.SelectedPlayer = p;
	}

	private async Task UpdateSeasonName()
	{
		await Meta.SeasonsDB.UpdateSeason(Meta.SelectedSeason);
	}

	private async Task CreateNewDinoCharacter(DinoClasses c)
	{
		DinoCharacter newCharacter = new DinoCharacter(DinoGame);
		newCharacter.ID = Guid.NewGuid();
		newCharacter.Name = NewCharacterName;
		newCharacter.Class = c;
		newCharacter.Init();
		if(Meta.SelectedGame is not null && Meta.SelectedSeason is not null)
			await Meta.InsertNewCharacter(
				(byte)Meta.SelectedGame, 
				Meta.SelectedSeason.CampaignGuid, 
				System.Text.Json.JsonSerializer.Serialize(newCharacter), 
				newCharacter.Name, 
				(byte)newCharacter.Class,
				newCharacter.ID);

		NewCharacterName = "Nombre";
		IsLoadingFromDB = true;
		await Meta.LoadPlayerNamesForSeason(Meta.SelectedSeason);
		IsLoadingFromDB = false;
	}

	private async Task CreateNewDWCharacter(DWClasses c)
	{
		DWCharacter newCharacter = new DWCharacter();
		newCharacter.ID = Guid.NewGuid();
		newCharacter.Name = NewCharacterName;
		newCharacter.Profession = c;

		if (Meta.SelectedGame is not null && Meta.SelectedSeason is not null)
			await Meta.InsertNewCharacter(
				(byte)Meta.SelectedGame,
				Meta.SelectedSeason.CampaignGuid,
				System.Text.Json.JsonSerializer.Serialize(newCharacter),
				newCharacter.Name,
				(byte)newCharacter.Profession,
				newCharacter.ID);

		NewCharacterName = "Nombre";
		IsLoadingFromDB = true;
		await Meta.LoadPlayerNamesForSeason(Meta.SelectedSeason);
		IsLoadingFromDB = false;
	}
	private async Task CreateNewUSCharacter(UrbanShadows.AvailableArchetypes c)
	{
		USCharacterSheet newCharacter = new USCharacterSheet(Moves);
		newCharacter.ID = Guid.NewGuid();
		newCharacter.Name = NewCharacterName;
		newCharacter.Archetype = c;


		if (Meta.SelectedGame is not null && Meta.SelectedSeason is not null)
			await Meta.InsertNewCharacter(
				(byte)Meta.SelectedGame,
				Meta.SelectedSeason.CampaignGuid,
				System.Text.Json.JsonSerializer.Serialize(newCharacter),
				newCharacter.Name,
				(byte)newCharacter.Archetype,
				newCharacter.ID);

		NewCharacterName = "Nombre";
		IsLoadingFromDB = true;
		await Meta.LoadPlayerNamesForSeason(Meta.SelectedSeason);
		IsLoadingFromDB = false;
	}

	private async Task CreateNewSVCharacter(ScumAndVillainy.SVClasses c)
	{
		SVCharacter newCharacter = new SVCharacter();
		newCharacter.ID = Guid.NewGuid();
		newCharacter.Name = NewCharacterName;
		newCharacter.Profession = c;

		if (Meta.SelectedGame is not null && Meta.SelectedSeason is not null)
			await Meta.InsertNewCharacter(
				(byte)Meta.SelectedGame,
				Meta.SelectedSeason.CampaignGuid,
				System.Text.Json.JsonSerializer.Serialize(newCharacter),
				newCharacter.Name,
				(byte)newCharacter.Profession,
				newCharacter.ID);

		NewCharacterName = "Nombre";
		IsLoadingFromDB = true;
		await Meta.LoadPlayerNamesForSeason(Meta.SelectedSeason);
		IsLoadingFromDB = false;
	}

	private async Task Reload()
	{
		IsLoadingFromDB = true;
		await Meta.LoadPlayerNamesForSeason(Meta.SelectedSeason);
		IsLoadingFromDB = false;
	}

	private async Task Start()
	{
		if(Meta.SelectedPlayer is not null)
		{
			nav.NavigateTo($"/Running/{Meta.SelectedGame}/{Meta.SelectedPlayer.ID}");
		}
		else
		{
			Toaster.ShowError("Character not selected");
		}
	}
}
