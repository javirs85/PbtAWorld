<div class="d-flex flex-column" style="border: 2px solid #17376742; border-radius:5px; background: #05142bbd;" @onclick:stopPropagation=true>
	<div class="d-flex justify-content-between" style="background: #17376742;">
		<strong class="p-2">@Tittle</strong>
		<div class="d-flex gap-0">
			<div class="btn btn-primary d-flex align-items-center" @onclick=Roll style="background: #143d7c;border-color: #14233c;">
				<i class="bi bi-dice-5"></i>
			</div>
			<div class="btn btn-primary d-flex align-items-center" @onclick=@(()=>{ShowingEverything = !ShowingEverything;}) style="background: #143d7c;border-color: #14233c;">
				@if(ShowingEverything)
				{
					<i class="bi bi-chevron-up"></i>
				}
				else
				{
					<i class="bi bi-chevron-down"></i>
				}
			</div>
		</div>
	</div>
	<div class="d-flex flex-column">
		@if (ShowingEverything)
		{
			@foreach (var o in Options)
			{
				<div class="p-1" style="@(o == Value ? "border:solid 1px red; opacity:1;":"opacity:0.7;"); cursor:pointer;" @onclick="@(()=>{Select(o);})">
					@o
				</div>
			}
		}
		else
		{
			<div class="p-1">
				@Value
			</div>
		}
	</div>
</div>

@code {
	[Parameter] public List<string> Options { get; set; } = new();
	[Parameter] public string Tittle { get; set; } = "Title";
	[Parameter] public EventCallback<Tuple<DinoPlayer,string>> NewSelection { get; set; }
	[Parameter] public DinoPlayer Player { get; set; }
	[Parameter] public string Value { get; set; } = string.Empty;
	[Parameter] public EventCallback<string> ValueChanged { get; set; }

	bool ShowingEverything = true;

	Random rnd = new();

	protected override void OnInitialized()
	{
		if (Options.Contains(Value))
			ShowingEverything = false;
		else
			ShowingEverything = true;

		ShowingEverything = false;
	}

	private void Roll()
	{
		var idx = rnd.Next(0, Options.Count);
		Select(Options[idx]);
	}

	private void Select(string o) 
	{
		Value = o;
		ValueChanged.InvokeAsync(Value);
		StateHasChanged();
		ShowingEverything = false;
		NewSelection.InvokeAsync(new Tuple<DinoPlayer, string>(Player, Value));
	}
}
