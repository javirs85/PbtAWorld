@using System.Web;
@inject IToastService Toaster
@inject DinoGameController Game
@inject DinoPlayer Player
@inject DinoMovesService Moves

<div class="accordion-item"> 
	<h2 class="accordion-header" id="@Move.IDText">
		<button class="accordion-button @(StartsOpen?"" : "collapsed") @(!IsSelectable || (IsSelectable && IsSelected)?"moveCore":"MoveNotAvailable")" type="button"
				data-bs-toggle="collapse"
				data-bs-target="#Body_@Move.IDText"
				aria-expanded="@(StartsOpen?"true" : "false")" aria-controls="Body_@Move.IDText"
				style="box-shadow:none!important;">
			<div class="d-flex gap-1 align-items-center Julius">
				
				@if (IsSelectable)
				{
					@if(IsSelected)
					{
						<div><i class="bi bi-check2-square" style="font-size:21px;"></i></div>
					}else
					{
						<div><i class="bi bi-square"></i></div>
					}
				}
				@Move.Tittle
					
				@if (Dmove.Roll == DinoStates.D_Fit)
				{
					<div class="border-red IconHeaderContainer">
						<div class="Icon Red Fi"></div>
						<div class="StatNumber">@Player.Fit.ToNiceUIStat()</div>
					</div>
				}
				else if (Dmove.Roll == DinoStates.D_Clever)
				{
					<div class="border-blue IconHeaderContainer">
						<div class="Icon Blue Int"></div>
						<div class="StatNumber">@Player.Clever.ToNiceUIStat()</div>
					</div>
				}
				else if (Dmove.Roll == DinoStates.D_Steady)
				{
					<div class="IconHeaderContainer border-green">
						<div class="Icon Green Calm"></div>
						<div class="StatNumber">@Player.Steady.ToNiceUIStat()</div>
					</div>
				}
				else if (Dmove.Roll == DinoStates.D_MC)
				{
					<div class="IconHeaderContainer border-black gap-2">
						<div class="d-flex align-items-center">
							<div class="Icon Red Fi"></div>
							<div class="StatNumber Red">@Player.Fit.ToNiceUIStat()</div>
						</div>
						<div class="d-flex align-items-center">
							<div class="Icon Blue Int"></div>
							<div class="StatNumber Blue">@Player.Clever.ToNiceUIStat()</div>
						</div>
						<div class="d-flex align-items-center">
							<div class="Icon Green Calm"></div>
							<div class="StatNumber Green">@Player.Steady.ToNiceUIStat()</div>
						</div>
					</div>
				}
				else if (Dmove.Roll == DinoStates.D_Weapon)
				{
					<div class="IconHeaderContainer border-black gap-2">
						<div class="Icon StatNumber Black Plus0"></div>
						<div class="Icon StatNumber Black Plus1"></div>
					</div>
				}

				@if (ItsMeLastRoller)
				{
					@if(LastRoll.Total <= 6)
					{
						<div class="mx-2 px-3 py-1 fs-6 fw-bolder" style="color: red; background: #FF000055; border-radius:5px;">@LastRoll.Total</div>
					}
					else if (LastRoll.Total >= 10)
					{
						<div class="mx-2 px-3 py-1 fs-6 fw-bolder" style="color: green; background: #00FF0055; border-radius:5px;">@LastRoll.Total</div>
					}
					else
					{
						<div class="mx-2 px-3 py-1 fs-6 fw-bolder" style="color: orange; background: #ffa50029; border-radius:5px;">@LastRoll.Total</div>
					}
				}

			</div>
		</button>
	</h2>
	<div id="Body_@Move.IDText" 
		class="accordion-collapse collapse @(StartsOpen?"show" : "")"
			aria-labelledby="@Move.IDText">
		<div class="accordion-body d-flex flex-column gap-3 @(!IsSelectable || (IsSelectable && IsSelected)?"":"separator")">

			@if(Move.PreCondition is not null)
			{
					<div class="flex-grow-1">
						<DecodedString Value="@Move.PreCondition.MainText" />
						@if(Move.PreCondition.Options is not null)
						{
							<ul style="margin:0;">
							@foreach(var op in Move.PreCondition.Options)
							{
								<li>@op</li>
							}
							</ul>
						}
					</div>
					
			}
			@if (Move.ConsequencesOn10 is not null && !string.IsNullOrEmpty(Move.ConsequencesOn10.MainText))
			{
				<div style="@(ItsMeLastRoller && LastRoll.Total >= 10 ?"border:1px solid green; border-radius:4px; padding:5px;":"")">
					<div class="d-flex gap-2">
						<strong class="DiceRange">>10: </strong>
						<DecodedString Value="@Move.ConsequencesOn10.MainText" />
					</div>
				
					@if (Move.ConsequencesOn10.Options is not null)
					{
						<ul style="margin:0; margin-left:10px;">
							@foreach (var op in Move.ConsequencesOn10.Options)
							{
								<li>@op</li>
							}
						</ul>
					}
				</div>
			}
			@if (Move.ConsequencesOn79 is not null && !string.IsNullOrEmpty(Move.ConsequencesOn79.MainText))
			{
				<div style="@(ItsMeLastRoller && LastRoll.Total < 10 && LastRoll.Total > 6 ?"border:1px solid orange; border-radius:4px; padding:5px;":"")">
					<div>
						<div class="d-flex gap-2">
							<strong class="DiceRange">7-9: </strong>
							<DecodedString Value="@Move.ConsequencesOn79.MainText" />
						</div>
						@if (Move.ConsequencesOn79.Options is not null)
						{
							<ul style="margin:0; margin-left:20px;">
								@foreach (var op in Move.ConsequencesOn79.Options)
								{
									<li>@op</li>
								}
							</ul>
						}
					</div>
				</div>
			}
			@if (Move.ConsequencesOn6 is not null && !string.IsNullOrEmpty(Move.ConsequencesOn6.MainText))
			{
				<div style="@(ItsMeLastRoller && LastRoll.Total <= 6 ?"border:1px solid red; border-radius:4px; padding:5px;":"")">
					<div>
						<div class="d-flex gap-2">
							<strong class="DiceRange">&lt; 6: </strong>
							<DecodedString Value="@Move.ConsequencesOn6.MainText" />
						</div>
						@if (Move.ConsequencesOn6.Options is not null)
						{
							<ul style="margin:0;">
								@foreach (var op in Move.ConsequencesOn6.Options)
								{
									<li>@op</li>
								}
							</ul>
						}
					</div>
				</div>
			}
			@if(!string.IsNullOrEmpty(Move.ClosingText))
			{
				<small>@Move.ClosingText</small>
			}

			@if (IsSelectable && !IsSelected)
			{
				<button class="btn btn-primary" 
					@onclick=@(() => {Player.PurchaseMove(Move); Game.ShowToastOnAllClients($"{Player.Name} aprendió {Move.Tittle}");})>
					Comprar <br />Movimiento
				</button>
			}
			else if(Move.Roll == DinoStates.D_Fit)
			{
				<button class="btn btn-danger" @onclick="@(async()=>{ Game.Roll(Player.ID,Move.Roll, Move);})">Tirar <br />Forma física</button>
			}
			else if (Move.Roll == DinoStates.D_Clever)
			{
				<button class="btn btn-primary" @onclick="@(async()=>{ Game.Roll(Player.ID,Move.Roll, Move);})">Tirar <br />Inteligencia</button>
			}
			else if (Move.Roll == DinoStates.D_Steady)
			{
				<button class="btn btn-success" @onclick="@(async()=>{ Game.Roll(Player.ID,Move.Roll, Move);})">Tirar <br />Calma</button>
			}
			else if(Move.Roll == DinoStates.D_MC)
			{
				<div class="container">
					<div class="row g-1">
						<div class="col-sm">
							<button class="btn btn-danger" style="width:100%;" @onclick="@(async()=>{ Game.Roll(Player.ID,DinoStates.D_Fit, Move);})">Tirar <br />Forma física</button>
						</div>
						<div class="col-sm">
							<button class="btn btn-primary" style="width:100%;" @onclick="@(async()=>{ Game.Roll(Player.ID,DinoStates.D_Clever, Move);})">Tirar <br />Inteligencia</button>
						</div>
						<div class="col-sm">
							<button class="btn btn-success" style="width:100%;" @onclick="@(async()=>{ Game.Roll(Player.ID,DinoStates.D_Steady, Move);})">Tirar <br />Calma</button>
						</div>
					</div>
				</div>
			}
			else if(Move.Roll == DinoStates.D_Weapon)
			{
				<div class="container">
					<div class="row g-1">
						<div class="col-sm">
							<button class="btn btn-dark" style="width:100%;" @onclick="@(async()=>{ Game.Roll(Player.ID,DinoStates.D_0, Move);})">Tirar <br />+0</button>
						</div>
						<div class="col-sm">
							<button class="btn btn-dark" style="width:100%;" @onclick="@(()=>{ Game.Roll(Player.ID,DinoStates.D_1, Move);})">Tirar <br />+1</button>
						</div>
					</div>
				</div>
			}
			else if(Move.Roll == DinoStates.D_0)
			{
				<button class="btn btn-success" @onclick="@(async()=>{ Game.Roll(Player.ID,DinoStates.D_0, Move);})">Tirar <br />2d6+0</button>
				<button class="btn btn-success" @onclick="@(async()=>{ Game.Roll(Player.ID,DinoStates.D_1, Move);})">Tirar <br />2d6+1</button>
				<button class="btn btn-success" @onclick="@(async()=>{ Game.Roll(Player.ID,DinoStates.D_2, Move);})">Tirar <br />2d6+2</button>
				<button class="btn btn-success" @onclick="@(async()=>{ Game.Roll(Player.ID,DinoStates.D_3, Move);})">Tirar <br />2d6+3</button>
			}

		</div>
	</div>
</div>

@code {
	[Parameter] public string? PackID { get; set; } = null;
	[Parameter] public DinoMove Move { get; set; } = new DinoMove(DinoMoveIDs.notSet, DinoStates.D_NotSet) { Tittle = "Move not set" };
	[Parameter] public bool StartsOpen { get; set; } = false;
	[Parameter] public bool AllowMultipleSelection { get; set; } = false;
	[Parameter] public RollReport<DinoMoveIDs, DinoStates>? LastRoll { get; set; }

	bool SelectedByDefault => Move.ForClass != DinoClasses.NotSet && Move.IsAdvancedMove == false;
	bool IsSelectable => Move.ForClass != DinoClasses.NotSet;
	bool IsSelected => Player.AllPurchasedMoves.Contains(Move.ID);

	private DinoMove Dmove => (Move as DinoMove) ?? new DinoMove(DinoMoveIDs.notSet, DinoStates.D_NotSet) { Tittle = "Move not set"};


	protected override void OnParametersSet()
	{
		base.OnParametersSet();
	}

	private bool ItsMeLastRoller => LastRoll is not null && LastRoll.Roller == Player.Name && LastRoll.MoveId == Move.ID;

}
