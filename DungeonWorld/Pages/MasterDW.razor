@using Microsoft.AspNetCore.Components.Forms
@using static PbtaWorldRazonCommonComponents.CharacterSelector
@using static PbtaWorldRazonCommonComponents.LastRollOverlay;
@inject DWGameController Game
@inject IToastService Toaster
@inject DWMovesService Moves
@inject LastRollViewerService LastRollViewer
@inject VTTService VTT
@inject VTTLocalManagerService VTTViewer
@inject IDataBaseController Meta;
@inject CharacterSelectorService CharacterSelector

@if(_ShowingClocks)
{
	<ClocksViewer Clocks="Game.Clocks" IsMaster=true RequestCloseClocksViewer="@(()=>{_ShowingClocks = false;})"/>
}
else if(_ShowingCast)
{
	<PeopleViewr GameID="@Meta.SelectedSeason.CampaignGuid" People="@Game.People" IsMaster=true ExitRequested=@(()=>{_ShowingCast = false;})/>
 	@* <CharacterSelector CloseRequest="@(()=>{_ShowingCast = false;})"/> *@
}
@if (_ShowingVTT)
{
	<SmoothWhiteBoard Game="Game" MyClass="DWClasses.DW_Master" ExitRequested=@(()=>{_ShowingVTT = false;})/>
}
else if (_showingSquareMap)
{
	<SquareMapViewer Map="Game.SquareMap" IsMaster="true" RequestCloseSquareMapViewer="@(()=>{_showingSquareMap=false;})"/>
}
else if(_ShowingImagesManager)
{
	<ImagesManager GameId="@Game.SessionID" IsMaster=true CloseRequest="@(()=>{_ShowingImagesManager = false;})"/>
}
else if (_ShowingEnemySelectionTool)
{
	<MonsterSelector Game="Game" CloseClicked="@(()=>{_ShowingEnemySelectionTool = false;})"/>
}
else
{
	<div class="MasterMain" style="background: #272626;">
		<div class="MasterMainColumn" style="background: #d2d9d3;">
			<div class="d-flex gap-1">
				<button class="btn btn-primary" @onclick=@(()=>{_showingSquareMap = false; _ShowingVTT =true;})>VTT</button>
				<button class="btn btn-primary" @onclick=@(()=>{_ShowingVTT = false; _showingSquareMap =true;})><i class="bi bi-map"></i></button>
				<button class="btn btn-primary" @onclick=@(()=>{ _ShowingImagesManager =true;})><i class="bi bi-image"></i></button>
				<button class="btn btn-primary" @onclick=@(()=>{LastRollViewer.Show();})><i class="bi bi-dice-5"></i></button>
				<button class="btn btn-primary" @onclick=@(()=>{_ShowingClocks = true;})><i class="bi bi-hourglass-split"></i></button>
				<button class="btn btn-primary" @onclick=@(()=>{_ShowingCast = true;})><i class="bi bi-person-vcard"></i></button>
				<img src="imgs/DW/d4.svg" alt="d4" style="height: 38px; cursor:pointer;" @onclick=@((e)=>{RequestDamage(e, DiceTypes.d4);})/>
				<img src="imgs/DW/d6.svg" alt="d6" style="height: 38px; cursor:pointer;" @onclick=@((e)=>{RequestDamage(e, DiceTypes.d6);}) />
				<img src="imgs/DW/d8.svg" alt="d8" style="height: 38px; cursor:pointer;" @onclick=@((e)=>{RequestDamage(e, DiceTypes.d8);}) />
				<img src="imgs/DW/d10.svg" alt="d10" style="height: 38px; cursor:pointer;" @onclick=@((e)=>{RequestDamage(e, DiceTypes.d10);}) />
				<img src="imgs/DW/d12.svg" alt="d10" style="height: 38px; cursor:pointer;" @onclick=@((e)=>{RequestDamage(e, DiceTypes.d12);}) />
			</div>
			<div class="PlayersAreaHeader">
				@foreach (var player in Meta.SelectedSeason.Players)
				{
					@if (player is not null && player is not DWCharacter)
					{
						<div class="PlayersAreaHeaderTab Disabled">* @player.Name *</div>
					}
					else
					{
						@if (((DWCharacter)player).Profession != DWClasses.DW_Master)
						{
							<div class="PlayersAreaHeaderTab
								@(SelectedCharacter==((DWCharacter)player)?"Selected":"")"
								 @onclick=@(()=>{SelectCharacter((DWCharacter)player);})>
								<span>@player.Name</span>
								<span>@(((DWCharacter)player).Profession.ToUI())</span>
							</div>
						}
					}
				}
				<div class="PlayersAreaHeaderTab @(SelectingEnemies?"Selected":"")" @onclick=TogglingSelectingEnemiesClicked>
					<i class="bi text-danger bi-gitlab"></i>
				</div>
			</div>
			<div class="d-flex flex-column flex-grow-1" style="overflow: auto; overflow-x: hidden; background: #a2b0a3;">
				@if (SelectedCharacter is not null)
				{
					@if (SelectedCharacter.Background is not null)
					{
						<div>
							<BackgroundViewer AllowEdit=false Background="SelectedCharacter.Background" ShowEditButton=false />
						</div>
					}
					<div class="MovementsGroup">
						<div class="MovementsGroupTittle">Movimientos de @SelectedCharacter.Profession.ToUI()</div>
						@foreach (var m in ClassMovements)
						{
							<MovementViewer Player="SelectedCharacter" Movement="m" />
						}
					</div>
					<div class="MovementsGroup">
						<div class="MovementsGroupTittle d-flex align-items-center">
							Movimientos de @SelectedCharacter.Profession.ToUI() Avanzados
						</div>
						@foreach (var m in AvancedClassMovements)
						{
							<MovementViewer Player="SelectedCharacter" Movement="m" />
						}
					</div>
					<div class="PlayersAreaFiller"></div>
				}
				else
				{
					<div class="d-flex flex-column" style="overflow:auto; ">
						<button class="btn btn-primary m-1" data-bs-toggle="modal" @onclick=@(()=>{_ShowingEnemySelectionTool = true;})>Elegir enemigo</button>
						@foreach (var enemy in Game.MonsterDefinitionsInCurrentScene)
						{
							<EnemyCard monster="enemy" Game="Game" />
						}
					</div>
					<div class="PlayersAreaFiller"></div>
				}
			</div>
		</div>

		<div class="GenericMoves MasterMainColumn" style="background: #a2b0a3;">
			<div class="MovementsGroup">
				<div class="MovementsGroupTittle">Movimientos comunes</div>
				@foreach (var m in BasicMovements)
				{
					<MovementViewer Player="SelectedCharacter" Movement="m" />
				}
				<div class="MovementsGroupTittle">Movimientos avanzados</div>
				@foreach (var m in AdvancedMovements)
				{
					<MovementViewer Player="SelectedCharacter" Movement="m" />
				}
			</div>
		</div>
		<div class="MasterMainColumn">
			@foreach (var pack in Game.TextBook.MasterMovesPacks)
			{
				<MasterMovePackViewer MovesPack="pack" />
			}
		</div>
		<div class="PlayersColumn MasterMainColumn" style="overflow:auto;">
			@foreach (var m in Game.MonsterDefinitionsInCurrentScene)
			{
				<MasterMovePackViewer MovesPack="@(new MasterMovePack {Title=m.Name, Moves=m.Moves})" />
			}
			
		</div>
	</div>



}

@code {
	bool _ShowingVTT = false;
	bool _ShowingClocks = false;
	bool _ShowingCast = false;
	bool _showingSquareMap = false;
	bool _ShowingImagesManager = false;
	bool _ShowingEnemySelectionTool = false;
	bool SelectingEnemies = false;
	Monster? SelectedEnemy = null;
	private DWCharacter? SelectedCharacter = null;

	[Parameter] public DWCharacter MasterPlayer { get; set; } = new();


	List<IMove> ClassMovements = new();
	List<IMove> AvancedClassMovements = new();
	List<IMove> BasicMovements = new();
	List<IMove> AdvancedMovements = new();

	protected override void OnParametersSet()
	{
		VTTViewer.IsMaster = true;
		VTTViewer.CloseRequested += (object? sender, EventArgs e) =>
		{
			_ShowingVTT = false;
			StateHasChanged();
		};

		BasicMovements.Clear();
		foreach (var movID in Moves.BasicMovements)
		{
			var m = Moves.GetMovement(movID);
			BasicMovements.Add(m);
		}
		AdvancedMovements.Clear();
		foreach (var movID in Moves.AdvancedMovements)
		{
			var m = Moves.GetMovement(movID);
			AdvancedMovements.Add(m);
		}

		VTTService.Game = Game;

		Game.UpdateUI -= Update;
		Game.UpdateUI += Update;

		MonsterManual.LoadedFinished -= Update;
		MonsterManual.LoadedFinished += Update;

		CharacterSelector.SetPeople(Game.People);

		Game.AddPlayer(MasterPlayer);
	}


	void Update(object? sender, EventArgs e) => InvokeAsync(() => { StateHasChanged(); });

	void SelectCharacter(DWCharacter c) 
	{
		SelectedCharacter = c;
		SelectingEnemies = false;

		ClassMovements.Clear();
		foreach (var movID in SelectedCharacter.ClassMovments)
		{
			var m = Moves.GetMovement(movID);
			if (m is not null)
				ClassMovements.Add(m);
		}
		AvancedClassMovements.Clear();
		foreach (var movID in SelectedCharacter.ClassAdvancedMovments)
		{
			var m = Moves.GetMovement(movID);
			if (m is not null)
				AvancedClassMovements.Add(m);
		}

	}

	void TogglingSelectingEnemiesClicked()
	{
		if(SelectingEnemies)
		{
			SelectingEnemies = false;
		}
		else
		{
			SelectingEnemies = true;
			SelectedCharacter = null;
		}
	}

	private List<DiceTypes> clicksDices = new();
	private Timer clickTimer;

	void RequestDamage(MouseEventArgs e, DiceTypes dice)
	{
		int numClicks = (int)e.Detail;

		if(numClicks == 1)
		{
			clickTimer = new Timer(MasterDamageClickTimeOut);
			clicksDices = new();
		}

		clicksDices.Add(dice);
		clickTimer.Change(500, Timeout.Infinite);
	}
	private void MasterDamageClickTimeOut(object? state)
	{
		Game.RollRaw(MasterPlayer.ID, clicksDices);
	}
}
