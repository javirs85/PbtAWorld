@using ScumAndVillainy.Controls
@using static ScumAndVillainy.SVTextBook
@inject NavigationManager NavigationManager
@inject SVGameController Game
@inject ImagesService ImagesCenter
@inject IToastService Toaster
@inject SVMovesService Moves
@inject LastRollViewerService LastRollViewer
@inject CharacterSelectorService CharacterSelectorService
@inject VTTService VTT
@inject WhiteBoard.WhiteBoardService WhiteBoardService
@inject VTTLocalManagerService VTTViewer
@inject IDataBaseController Meta;

<HelpPanel @ref="helpPanel" />

@if(Game.Ship.ShipType == ShipTypes.NotSet)
{
	<div style="position:fixed; top:0; left:0; right:0; bottom:0; background:black; z-index: 22; color: white;">
		<div class="d-flex gap-3 h-100">
			<div class="flex-grow-1 border rounded m-2 ShipSelector" @onclick="@(async()=>{await Game.StartShip(ShipTypes.Stardancer);})">
				<h1 class="text-center">Stardancer</h1>
				<img class="w-100" src="imgs/SV/stardancer.png"/>
				<div class="d-flex justify-content-right" style="padding-right:2px;">
					<SkewedList IsInverted="true" Color="SkewedHeader.AvilableColors.Green" ListSize="3" @bind-Value="@Game.Ship.CrewQuality" />
					<SkewedHeader Color="SkewedHeader.AvilableColors.Green" IsForShips=true Text="Crew" />
				</div>
			</div>
			<div class="flex-grow-1 border rounded m-2 ShipSelector" @onclick="@(async()=>{await Game.StartShip(ShipTypes.Firedrake);})">
				<h1 class="text-center">Firedrake</h1>
				<img class="w-100" src="imgs/SV/firedrake.png"/>
			</div>
			<div class="flex-grow-1 border rounded m-2 ShipSelector" @onclick="@(async()=>{await Game.StartShip(ShipTypes.Cerberus);})">
				<h1 class="text-center">Cerberus</h1>
				<img class="w-100" src="imgs/SV/cerberus.png" />
			</div>
		</div>
	</div>
}

@if(_isShowingAbilitySelector)
{
	<div class="FullScreenModal" @onclick=CloseAbilitySelector>
		<div class="ModalBody" style="align-items: stretch;" @onclick:stopPropagation>
			<div class="CloseButton hoverable" style="pointer-events:none;"/>
			<h2>Seleccione habilidades</h2>
			@if(!_isShowingAllAbilities)
			{
				@foreach (var ab in Player.Profession.AvailableAbilities())
				{
					<div class="d-flex gap-3">
						<AbilityCard MoveID="ab" Player="Player" ShowHelp="ShowHelp" Grow="true"/>
						<div>
							@if (Player.SelectedAbilities.Contains(ab))
							{
								<i class="bi bi-x-circle CircularButton" style="color:red;" @onclick=@(()=>{RemoveAbility(ab);})></i>
							}
							else
							{
								<i class="bi bi-plus-circle CircularButton" style="color:green;" @onclick=@(()=>{AddAbility(ab);})></i>
							}
						</div>
					</div>
				}
				<div class="d-flex gap-2 align-items-center">
					<i class="bi bi-plus-circle CircularButton" style="color:green;" @onclick=@(()=>{_isShowingAllAbilities = true;})></i>
					<div>
						<b>Veterano:</b> Añade un máximo de 3 habilidades de otros libretos
					</div>
				</div>
			}
			else
			{
				@foreach (SVClasses cl in Enum.GetValues(typeof(SVClasses)))
				{
					@if(cl != SVClasses.NotSet && cl != SVClasses.All)
					{
						<h3>@cl.ToUI()</h3>
						@foreach (var ab in cl.AvailableAbilities())
						{
							<div class="d-flex gap-3">
								<AbilityCard MoveID="ab" Player="Player" ShowHelp="ShowHelp" Grow=true />
								<div>
									@if (Player.SelectedAbilities.Contains(ab))
									{
										<i class="bi bi-x-circle CircularButton" style="color:red;" @onclick=@(()=>{RemoveAbility(ab);})></i>
									}
									else
									{
										<i class="bi bi-plus-circle CircularButton" style="color:green;" @onclick=@(()=>{AddAbility(ab);})></i>
									}
								</div>
							</div>
						}
					}					
				}
			}
		</div>
	</div>
}
@if (_isShowingShipAbilitySelector)
{
	<div class="FullScreenModal" @onclick=CloseShipAbilitySelector>
		<div class="ModalBody" style="align-items: stretch;" @onclick:stopPropagation>
			<div class="CloseButton hoverable" style="pointer-events:none;" />
			<h2>Seleccione habilidades</h2>
			@if (!_isShowingAllShipAbilities)
			{
				@foreach (var ab in Game.Ship.AvailableSpecialAbilities)
				{
					<div class="d-flex gap-3">
						<AbilityCard MoveID="ab" Player="Player" Ship="Game.Ship" IsShipAbility="true" ShowHelp="ShowHelp" Grow="true" />
						<div>
							@if (Game.Ship.SelectedSpecialAbilities.Contains(ab))
							{
								<i class="bi bi-x-circle CircularButton" style="color:red;" @onclick=@(async()=>{await RemoveShipAbility(ab);})></i>
							}
							else
							{
								<i class="bi bi-plus-circle CircularButton" style="color:green;" @onclick=@(async()=>{await AddShipAbility(ab);})></i>
							}
						</div>
					</div>
				}
				<div class="d-flex gap-2 align-items-center">
					<i class="bi bi-plus-circle CircularButton" style="color:green;" @onclick=@(()=>{_isShowingAllShipAbilities = true;})></i>
					<div>
						<b>Veterano:</b> Añade un máximo de UNA habilidade de otra nave
					</div>
				</div>
			}
			else
			{
				@foreach (ShipTypes ShipType in Enum.GetValues(typeof(ShipTypes)))
				{
					@if (ShipType != ShipTypes.NotSet)
					{
						<h3>@ShipType.ToUI()</h3>
						@foreach (var ab in SVShip.GetAllAvailableSpecialAbiltiesFor(ShipType))
						{
							<div class="d-flex gap-3">
								<AbilityCard MoveID="ab" Player="Player" Ship="Game.Ship" IsShipAbility="true" ShowHelp="ShowHelp" Grow=true />
								<div>
									@if (Game.Ship.SelectedSpecialAbilities.Contains(ab))
									{
										<i class="bi bi-x-circle CircularButton" style="color:red;" @onclick=@(async()=>{await RemoveShipAbility(ab);})></i>
									}
									else
									{
										<i class="bi bi-plus-circle CircularButton" style="color:green;" @onclick=@(async()=>{await AddShipAbility(ab);})></i>
									}
								</div>
							</div>
						}
					}
				}
			}
		</div>
	</div>
}
@if(IsShowingCurrentRoll)
{
	<!-- Corruption Upgrades Modal -->
	<div class="FullScreenModal SharedRollContainer"
		 @onclick=HideSharedRollView>
		<div class="CloseButton"></div>
		<div class="ModalBody" style="max-height:95%; max-width:95%;min-height:95%; min-width:95%;" @onclick:stopPropagation=true>
			
			@if(Game.CurrentRoll is not null)
			{
				<SharedRollPanel Game="Game" Player="Player" ShowHelp="ShowHelp"/>
			}
			
		</div>
	</div>
}

<div class="SVPlayerSheet">
	<div class="d-flex flex-column" style="max-width:292px; min-width:292px; overflow-y:auto; overflow-x:hidden;">
		<div class="d-flex flex-column flex-grow-1 px-2">
			<div style="display:flex; align-items:center; font-size: 20px;">
				<div style="font-size:30px!important; font-weight:bold">
					<HiddeableInput @bind-Value="Player.Name" />
				</div>
				<div class="ms-2">"</div>
				<HiddeableInput @bind-Value="Player.Alias" />
				<div class="me-2">"</div>
				<div>El @Player.Profession.ToUI()</div>
			</div>
			<div class="d-flex justify-content-between">
				<div class="d-flex gap-1">
					<HideableComboBox TEnum="Backgrounds" @bind-CurrentValue=Player.Background />
					<HelperStarter HelperInvoked="ShowHelp"
								   Title=@(@"Trasfondo: " +Player.Background.ToUI())
								   HelpText="@Player.Background.GetDescription()" ForcedOpacity="75" />
				</div>
				<div class="d-flex gap-1">
					<HideableComboBox TEnum="Heritages" @bind-CurrentValue=Player.Heritage />
					<HelperStarter HelperInvoked="ShowHelp"
								   Title=@(@"Herencia: " +Player.Heritage.ToUI())
								   HelpText="@Player.Heritage.GetDescription()" ForcedOpacity="75" />
				</div>				
				<div class="d-flex gap-1">
					<HideableComboBox TEnum="Vices" @bind-CurrentValue=Player.Vice />
					<HelperStarter HelperInvoked="ShowHelp"
								   Title=@(@"Vicio: " +Player.Vice.ToUI())
								   HelpText="@Player.Vice.GetDescription()" ForcedOpacity="75" />
				</div>
			</div>
		</div>

		<div class="d-flex flex-column Stats flex-grow-1">
			<StatBlock StoreChangesNeeded="@EventCallback.Factory.Create(this, async () =>
						await Game.StoreChangesOnCharacter(Player, "Cambios guardados"))"
						Player="Player"
						StatClicked="StartSharedRoll"
						MainStat="SVStats.Insight"
						@bind-RelatedXP="Player.InsightXP"
						Sub1Stat="SVStats.Doctor"
						Sub2Stat="SVStats.Hack"
						Sub3Stat="SVStats.Rig"
						Sub4Stat="SVStats.Study"
						@bind-Sub1="Player.Doctor"
						@bind-Sub2="Player.Hack"
						@bind-Sub3="Player.Rig"
						@bind-Sub4="Player.Study" />
			<StatBlock StoreChangesNeeded="@EventCallback.Factory.Create(this, async () =>
						await Game.StoreChangesOnCharacter(Player, "Cambios guardados"))"
						Player="Player"
						StatClicked="StartSharedRoll"
						MainStat="SVStats.Prowess"
						@bind-RelatedXP="Player.ProwessXP"
						Sub1Stat="SVStats.Helm"
						Sub2Stat="SVStats.Scramble"
						Sub3Stat="SVStats.Scrap"
						Sub4Stat="SVStats.Skulk"
						@bind-Sub1="Player.Helm"
						@bind-Sub2="Player.Scramble"
						@bind-Sub3="Player.Scrap"
						@bind-Sub4="Player.Skulk" />
			<StatBlock StoreChangesNeeded="@EventCallback.Factory.Create(this, async () =>
						await Game.StoreChangesOnCharacter(Player, "Cambios guardados"))"
					   Player="Player"
					   StatClicked="StartSharedRoll"
						MainStat="SVStats.Resolve"
					   @bind-RelatedXP="Player.ResolveXP"
					   Sub1Stat="SVStats.Attune"
					   Sub2Stat="SVStats.Command"
					   Sub3Stat="SVStats.Consort"
					   Sub4Stat="SVStats.Sway"
					   @bind-Sub1="Player.Attune"
					   @bind-Sub2="Player.Command"
					   @bind-Sub3="Player.Consort"
					   @bind-Sub4="Player.Sway" />
			<div class="d-flex">
				<SkewedHeader Text="XP" ForzedWidth="115" />
				<SkewedList ListSize="8" @bind-Value="Player.PlaybookXP" />
			</div>
			
		</div>

		<div class="d-flex flex-column StressAndTraumas flex-grow-1">
			<div class="d-flex mt-2">
				<SkewedHeader Text="Estres" Color=SkewedHeader.AvilableColors.Red ForzedWidth="97" />
				<SkewedList ListSize="9" Color=SkewedHeader.AvilableColors.Red @bind-Value="Player.Stress" />
			</div>
			<div class="d-flex mt-1 gap-1" style="margin-left:-2px; width: 279px;">
				<div class="TraumaBox @(Player.Traumas.Count > 0 && Player.Traumas[0] != Traumas.NoTrauma?"ActiveTrauma":"UnactiveTrauma")">
					<HideableComboBox TEnum="Traumas" @bind-CurrentValue=Player.Traumas[0] />
					@if (Player.Traumas[0] != Traumas.NoTrauma)
					{
						<HelperStarter HelperInvoked="ShowHelp" 
							Title=@(@"Trauma: " +Player.Traumas[0].ToUI())
							HelpText="@Player.Traumas[0].ToDescription()" />
					}
				</div>
				<div class="TraumaBox @(Player.Traumas.Count>1&&Player.Traumas[1]!=Traumas.NoTrauma?"ActiveTrauma":"UnactiveTrauma")">
					@Player.Traumas[1].ToUI()
					@if (Player.Traumas[1] != Traumas.NoTrauma)
					{
						<HelperStarter HelperInvoked="ShowHelp"
									   Title=@(@"Trauma: " +Player.Traumas[1].ToUI())
									   HelpText="@Player.Traumas[1].ToDescription()" />
					}
				</div>
				<div class="TraumaBox @(Player.Traumas.Count>2&&Player.Traumas[2]!=Traumas.NoTrauma?"ActiveTrauma":"UnactiveTrauma")">
					@Player.Traumas[2].ToUI()
					@if (Player.Traumas[2] != Traumas.NoTrauma)
					{
						<HelperStarter HelperInvoked="ShowHelp"
									   Title=@(@"Trauma: " +Player.Traumas[2].ToUI())
									   HelpText="@Player.Traumas[2].ToDescription()" />
					}
				</div>
				<div class="TraumaBox @(Player.Traumas.Count>3&&Player.Traumas[3]!=Traumas.NoTrauma?"ActiveTrauma":"UnactiveTrauma")">
					@Player.Traumas[3].ToUI()
					@if (Player.Traumas[3] != Traumas.NoTrauma)
					{
						<HelperStarter HelperInvoked="ShowHelp"
									   Title=@(@"Trauma: " +Player.Traumas[3].ToUI())
									   HelpText="@Player.Traumas[3].ToDescription()" />
					}
				</div>
			</div>
		</div>
	</div>
	<div class="d-flex flex-column h-100 pt-2" style="max-width:650px; min-width:292px; overflow-y:auto; overflow-x:hidden;">
		<div class="flex-grow-1 overflow-auto">
			<div class="abilitiesContainer" style="margin:0;">
				<div class="d-flex">
					<div class="fs-4 flex-fill d-flex align-items-end ps-2">Habilidades especiales</div>
					<div class="d-flex gap-2 align-items-center pe-2" style="color: #665efb;">
						<i class="bi bi-plus-square fs-3 hoverable d-flex" @onclick=OpenAbilitySelector></i>
						<i class="bi bi-arrows-expand fs-3 hoverable d-flex" @onclick=@(()=>{StartAbilitiesMaximized = !StartAbilitiesMaximized;})></i>
					</div>
				</div>

				@foreach (var ab in Player.SelectedAbilities)
				{
					<AbilityCard MoveID="ab" Player="Player" ShowHelp="ShowHelp" IsExpanded=StartAbilitiesMaximized />
				}

			</div>
			<div class="abilitiesContainer" style="background: #0f5b230f; border: 1px solid #0f5b23a1;">
				<div class="d-flex">
					<div class="fs-4 flex-fill d-flex align-items-end ps-2">Habilidades de la nave</div>
					<div class="d-flex gap-2 align-items-center pe-2" style="color: #299129;">
						<i class="bi bi-plus-square fs-3 hoverable d-flex" @onclick=OpenShipAbilitySelector></i>
						<i class="bi bi-arrows-expand fs-3 hoverable d-flex" @onclick=@(()=>{StartShipAbilitiesMaximized = !StartShipAbilitiesMaximized;})></i>
					</div>
				</div>

				@foreach (var ab in Game.Ship.SelectedSpecialAbilities)
				{
					<AbilityCard MoveID="ab" Player="Player" Ship="Game.Ship" IsShipAbility="true" ShowHelp="ShowHelp" IsExpanded=StartShipAbilitiesMaximized />
				}

			</div>
		</div>	

		<div class="HarmBox">
			<div class="d-flex" style="border:1px solid #665efb9e; height:48px;">
				<div class="TableHeader ps-2">1</div>
				<div class="d-flex flex-grow-1">
					<div class="TableCell opacity-75" style=" border-right:1px solid #665efb9e;"><HiddeableInput @bind-Value=Player.Harm1A /></div>
					<div class="TableCell opacity-75"><HiddeableInput @bind-Value=Player.Harm1B /></div>
				</div>
				<div class="d-flex text-center" style="width: 46px;">poco<br />efecto</div>
			</div>
			<div class="d-flex" style="border:1px solid #665efb45; border-top:none; height:48px;">
				<div class="TableHeader ps-2 opacity-50"> 2</div>
				<div class="d-flex flex-grow-1">
					<div class="TableCell opacity-75" style="border-right:1px solid #665efb45;"><HiddeableInput @bind-Value=Player.Harm2A /></div>
					<div class="TableCell opacity-75"><HiddeableInput @bind-Value=Player.Harm2B /></div>
				</div>
				<div class="d-flex justify-content-center" style="width: 46px; align-items: center;">-1d</div>
			</div>
			
			<div class="d-flex" style="border:1px solid #1712799e; height:48px;">
				<div class="TableHeader ps-2 opacity-25">3</div>
				<div class="TableCell opacity-75"><HiddeableInput @bind-Value=Player.Harm3 /></div>
				<div class="d-flex justify-content-center" style="width: 46px; align-items: center;"><HelperStarter HelperInvoked="ShowHelp" HelpText="Necesitas ayuda para todo" Title="Daño nivel 3" ForcedOpacity="75" /></div>
			</div>
		</div>
		<div class="d-flex pt-2 mb-2 gap-2 justify-content-between" style="/* 	background:#093d04;
																		border-left: 1px solid #238519;
																		border-right: 1px solid #238519; */">
			<div class="d-flex flex-column gap-2">
				<div class="RecoveryBox d-flex flex-column align-items-center">
					<span>Curación</span>
					<CircularClock clock="Player.Recovery" Width="55" Color="#207817" BackColor="#052102" HideTitle=true />
				</div>
			</div>
			<div class="ArmorBox flex-column d-flex ">
				<div class="d-flex flex-grow-1 justify-content-between gap-2 align-items-center">
					Armadura
					@if (Player.UsedArmorNormal)
					{
						<i class="bi bi-shield-slash-fill fs-5" style="line-height: 14px; color:red; cursor:pointer;" @onclick=@(()=>{Player.UsedArmorNormal = false;})></i>
					}
					else
					{
						<i class="bi bi-shield fs-5	" style="line-height: 14px; cursor:pointer;" @onclick=@(()=>{Player.UsedArmorNormal = true;})></i>
					}
				</div>
				<div class="d-flex flex-grow-1 justify-content-between align-items-center">
					Pesada
					@if (Player.UsedArmorHeavy)
					{
						<i class="bi bi-shield-slash-fill fs-5" style="line-height: 14px; color:red; cursor:pointer;" @onclick=@(()=>{Player.UsedArmorHeavy = false;})></i>
					}
					else
					{
						<i class="bi bi-shield fs-5" style="line-height: 14px; cursor:pointer;" @onclick=@(()=>{Player.UsedArmorHeavy = true;})></i>
					}
				</div>
				<div class="d-flex flex-grow-1 justify-content-between align-items-center">
					Especial
					@if (Player.UsedArmorSpecial)
					{
						<i class="bi bi-shield-slash-fill fs-5" style="line-height: 14px; color:red; cursor:pointer;" @onclick=@(()=>{Player.UsedArmorSpecial = false;})></i>
					}
					else
					{
						<i class="bi bi-shield fs-5" style="line-height: 14px; cursor:pointer;" @onclick=@(()=>{Player.UsedArmorSpecial = true;})></i>
					}
				</div>
			</div>
			<div class="d-flex gap-0" style="   background: rgb(69 39 3);
												border: 1px solid #af7201;">
				<div class="CredBox flex-fill">
					<span class="d-flex justify-content-center">CRED</span>
					<div class="d-flex mt-1">
						<SVClockViewer clock="Player.CRED" HideTitle=true />
					</div>
				</div>
				<div style="border-left:1px solid #ffa5008a; padding-left:5px;">
					<StashViewer Player="Player" UpdateUI="UpdateUI" />
				</div>
			</div>

		</div>
	</div>
	<div class="d-flex flex-column align-items-start gap-2 p-2" style="max-width:292px; min-width:292px; overflow-y:auto; overflow-x:hidden;">
		<div class="d-flex flex-column gap-3 mb-2">
			<div class="d-flex justify-content-right">
				<SkewedHeader Color="SkewedHeader.AvilableColors.Green" IsForShips=false Text="Crew" />
				<SkewedList IsInverted="false" Color="SkewedHeader.AvilableColors.Green" ListSize="3" @bind-Value="@Game.Ship.CrewQuality" StoreChangesNeeded="@(async()=>{await Game.StoreShip("Tripulación actualizada");})" />
			</div>		
			<div class="d-flex justify-content-right">
				<SkewedHeader Color="SkewedHeader.AvilableColors.Green" Text="@($"Mantenimiento")" HelpText=@($"El mantenimiento de tu nave requiere (Crew + Sistemas)/4 ({Game.Ship.UpkeepCost}) creditos tras cada misión. \nSi no lo pagas, marca un punto en mantenimiento y tiras 1 dado por cada vez consecutiva que no lo hayas pagado. \n\n6+: Un sistema está gravemente dañado. Puedes repararlo con una actividad de tiempo de inactividad la próxima vez que estés en el puerto.\n4/5: Un sistema funciona mal pero es menor. Puede preparar una solución en el campo.\n1-3: No te preocupes. El desgaste es menor y no afectará el rendimiento en el siguiente trabajo.\n\nBorra todas las marcas cuando hagas tu mantenimiento como es debido.") ShowHelpRequested="ShowHelp"/>
				<SkewedList IsInverted="false" Color="SkewedHeader.AvilableColors.Green" ListSize="4" @bind-Value="@Game.Ship.SkippedUpkeeps" StoreChangesNeeded="@(async()=>{await Game.StoreShip("Mantenimiento actualizada");})" />
			</div>
			<div class="d-flex justify-content-right">
				<SkewedHeader Color="SkewedHeader.AvilableColors.Green" IsForShips=false Text="Gámbitos" ForzedWidth="130" HelpText="@((Game.TextBook as SVTextBook).GambitExplanation)" ShowHelpRequested="ShowHelp" />
				<SkewedList IsInverted="false" Color="SkewedHeader.AvilableColors.Green" IsDouble="true" ListSize="8" @bind-Value="@Game.Ship.Gambits" StoreChangesNeeded="@(async()=>{await Game.StoreShip("Gámbitos actualizada");})" />
			</div>
		
			@if(Game.Ship.Upgrades.Find(x=>x.UpgradeID == ShipUpgradeIDs.Shields && x.NumTicks >= 2) is not null)
			{
				<div class="d-flex justify-content-right">
					<SkewedHeader Color="SkewedHeader.AvilableColors.Red" IsForShips=false Text="Escudo" />
					<SkewedList IsInverted="false" Color="SkewedHeader.AvilableColors.Red" ListSize="1" @bind-Value="@Game.Ship.UsedShields" StoreChangesNeeded="@(async()=>{await Game.StoreShip("Escudos actualizada");})" />
				</div>
			}
		</div>
		<ShipSystemViewer Player="Player" Ship="Game.Ship" Game="Game" SystemID="ShipSystems.Comms" ShowHelpRequested="ShowHelp" />
		<ShipSystemViewer Player="Player" Ship="Game.Ship" Game="Game" SystemID="ShipSystems.Engines" ShowHelpRequested="ShowHelp" />
		<ShipSystemViewer Player="Player" Ship="Game.Ship" Game="Game" SystemID="ShipSystems.Hull" ShowHelpRequested="ShowHelp" />
		<ShipSystemViewer Player="Player" Ship="Game.Ship" Game="Game" SystemID="ShipSystems.Weapons" ShowHelpRequested="ShowHelp" />
		
		<div class="d-flex flex-column">
			<SkewedHeader Color="SkewedHeader.AvilableColors.Green" IsForShips=false Text="Extras" />
			<div class="d-flex flex-column" style="border-left:2px solid green; margin-left:-2px; padding-top:5px; ">
				<ShipUpgradesArea Player="Player" Ship="Game.Ship" Game="Game"
								  Title="Módulos auxiliares"
								  Definitions="SVShip.AuxiliaryModules"
								  ShowHelpRequested="ShowHelp"
								  Minimalistic="true"
								  StoreChangesRequested="@(async(string msg)=>{await Game.StoreShip(msg);})" />

				<ShipUpgradesArea Player="Player" Ship="Game.Ship" Game="Game"
								  Title="Equipo en la nave"
								  Definitions="SVShip.AllShipUpgrades"
								  ShowHelpRequested="ShowHelp"
								  Minimalistic="true"
								  StoreChangesRequested="@(async(string msg)=>{await Game.StoreShip(msg);})" />
				<ShipUpgradesArea Player="Player" Ship="Game.Ship" Game="Game"
								  Title="Equipo personal"
								  Definitions="SVShip.AllCrewUpgrades"
								  ShowHelpRequested="ShowHelp"
								  Minimalistic="true"
								  StoreChangesRequested="@(async(string msg)=>{await Game.StoreShip(msg);})" />
				<ShipUpgradesArea Player="Player" Ship="Game.Ship" Game="Game"
								  Title="Entrenamiento"
								  Definitions="SVShip.AllTrainUpgrades"
								  ShowHelpRequested="ShowHelp"
								  Minimalistic="true"
								  StoreChangesRequested="@(async(string msg)=>{await Game.StoreShip(msg);})" />
				<ShipUpgradesArea Player="Player" Ship="Game.Ship" Game="Game"
								  Title="@Game.Ship.ShipType.ToUI()"
								  Definitions="SpecialUpgrades"
								  ShowHelpRequested="ShowHelp"
								  Minimalistic="true"
								  StoreChangesRequested="@(async(string msg)=>{await Game.StoreShip(msg);})" />
			</div>
		</div>
		
	</div>
	<div class="d-flex flex-column" style="max-width: 360px; min-width: 360px;">
		<div class="EquipeBox">
			<div class="d-flex flex-fill">
				<div class="d-flex flex-fill align-items-center gap-2 hoverable LoadItem" style="@(Player.SelectedMaxLoad == MaxLoads.Light?"opacity:100%!important; background:#2F2F2F;":"")" @onclick="@(()=>{Player.SelectedMaxLoad = MaxLoads.Light;})">
					<i class="bi bi@(Player.SelectedMaxLoad == MaxLoads.Light?"-x":"")-square"></i>
					<span>Ligero (3)</span>
				</div>
				<div class="d-flex flex-fill align-items-center gap-2 hoverable LoadItem" style="@(Player.SelectedMaxLoad == MaxLoads.Normal?"opacity:100%!important; background:#2F2F2F;":"")" @onclick="@(()=>{Player.SelectedMaxLoad = MaxLoads.Normal;})">
					<i class="bi bi@((Player.SelectedMaxLoad == MaxLoads.Normal)?"-x":"")-square"></i>
					<span>Normal (5)</span>
				</div>
				<div class="d-flex flex-fill align-items-center gap-2 hoverable LoadItem" style="@(Player.SelectedMaxLoad == MaxLoads.Heavy?"opacity:100%!important; background:#2F2F2F;":"")" @onclick="@(()=>{Player.SelectedMaxLoad = MaxLoads.Heavy;})">
					<i class="bi bi@((Player.SelectedMaxLoad == MaxLoads.Heavy)?"-x":"")-square"></i>
					<span>Pesado (6)</span>
				</div>
			</div>
			<div class="d-flex align-items-center EquipeHeader">
				Equipo
			</div>
			<div class="d-flex flex-column gap-1 pb-3" style="border-left:2px solid #2F2F2F;  padding-left:5px;">
				@foreach (var e in Player.Profession.AvailableItems()
									.OrderByDescending(x => FromIDtoItem(x).IsFine)
									.OrderByDescending(x => FromIDtoItem(x).Load))
				{
					<SVItemViewer Item="@FromIDtoItem(e)" ShowHelp="ShowHelp" Player="Player" Book="Book"/>
				}
			</div>
			<div class="d-flex align-items-center EquipeHeader">
				Equipo común
			</div>
			<div class="d-flex flex-column gap-1" style="border-left:2px solid #2F2F2F;  padding-left:5px;">
				@foreach (var e in Book.StandardItems
									.OrderByDescending(x => FromIDtoItem(x).IsFine)
									.OrderByDescending(x => FromIDtoItem(x).Load))
				{
					<SVItemViewer Item="@FromIDtoItem(e)" ShowHelp="ShowHelp" Player="Player" Book="Book" />
				}
			</div>
		</div>
	</div>
	
</div>

@code {
	[Parameter] public SVCharacter Player { get; set; } = new();

	private bool _isShowingAbilitySelector = false;
	private bool _isShowingShipAbilitySelector = false;
	private bool _isShowingAllAbilities = false;
	private bool _isShowingAllShipAbilities = false;
	private bool StartAbilitiesMaximized = true;
	private bool StartShipAbilitiesMaximized = true;

	HelpPanel helpPanel = new();
	SVTextBook? Book = null;

	string UpkeepCostString => Game.Ship.UpkeepCost.ToString();

	private bool IsShowingCurrentRoll = false;

	protected override void OnInitialized()
	{
		Game.NewInfoToast -= ShowInfo;
		Game.NewInfoToast += ShowInfo;

		(Game as SVGameController).OpenSharedRoll += ShowSharedRollView;

	}

	void ShowSharedRollView(object? sender, EventArgs e)
	{
		IsShowingCurrentRoll = true;
		InvokeAsync(StateHasChanged);
	}
	void HideSharedRollView()
	{
		IsShowingCurrentRoll = false;
	}

	void StartSharedRoll(SVStats stat)
	{
		Game.StartSharedRoll(Player, stat);
	}


	protected override void OnParametersSet()
	{
		if (Player is null) Player = new();

		VTT.Players = Game.Players;

		

		CharacterSelectorService.SetPeople(Game.People);
		Book = Game.TextBook as SVTextBook;

		if (Player.SelectedAbilities.Count > 3) StartAbilitiesMaximized = false;
	}

	List<ShipUpgrade> SpecialUpgrades
	{
		get
		{
			return Game.Ship.ShipType switch
			{
				ShipTypes.Stardancer => SVShip.AllStarDancerCrewShipUpgrades,
				ShipTypes.Cerberus => SVShip.AllCerberusCrewShipUpgrades,
				ShipTypes.Firedrake => SVShip.AllFireDrakeCrewShipUpgrades,
				_ => new List<ShipUpgrade> { new ShipUpgrade { ID = ShipUpgradeIDs.NotSet } }
			};
		}
	}

	private async Task UpdateUI() => await InvokeAsync(StateHasChanged);

	private SVItem FromIDtoItem(SVItemIDs ID)
	{
		if(Book is not null)
		{
			return Book.Items.Find(x => x.ID == ID) ?? new SVItem{Name = "Error"};
		}
		return new SVItem { Name = "No book" };
	}

	private SVMove GetMove(SVMoveIDs id) => Moves.GetMovement(id) as SVMove ?? new SVMove(id, SVStats.NotSet) { Title = $"Error for {id.ToString()}" };

	private async Task ShowHelp(Tuple<string, string> data)
	{
		await helpPanel.Show(data.Item1, data.Item2);
		//await Game.StoreChangesOnCharacter(Player, "Saving to cloud");
	}

	private void ShowInfo(object? sender, string msg) => Toaster.ShowInfo(msg);

	private void OpenAbilitySelector()
	{
		_isShowingAbilitySelector = true;
	}
	private void CloseAbilitySelector()
	{
		_isShowingAbilitySelector = false;
		_isShowingAllAbilities = false;
	}
	private void OpenShipAbilitySelector()
	{
		_isShowingShipAbilitySelector = true;
	}
	private void CloseShipAbilitySelector()
	{
		_isShowingShipAbilitySelector = false;
		_isShowingAllShipAbilities = false;
	}

	async Task AddAbility(SVMoveIDs id)
	{
		Player.SelectedAbilities.Add(id);
		await Game.StoreChangesOnCharacter(Player, $"Aprendió {id}");
		CloseAbilitySelector();
	}
	async Task RemoveAbility(SVMoveIDs id)
	{
		Player.SelectedAbilities.Remove(id);
		await Game.StoreChangesOnCharacter(Player, $"Olvidó {id}");
		CloseAbilitySelector();
	}
	async Task AddShipAbility(SVMoveIDs id)
	{
		Game.Ship.SelectedSpecialAbilities.Add(id);
		await Game.StoreShip($"Añadió {id} a la nave");
		CloseShipAbilitySelector();
	}
	async Task RemoveShipAbility(SVMoveIDs id)
	{
		Game.Ship.SelectedSpecialAbilities.Remove(id);
		await Game.StoreShip($"Quitó {id} de la nave");
		CloseShipAbilitySelector();
	}

	SVClasses GetClassFromAbility(SVMoveIDs id)
	{
		foreach(SVClasses cl in Enum.GetValues(typeof(SVClasses)))
		{
			if (cl.GetStartingAbility() == id)
				return cl;
			if (cl.AvailableAbilities().Contains(id))
				return cl;
		}
		return SVClasses.NotSet;
	}

	
}
