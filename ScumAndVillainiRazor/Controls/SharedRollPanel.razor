<div class="d-flex gap-3 w-100 flex-grow-1">	
	<div class="d-flex flex-column gap-2 justify-content-center">
		<h2>
			@Roll.Player.Name tira por @Roll.Stat.ToUI()
		</h2>
		<div class="d-flex gap-1 DicesTry">
			@if (Roll.TotalDices == 0)
			{
				<div class="Dice BlueDice" style="opacity:0.2;"/>
				<div class="Dice BlueDice" style="opacity:0.2;" />
				<HelperStarter Title="Tirar sin dados" HelperInvoked="ShowHelp" HelpText="Cuando tiras con zero dados, tiras dos dados y te quedas el peor"/>
			}
			@for (int i = 0; i < Roll.Player.GetBonus(Roll.Stat); ++i)
			{
				<div class="Dice BlueDice" />
			}
			@if (Roll.HelperPlayer is not null)
			{
				<div class="Dice HelperDice" />
			}
			@if (Roll.UsedAGambit)
			{
				<div class="Dice GreenDice" />
			}
			@if (Roll.UsedDevilsBargain || Roll.UsedPYForDice)
			{
				<div class="Dice RedDice" />
			}
		</div>
		<div class="d-flex w-100 gap-2">
            <SVPanel IsMini="true" Title="@Roll.Stat.ToUI()" Style="flex:1;">
				<div class="flex-grow-1 d-flex flex-column justify-content-center align-items-center fs-1">
					@Roll.Player.GetBonus(Roll.Stat)
				</div>
			</SVPanel>
			<SVPanel Title="Ayudas" IsMini="true"  Style="flex:1;" Color="SVPanel.SVPanelColors.Turquoise">
				<div class="flex-grow-1 d-flex flex-column justify-content-center">
					@if (Roll.Player == Player)
					{
						@if (Roll.HelperPlayer is null)
						{
							<span>Nadie te ayuda</span>
						}
						else
						{
							<div class="d-flex flex-column">
								<span>@Roll.HelperPlayer.Name te ayuda!</span>
								<span>+1 dado</span>
							</div>
						}
					}
					else if (Roll.Player != Player)
					{
						if (Roll.HelperPlayer is null)
						{
							<div class="HelpButton hoverable" @onclick=Help>
								<span>AYUDAR</span>
								<span>+1 dado</span>
								<span>+2 estrés</span>
								<span>(@Player.Stress/9)</span>
							</div>
						}
						else if (Roll.HelperPlayer != Player)
						{
							<div class="d-flex flex-column">
								<span>@Roll.HelperPlayer.Name le ayuda!</span>
								<span>+1 dado</span>
							</div>
						}
						else
						{
							<div class="flex-grow-1 d-flex flex-column align-items-center justify-content-center">
								<div class="HelpButton Pressed Turquoise"
									 style="height:55px;"
									 @onclick=RemoveHelp>
									<div class="d-flex gap-1 justify-content-center align-items-center text-center">
										+2 estrés (@Player.Stress/@Player.MaxStress) 
										<i class="bi bi-caret-right-fill"></i> 
										+1 dado
									</div>
								</div>
							</div>
						}
					}
				</div>
			</SVPanel>
		</div>
		<SVPanel Title="Gámbitos" Color="SVPanel.SVPanelColors.Green">
			<div class="flex-grow-1 d-flex flex-column justify-content-center">
				<div class="HelpButton
								@(Roll.UsedAGambit?"Pressed Green":"")
								@(!Roll.UsedAGambit && Ship.Gambits < 1?"Cancelled":"")"
					 style="height:55px;"
					 @onclick=UseGambit>
					<div class="d-flex gap-1 justify-content-center">
						-1 Gámbito (@Ship.Gambits) <i class="bi @(Ship.Gambits < 1?"bi-ban":"bi-caret-right-fill")"></i> +1 dado
					</div>
				</div>
			</div>
		</SVPanel>
		<SVPanel Title="Llevarte al límite" Color="SVPanel.SVPanelColors.Red">
			<div class="d-flex gap-4 flex-grow-1">
				<div class="d-flex flex-column gap-2 py-2" style="flex:1;">
					<div class="HelpButton
								@(Roll.UsedPYForDice?"Pressed":"")
								@(!Roll.UsedPYForDice && Player.StresLeft < 2 || Roll.Player != Player || Roll.UsedDevilsBargain?"Cancelled":"")"
						 style="height:55px;"
						 @onclick=UsePYDice>
						<div class="d-flex gap-1 justify-content-center">
							+2 estrés (@Player.Stress/@Player.MaxStress) <i class="bi bi-caret-right-fill"></i> +1 dado
						</div>
					</div>
					<div class="HelpButton
								@(Roll.UsedPYForLevel?"Pressed":"")
								@(!Roll.UsedPYForLevel && Player.StresLeft < 2 || Roll.Player != Player?"Cancelled":"")"
						 style="height:55px;"
						 @onclick=UsePYEffect>
						<div class="d-flex gap-1 justify-content-center">
							+2 estrés (@Player.Stress/@Player.MaxStress) <i class="bi bi-caret-right-fill"></i> Efecto +1
						</div>
					</div>
					<div class="HelpButton
								@(Roll.UsedPYIncapacitate?"Pressed":"")
								@(!Roll.UsedPYIncapacitate && Player.StresLeft < 2 || Roll.Player != Player?"Cancelled":"")"
						 style="height:55px;"
						 @onclick=UsePYIncapacitate>
						<div class="d-flex gap-1 justify-content-center">
							+2 estrés (@Player.Stress/@Player.MaxStress) <i class="bi bi-caret-right-fill"></i> Actuar estando incapacitado
						</div>
					</div>
					<div class="HelpButton
								@(Roll.UsedDevilsBargain?"Pressed":"")
								@(Roll.Player != Player || Roll.UsedPYForDice?"Cancelled":"")"
						 style="height:55px;"
						 @onclick=UseDevilsBargain>
						<div class="d-flex gap-3 justify-content-center">
							Pactar con el diablo <i class="bi bi-info-circle" @onclick=ShowDevilsHelp @onclick:stopPropagation></i>
						</div>
					</div>
				</div>
			</div>
		</SVPanel>
	</div>
	<div class="flex-grow-1 d-flex flex-column flex-grow-1 Consolas">
		<div class="d-flex gap-2">
			<div class="d-flex flex-column align-items-end me-1 pe-2" >
				<div class="d-flex gap-2">
					Potencia? 
					<HelperStarter 
									HelperInvoked="ShowHelp" 
									Title="Potencia"
									HelpText="Este factor tiene en cuenta debilidades particulares, la necesidad de tomarte un tiempo extra o un tomar mayores riesgos, o la influencia de poderes extraños.\n Un dispositivo de alta gama del Gremio puede ser un potente abridor de cajas fuertes. Un artefacto de Ur puede ser potente contra los encantos de un Portavoz de la Noche. Un ladrón será más potente acechando en la oscuridad."/>
				</div>
				<div class="d-flex gap-2">
					Calidad/Nivel?
					<HelperStarter 
									HelperInvoked="ShowHelp" 
									Title="Calidad/Nivel"
									HelpText="La calidad representa la eficacia de las herramientas, armas u otros recursos, generalmente resumida por la calidad de la tripulación o el nivel de facción.\nLos objetos de calidad cuentan como una bonificación de +1 en calidad, que se acumula con el nivel/calidad de la tripulación.\n\n|Hayley está abriendo la cerradura de un almacén de Malklaith.\nLa calidad de su tripulación es I y tiene ganzúas de calidad: está en el nivel II.\nMalklaith es de nivel III. Hayley está superada en calidad, por lo que su efecto en la cerradura será limitado.||"/>
				</div>
				<div class="d-flex gap-2">
					Escala?
					<HelperStarter 
									HelperInvoked="ShowHelp" 
									Title="Escala"
									HelpText="La escala representa la cantidad de oponentes, el tamaño de un área cubierta, el alcance de influencia, etc. Una escala mayor puede ser una ventaja o desventaja según la situación. En la batalla, más gente es mejor. Al infiltrarse, más gente es un obstáculo."/>
				</div>
				<div class="d-flex gap-2">
					Dominante?
					<HelperStarter 
									HelperInvoked="ShowHelp" 
									Title="Dominante"
									HelpText="Si un factor de efecto eclipsa a los demás, el bando con esa ventaja domina la situación. No importa si tienes una buena vibroespada y un efecto extra si intentas luchar contra 20 personas a la vez. Su escala domina la batalla y te quedas con un efecto muy limitado, o ninguno en absoluto. El mismo principio se aplica a las acciones 'imposibles'.\n|Aleera quiere derribar una cañonera que los acosa con su excelente pistola bláster, Krieger. Ella dice: 'Tomo a Krieger y lucho con la nave, disparando a los motores. ¡Ja! ¡He sacado un crítico! ¡Gran efecto!'.\nObviamente, esto no es posible. Una persona no puede derribar una cañonera con un bláster. Sabemos que es inherentemente tonto, como saltar sobre la luna. Pero esto también está codificado en los factores de efecto. La nave es dominante en calidad, escala y potencia.A menos que esos factores se contrarresten de alguna manera, el nivel de efecto de Aleera es cero antes de que empiece. No importa lo que tire para su acción, no tendrá ningún efecto. Este concepto es útil para evaluar otras situaciones muy difíciles (pero alcanzables).\nPero esta situación no es completamente desesperada. Aquí es donde los factores de efecto pueden ayudar a darle sentido a la situación. Si la nave es dominante en calidad, escala y potencia, entonces los PJ pueden tratar de comprender los factores y tomar acciones para abordarlos. ¿Hay una debilidad en la armadura de la nave? Pueden usarla para eliminar su potencia (y aprovechar esa ventaja para sí mismos).\n¿De qué escala es? Necesitan un arma más grande. Y así sucesivamente.||"/>
				</div>
            </div><div class="EffectBox @(Roll.Effect == SVEffect.Zero?"Selected":"")" @onclick="@(()=>{Roll.Effect = SVEffect.Zero;})">
                Sin efecto<HelperStarter HelperInvoked="ShowHelp" Title="Sin efecto" HelpText="Por muy buena que sea la tirada, no es posible tener ningún efecto, vas a tener que trabjar en aquello que imposibilita tu acción antes de poder siquiera intentarlo." />
            </div>
            <div class="EffectBox @(Roll.Effect==SVEffect.Limited?"Selected":"")" @onclick="@(()=>{Roll.Effect = SVEffect.Limited;})">
                Limitado<HelperStarter HelperInvoked="ShowHelp" Title="Limitado" HelpText="Logras un efecto parcial o débil. ¿Cómo se reduce tu impacto? ¿Qué esfuerzo te queda para lograr tu objetivo? 1 tick del reloj." />
            </div>
			<div class="EffectBox @(Roll.Effect==SVEffect.Standard?"Selected":"")" @onclick="@(()=>{Roll.Effect = SVEffect.Standard;})">
				Estándar <HelperStarter HelperInvoked="ShowHelp" Title="Estándard" HelpText="Logras lo que esperaríamos como normal con esta acción. ¿Es suficiente o queda más por hacer? 2 ticks del reloj." />
			</div>
            <div class="EffectBox @(Roll.Effect == SVEffect.Great?"Selected":"")" @onclick="@(()=>{Roll.Effect = SVEffect.Great;})">
                Excelente <HelperStarter HelperInvoked="ShowHelp" Title="Excelente" HelpText="Lograste más de lo habitual. ¿Cómo se manifiesta el esfuerzo adicional? ¿Qué beneficio adicional disfrutas? 3 ticks del reloj." />
            </div>
            <div class="EffectBox @(Roll.Effect==SVEffect.Extreme?"Selected":"")" @onclick="@(()=>{Roll.Effect = SVEffect.Extreme;})">
				<div class="d-flex flex-column align-items-center">
					<div class="d-flex gap-2">
						Extremo 
						<HelperStarter HelperInvoked="ShowHelp" 
							Title="Extremo" 
							HelpText="Un efecto superior a todo lo normal." />
					</div>
				</div>
            </div>
		</div>

		<table class="table table-dark mt-3">
			<thead>
				<tr>
					<td class="NotSelected"></td>
					<td class="@(Roll.Position == SVPositions.Controlled?"Selected":"NotSelected")" 
						@onclick="@(()=>{Roll.Position = SVPositions.Controlled;})">CONTROLADO</td>
					<td class="@(Roll.Position == SVPositions.Risky?"Selected":"NotSelected")"
						@onclick="@(()=>{Roll.Position = SVPositions.Risky;})">ARRIESGADO</td>
					<td class="@(Roll.Position == SVPositions.Desperate?"Selected":"NotSelected")"
						@onclick="@(()=>{Roll.Position = SVPositions.Desperate;})">DESESPERADO</td>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td class="NotSelected">
						CRÍTICO
						<span class="DiceHint">Doble seis</span>
					</td>
					<td class="@(Roll.Position == SVPositions.Controlled?"Selected":"NotSelected")">
                        <strong>Éxito</strong> con efecto mejorado
					</td>
					<td class="@(Roll.Position == SVPositions.Risky?"Selected":"NotSelected")">
						<strong>Éxito</strong> con efecto mejorado
					</td>
					<td class="@(Roll.Position == SVPositions.Desperate?"Selected":"NotSelected")">
						<strong>Éxito</strong> con efecto mejorado
						<div class="XPHint">
							+ 1 XP!
						</div>
					</td>
				</tr>
				<tr>
					<td class="NotSelected">
						<strong>Éxito</strong>
						<span class="DiceHint">Seis</span>
					</td>
					<td class="@(Roll.Position == SVPositions.Controlled?"Selected":"NotSelected")">
						<strong>Éxito</strong>
					</td>
					<td class="@(Roll.Position == SVPositions.Risky?"Selected":"NotSelected")">
						<strong>Éxito</strong>
					</td>
					<td class="@(Roll.Position == SVPositions.Desperate?"Selected":"NotSelected")">
						<strong>Éxito</strong>
						<div class="XPHint">
							+1 XP!
						</div>
					</td>
				</tr>
				<tr>
					<td class="NotSelected">
						<strong>Éxito con consequencias</strong>
						<span class="DiceHint">máx 4 o 5</span>
					</td>
					<td class="@(Roll.Position == SVPositions.Controlled?"Selected":"NotSelected")">
						<strong>Dudas</strong>
						<div>
							Te retiras y pruebas algo diferente ..
						</div>
						<div class="w-100 text-center my-3">
							o bien ...
						</div>
						<div>
							Lo consigues pero ...
						</div>

						<div class="d-flex flex-column ps-2 mt-2">							
                            <div class="d-flex gap-2">
                                Complicacion MENOR <HelperStarter Title="@SVConsequences.Comlpication.ToUI()"
                                                                  HelperInvoked="ShowHelp"
                                                                  HelpText="@SVConsequences.Comlpication.GetDescription()" />
                            </div>
                            <div class="d-flex gap-2">
                                @SVConsequences.ReducedEffect.ToUI() <HelperStarter Title="@SVConsequences.ReducedEffect.ToUI()"
                                                                                    HelperInvoked="ShowHelp"
                                                                                    HelpText="@SVConsequences.ReducedEffect.GetDescription()" />
                            </div>
                            <div class="d-flex gap-2">
                                Daño MENOR <HelperStarter Title="@SVConsequences.Harm.ToUI()"
                                                          HelperInvoked="ShowHelp"
                                                          HelpText="@SVConsequences.Harm.GetDescription()" />
                            </div>
                            <div class="d-flex gap-2">
                                Empeora tu posición <HelperStarter Title="@SVConsequences.WorsePosition.ToUI()"
                                                                   HelperInvoked="ShowHelp"
                                                                   HelpText="@SVConsequences.WorsePosition.GetDescription()" />
                            </div>

						</div>
					</td>
					<td class="@(Roll.Position == SVPositions.Risky?"Selected":"NotSelected")">
						<strong>Éxito con consequencias</strong>
						<div class="d-flex flex-column ps-2">							
							<div class="d-flex gap-2">
								Una complicacion <HelperStarter Title="@SVConsequences.Comlpication.ToUI()"
												HelperInvoked="ShowHelp"
												HelpText="@SVConsequences.Comlpication.GetDescription()" />
							</div>
							<div class="d-flex gap-2">
								Efecto reducido <HelperStarter Title="@SVConsequences.ReducedEffect.ToUI()"
											   HelperInvoked="ShowHelp"
											   HelpText="@SVConsequences.ReducedEffect.GetDescription()" />
							</div>
							<div class="d-flex gap-2">
								Daño MODERADO <HelperStarter Title="@SVConsequences.Harm.ToUI()"
											 HelperInvoked="ShowHelp"
											 HelpText="@SVConsequences.Harm.GetDescription()" />
							</div>
							<div class="d-flex gap-2">
								Acaba en una posición desesperada <HelperStarter Title="@SVConsequences.WorsePosition.ToUI()"
																		 HelperInvoked="ShowHelp"
																		 HelpText="@SVConsequences.WorsePosition.GetDescription()" />
							</div>
						</div>
					</td>
					<td class="@(Roll.Position == SVPositions.Desperate?"Selected":"NotSelected")">
						<div class="d-flex flex-column ps-2">
							<strong>Éxito con consequencias MAYORES</strong>
							
							<div class="d-flex gap-2">
								Una complicacion SERIA <HelperStarter Title="@SVConsequences.Comlpication.ToUI()"
												HelperInvoked="ShowHelp"
												HelpText="@SVConsequences.Comlpication.GetDescription()" />
							</div>
							<div class="d-flex gap-2">
								Efecto reducido <HelperStarter Title="@SVConsequences.ReducedEffect.ToUI()"
											   HelperInvoked="ShowHelp"
											   HelpText="@SVConsequences.ReducedEffect.GetDescription()" />
							</div>
							<div class="d-flex gap-2">
								Daño SEVERO <HelperStarter Title="@SVConsequences.Harm.ToUI()"
											 HelperInvoked="ShowHelp"
											 HelpText="@SVConsequences.Harm.GetDescription()" />
							</div>
							<div class="XPHint">
								+1 XP!
							</div>
						</div>						
					</td>
				</tr>
				<tr>
					<td class="NotSelected">
						<strong>Malas noticias</strong>
						<span class="DiceHint">&lt;3 </span>
					</td>
					<td class="@(Roll.Position == SVPositions.Controlled?"Selected":"NotSelected")">
						Avanza aprovechando una oportunidad arriesgada<br />
						o<br />
						Retrocede y prueba un enfoque diferente.
					</td>
					<td class="@(Roll.Position == SVPositions.Risky?"Selected":"NotSelected")">
						<div class="d-flex flex-column ps-2">
							<div class="d-flex gap-2">
								Una complicacion <HelperStarter Title="@SVConsequences.Comlpication.ToUI()"
												  HelperInvoked="ShowHelp"
												  HelpText="@SVConsequences.Comlpication.GetDescription()" />
							</div>
							<div class="d-flex gap-2">
								Daño MODERADO <HelperStarter Title="@SVConsequences.Harm.ToUI()"
										  HelperInvoked="ShowHelp"
										  HelpText="@SVConsequences.Harm.GetDescription()" />
							</div>
							<div class="d-flex gap-2">
								Acaba en una posición desesperada <HelperStarter Title="@SVConsequences.WorsePosition.ToUI()"
										   HelperInvoked="ShowHelp"
										   HelpText="@SVConsequences.WorsePosition.GetDescription()" />
							</div>
							<div class="d-flex gap-2">
								Pierde la oportunida <HelperStarter Title="@SVConsequences.LostOportunity.ToUI()"
										   HelperInvoked="ShowHelp"
											HelpText="@SVConsequences.LostOportunity.GetDescription()" />
							</div>
						</div>
					</td>
					<td class="@(Roll.Position == SVPositions.Desperate?"Selected":"NotSelected")">
						<strong>La peor posibilidad</strong>
						<div class="d-flex flex-column ps-2">
							
							<div class="d-flex gap-2">
								Una complicacion SERIA <HelperStarter Title="@SVConsequences.Comlpication.ToUI()"
											  HelperInvoked="ShowHelp"
											  HelpText="@SVConsequences.Comlpication.GetDescription()" />
							</div>
							<div class="d-flex gap-2">
								Pierde la oportunida <HelperStarter Title="@SVConsequences.LostOportunity.ToUI()"
										   HelperInvoked="ShowHelp"
										   HelpText="@SVConsequences.LostOportunity.GetDescription()" />
							</div>
							<div class="d-flex gap-2">
								Daño SEVERO <HelperStarter Title="@SVConsequences.Harm.ToUI()"
										   HelperInvoked="ShowHelp"
										   HelpText="@SVConsequences.Harm.GetDescription()" />
							</div>
							<div class="XPHint">
								+1 XP!
							</div>
						</div>
					</td>
				</tr>
			</tbody>
		</table>
	</div>
</div>


@code {
	[Parameter] public SVCharacter Player { get; set; } = new();
	[Parameter] public SVGameController? Game { get; set; }
	[Parameter] public EventCallback<Tuple<string, string>> ShowHelp{ get; set; }

	SVShip Ship => Game?.Ship ?? new SVShip();
	SVRollReport Roll => Game!.CurrentRoll!;

	private void Help()
	{
		Roll.HelperPlayer = Player;
		Player.Stress += 2;
		Game?.UpdateSharedRollInAllClients();
	}
	private void RemoveHelp()
	{
		Roll.HelperPlayer = null;
		Player.Stress -= 2;
		Game?.UpdateSharedRollInAllClients();
	}
	private async void UseGambit()
	{
		if(Roll.UsedAGambit)
		{
			Roll.UsedAGambit = false ;
			Ship.Gambits++;
		}
		else
		{
			Roll.UsedAGambit = true;
			Ship.Gambits--;
		}
		await Game!.StoreShip($"Gámbitos guardados: {Ship.Gambits}");
		Game?.UpdateSharedRollInAllClients();
	}
	private async Task UsePYDice()
	{
		if(Roll.UsedPYForDice)
		{
			Roll.UsedPYForDice = false;
			Player.Stress -= 2;
		}
		else
		{
			Roll.UsedPYForDice = true;
			Player.Stress += 2;
		}
		if(Game is not null && Player is not null)
			await Game.StoreChangesOnCharacter(Player, $"Estrés: {Player.Stress}.");	

		Game?.UpdateSharedRollInAllClients();
	}
	private async Task UsePYEffect()
	{
		if(Roll.UsedPYForLevel)
		{
			Roll.UsedPYForLevel = false;
			Player.Stress -= 2;
		}
		else
		{
			Roll.UsedPYForLevel = true;
			Player.Stress += 2;
		}
		if (Game is not null && Player is not null)
			await Game.StoreChangesOnCharacter(Player, $"Estrés: {Player.Stress}.");
		Game?.UpdateSharedRollInAllClients();
	}
	private async Task UsePYIncapacitate()
	{
		if (Roll.UsedPYIncapacitate)
		{
			Roll.UsedPYIncapacitate = false;
			Player.Stress -= 2;
		}
		else
		{
			Roll.UsedPYIncapacitate = true;
			Player.Stress += 2;
		}

		if (Game is not null && Player is not null)
			await Game.StoreChangesOnCharacter(Player, $"Estrés: {Player.Stress}.");
		Game?.UpdateSharedRollInAllClients();
	}

	private async Task UseDevilsBargain()
	{
		if(Roll.UsedDevilsBargain)
		{
			Roll.UsedDevilsBargain = false;
		}
		else
		{
			Roll.UsedDevilsBargain = true;
		}
	}

	private async Task ShowDevilsHelp()
	{
		await ShowHelp.InvokeAsync(new Tuple<string, string>(
			"Pactar con el diablo",
				@"Acepa un pacto con el diablo a cambio de un dado extra, algunos ejemplos son:
				\nDaños colaterales, daños no intencionados.
				Sacrificar un crédito o un objeto.
				Traicionar a un amigo o a un ser querido.
				Ofender o enfadar a una facción.
				Iniciar y/o marcar un reloj problemático.
				Agregar presión a la tripulación a partir de pruebas o testigos.
				Sufrir daño."));
	}


}
