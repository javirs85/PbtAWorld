<div class="d-flex gap-3 w-100 flex-grow-1">	
	<div class="d-flex flex-column gap-2">
		<h2>
			@Roll.Player.Name tira por @Roll.Stat.ToUI()
		</h2>
		<div class="d-flex gap-1 DicesTry">
			@if (Roll.TotalDices == 0)
			{
				<div class="Dice BlueDice" style="opacity:0.2;"/>
				<div class="Dice BlueDice" style="opacity:0.2;" />
				<HelperStarter Title="Tirar sin dados" HelperInvoked="ShowHelp" HelpText="Cuando tiras con zero dados, tiras dos dados y te quedas el peor"/>
			}
			@for (int i = 0; i < Roll.Player.GetBonus(Roll.Stat); ++i)
			{
				<div class="Dice BlueDice" />
			}
			@if (Roll.HelperPlayer is not null)
			{
				<div class="Dice HelperDice" />
			}
			@for (int i = 0; i < Roll.ExtraDices; ++i)
			{
				<div class="Dice YellowDice" />
			}
			@if (Roll.UsedAGambit)
			{
				<div class="Dice GreenDice" />
			}
			@if (Roll.UsedDevilsBargain || Roll.UsedPYForDice)
			{
				<div class="Dice RedDice" />
			}
		</div>
		<div class="d-flex w-100 gap-2">
			<SVPanel IsMini="true" Title="@Roll.Stat.ToUI()" Style="flex:1;">
				<div class="flex-grow-1 d-flex justify-content-center align-items-center fs-1 gap-4">
					@Roll.Player.GetBonus(Roll.Stat)
					<div class="d-flex gap-1 justify-content-center align-items-center p-2 ExtraDiceQuestionPanel">
						<div class="Dice YellowDice"></div>
						<div class="d-flex fs-3 flex-column">
							<i class="bi bi-chevron-double-up hoverable" @onclick="AddExtraDie"></i>
							<i class="bi bi-chevron-double-down hoverable" @onclick="RemoveExtraDie"></i>
						</div>
					</div>
				</div>
			</SVPanel>
			<SVPanel Title="Ayudas" IsMini="true"  Style="flex:1;" Color="SVPanel.SVPanelColors.Turquoise">
				<div class="flex-grow-1 d-flex flex-column justify-content-center">
					@if (Roll.Player == Player)
					{
						@if (Roll.HelperPlayer is null)
						{
							<span>Nadie te ayuda</span>
						}
						else
						{
							<div class="d-flex flex-column">
								<span>@Roll.HelperPlayer.Name te ayuda!</span>
								<span>+1 dado</span>
							</div>
						}
					}
					else if (Roll.Player != Player)
					{
						if (Roll.HelperPlayer is null)
						{
							<div class="HelpButton hoverable" @onclick=Help>
								<span>AYUDAR</span>
								<span>+1 dado</span>
								<span>+2 estrés</span>
								<span>(@Player.Stress/9)</span>
							</div>
						}
						else if (Roll.HelperPlayer != Player)
						{
							<div class="d-flex flex-column">
								<span>@Roll.HelperPlayer.Name le ayuda!</span>
								<span>+1 dado</span>
							</div>
						}
						else
						{
							<div class="flex-grow-1 d-flex flex-column align-items-center justify-content-center">
								<div class="HelpButton Pressed Turquoise"
								style="height:55px;"
								@onclick=RemoveHelp>
									<div class="d-flex gap-1 justify-content-center align-items-center text-center">
										+2 estrés (@Player.Stress/@Player.MaxStress) 
										<i class="bi bi-caret-right-fill"></i> 
										+1 dado
									</div>
								</div>
							</div>
						}
					}
				</div>
			</SVPanel>
		</div>
		<SVPanel Title="Gámbitos" Color="SVPanel.SVPanelColors.Green">
			<div class="flex-grow-1 d-flex flex-column justify-content-center">
				<div class="HelpButton
								@(Roll.UsedAGambit?"Pressed Green":"")
								@(!Roll.UsedAGambit && Ship.Gambits < 1?"Cancelled":"")"
				style="height:55px;"
				@onclick=UseGambit>
					<div class="d-flex gap-1 justify-content-center">
						-1 Gámbito (@Ship.Gambits) <i class="bi @(Ship.Gambits < 1?"bi-ban":"bi-caret-right-fill")"></i> +1 dado
					</div>
				</div>
			</div>
		</SVPanel>
		<SVPanel Title="Llevarte al límite" Color="SVPanel.SVPanelColors.Red">
			<div class="d-flex gap-4 flex-grow-1">
				<div class="d-flex flex-column gap-2 py-2" style="flex:1;">
					<div class="HelpButton
								@(Roll.UsedPYForDice?"Pressed":"")
								@(!Roll.UsedPYForDice && Player.StresLeft < 2 || Roll.Player != Player || Roll.UsedDevilsBargain?"Cancelled":"")"
					style="height:55px;"
					@onclick=UsePYDice>
						<div class="d-flex gap-1 justify-content-center">
							+2 estrés (@Player.Stress/@Player.MaxStress) <i class="bi bi-caret-right-fill"></i> +1 dado
						</div>
					</div>
					<div class="HelpButton
								@(Roll.UsedPYForLevel?"Pressed":"")
								@(!Roll.UsedPYForLevel && Player.StresLeft < 2 || Roll.Player != Player?"Cancelled":"")"
					style="height:55px;"
					@onclick=UsePYEffect>
						<div class="d-flex gap-1 justify-content-center">
							+2 estrés (@Player.Stress/@Player.MaxStress) <i class="bi bi-caret-right-fill"></i> Efecto +1
						</div>
					</div>
					<div class="HelpButton
								@(Roll.UsedPYIncapacitate?"Pressed":"")
								@(!Roll.UsedPYIncapacitate && Player.StresLeft < 2 || Roll.Player != Player?"Cancelled":"")"
					style="height:55px;"
					@onclick=UsePYIncapacitate>
						<div class="d-flex gap-1 justify-content-center">
							+2 estrés (@Player.Stress/@Player.MaxStress) <i class="bi bi-caret-right-fill"></i> Actuar estando incapacitado
						</div>
					</div>
					<div class="HelpButton
								@(Roll.UsedDevilsBargain?"Pressed":"")
								@(Roll.Player != Player || Roll.UsedPYForDice?"Cancelled":"")"
					style="height:55px;"
					@onclick=UseDevilsBargain>
						<div class="d-flex gap-3 justify-content-center">
							Pactar con el diablo <i class="bi bi-info-circle" @onclick=ShowDevilsHelp @onclick:stopPropagation></i>
						</div>
					</div>
				</div>
			</div>
		</SVPanel>
	</div>
	<div class="flex-grow-1 d-flex flex-column flex-grow-1 Consolas">

		@if (Roll.Result == SVRollResult.NotSet)
		{
			<EffectSelector CancelEverything="CancelEverything" Player="Player" Game=Game ShowHelp="ShowHelp" />
		}
		@if(Roll.EffectSet)
		{
			<div class="d-flex gap-2">
				@if(Roll.Result != SVRollResult.NotSet)
				{
					<div class="EffectBox Selected m-3">
						@Roll.Effect.ToUI()
						<HelperStarter Title=@Roll.Effect.ToUI() HelpText=@Roll.Effect.GetDescription() HelperInvoked="ShowHelp" />
					</div>
				}				
				<table class="table table-dark mt-3">
					<thead>
						<tr>
							<td class="NotSelected"></td>
							<td class="@(Roll.Position == SVPositions.Controlled?"Selected":"NotSelected")" style="cursor:pointer;"
							@onclick="@(()=>{Roll.Position = SVPositions.Controlled; SendUpdate();})">
								@if (Roll.Position == SVPositions.Controlled && Roll.HasBeenNegotiated)
								{
									<i class="bi bi-chevron-double-up"></i>
								}
								<div class="TdContainer">
									<div class="d-flex gap-2">
										@if (Roll.Position == SVPositions.Controlled && Roll.HasBeenNegotiated)
										{
											<i class="bi bi-chevron-double-up"></i>
										}
										CONTROLADO
									</div>
								</div>
							</td>
							<td class="@(Roll.Position == SVPositions.Risky?"Selected":"NotSelected")" style="cursor:pointer;"
							@onclick="@(()=>{Roll.Position = SVPositions.Risky; SendUpdate();})">
								<div class="TdContainer">
									<div class="d-flex gap-2">
										@if (Roll.Position == SVPositions.Risky && Roll.HasBeenNegotiated)
										{
											<i class="bi bi-chevron-double-up"></i>
										}
										ARRIESGADO
									</div>
								</div>
							</td>
							<td class="@(Roll.Position == SVPositions.Desperate?"Selected":"NotSelected")" style="cursor:pointer;"
							@onclick="@(()=>{Roll.Position = SVPositions.Desperate; SendUpdate();})">
								<div class="TdContainer">
									<div class="d-flex gap-2">
										@if (Roll.Position == SVPositions.Desperate && Roll.HasBeenNegotiated)
										{
											<i class="bi bi-chevron-double-up"></i>
										}
										DESESPERADO
									</div>
								</div>
							</td>
						</tr>
					</thead>
					<tbody>
						<tr>
							<td class="@(GetBackgroundTag(SVPositions.NotSet, SVRollResult.Critic)) Pointer"
								@onclick="@(()=>{ForceRollResult(SVRollResult.Critic);})">
								<div class="TdContainer">
									@if (Roll.Result != SVRollResult.NotSet && (GetBackgroundTag(SVPositions.NotSet, SVRollResult.Critic) != "Final"))
									{
										<div>2x6</div>
									}
									else
									{
										<div class="d-flex flex-column">
											CRÍTICO
											<span class="DiceHint">Doble seis</span>
										</div>
									}
								</div>
							</td>
							<td class="@(GetBackgroundTag(SVPositions.Controlled, SVRollResult.Critic))">
								<div class="TdContainer">
									@if (Roll.Result != SVRollResult.NotSet && (GetBackgroundTag(SVPositions.Controlled, SVRollResult.Critic) != "Final"))
									{
										<div>-</div>
									}
									else
									{
										<div class="d-flex gap-1"><strong>Éxito</strong> con efecto mejorado</div>
									}
								</div>
							</td>
							<td class="@(GetBackgroundTag(SVPositions.Risky, SVRollResult.Critic))">
								<div class="TdContainer">
									@if (Roll.Result != SVRollResult.NotSet && (GetBackgroundTag(SVPositions.Risky, SVRollResult.Critic) != "Final"))
									{
										<div>-</div>
									}
									else
									{
										<div class="d-flex gap-1"><strong>Éxito</strong> con efecto mejorado</div>
										<div class="XPHint">
											+1 Gámbito (si no usaste uno)
										</div>
									}
								</div>
							</td>
							<td class="@(GetBackgroundTag(SVPositions.Desperate, SVRollResult.Critic))">
								<div class="TdContainer">
									@if (Roll.Result != SVRollResult.NotSet && (GetBackgroundTag(SVPositions.Desperate, SVRollResult.Critic) != "Final"))
									{
										<div>-</div>
									}
									else
									{
										<div class="d-flex gap-1"><strong>Éxito</strong> con efecto mejorado</div>
										<div class="XPHint">
											+1 XP!
										</div>
									}
								</div>
							</td>
						</tr>
						<tr>
							<td class="@(GetBackgroundTag(SVPositions.NotSet, SVRollResult.Success)) Pointer"
							@onclick="@(()=>{ForceRollResult(SVRollResult.Success);})">
								<div class="TdContainer">
									@if (Roll.Result != SVRollResult.NotSet && (GetBackgroundTag(SVPositions.NotSet, SVRollResult.Success) != "Final"))
									{
										<div>6</div>
									}
									else
									{
										<strong>Éxito</strong>
										<span class="DiceHint">Seis</span>
									}
								</div>
							</td>
							<td class="@(GetBackgroundTag(SVPositions.Controlled, SVRollResult.Success))">
								<div class="TdContainer">
									@if (Roll.Result != SVRollResult.NotSet && (GetBackgroundTag(SVPositions.Controlled, SVRollResult.Success) != "Final"))
									{
										<div>-</div>
									}
									else
									{
										<strong>Éxito</strong>
									}
								</div>
							</td>
							<td class="@(GetBackgroundTag(SVPositions.Risky, SVRollResult.Success))">
								<div class="TdContainer">
									@if (Roll.Result != SVRollResult.NotSet && (GetBackgroundTag(SVPositions.Risky, SVRollResult.Success) != "Final"))
									{
										<div>-</div>
									}
									else
									{
										<strong>Éxito</strong>
										<div class="XPHint">
											+1 Gámbito (si no usaste uno)
										</div>
									}
								</div>						
							</td>
							<td class="@(GetBackgroundTag(SVPositions.Desperate, SVRollResult.Success))">
								@if (Roll.Result != SVRollResult.NotSet && (GetBackgroundTag(SVPositions.Desperate, SVRollResult.Success) != "Final"))
								{
									<div>-</div>
								}
								else
								{
									<div class="TdContainer">
										<strong>Éxito</strong>
										<div class="XPHint">
											+1 XP!
										</div>
									</div>
								}						
							</td>
						</tr>
						<tr>
							<td class="@(GetBackgroundTag(SVPositions.NotSet, SVRollResult.Mild)) Pointer"
							@onclick="@(()=>{ForceRollResult(SVRollResult.Mild);})">
								@if (Roll.Result != SVRollResult.NotSet && (GetBackgroundTag(SVPositions.NotSet, SVRollResult.Mild) != "Final"))
								{
									<div>4-5</div>
								}
								else
								{
									<div class="TdContainer">
										<strong>Éxito con consequencias</strong>
										<span class="DiceHint">máx 4 o 5</span>
									</div>
								}						
							</td>
							<td class="@(GetBackgroundTag(SVPositions.Controlled, SVRollResult.Mild))">
								<div class="TdContainer">
									@if (Roll.Result != SVRollResult.NotSet && (GetBackgroundTag(SVPositions.Controlled, SVRollResult.Mild) != "Final"))
									{
										<div>-</div>
									}
									else
									{
										<ul>
											<li>Te retiras y pruebas algo diferente o...</li>
											<li>
												Lo consigues pero ...
												<div class="d-flex flex-column ps-2 mt-2">
													<div class="d-flex gap-2">
														Complicacion MENOR <HelperStarter Title="@SVConsequences.Comlpication.ToUI()"
														HelperInvoked="ShowHelp"
														HelpText="@SVConsequences.Comlpication.GetDescription()" />
													</div>
													<div class="d-flex gap-2">
														@SVConsequences.ReducedEffect.ToUI() <HelperStarter Title="@SVConsequences.ReducedEffect.ToUI()"
														HelperInvoked="ShowHelp"
														HelpText="@SVConsequences.ReducedEffect.GetDescription()" />
													</div>
													<div class="d-flex gap-2">
														Daño MENOR <HelperStarter Title="@SVConsequences.Harm.ToUI()"
														HelperInvoked="ShowHelp"
														HelpText="@SVConsequences.Harm.GetDescription()" />
													</div>
													<div class="d-flex gap-2">
														Empeora tu posición <HelperStarter Title="@SVConsequences.WorsePosition.ToUI()"
														HelperInvoked="ShowHelp"
														HelpText="@SVConsequences.WorsePosition.GetDescription()" />
													</div>
												</div>
											</li>
										</ul>
									}							
								</div>
							</td>
							<td class="@(GetBackgroundTag(SVPositions.Risky, SVRollResult.Mild))">
								<div class="TdContainer">
									@if (Roll.Result != SVRollResult.NotSet && (GetBackgroundTag(SVPositions.Risky, SVRollResult.Mild) != "Final"))
									{
										<div>-</div>
									}
									else
									{
										<strong class="mb-2">Éxito con consequencias</strong>
										<div class="d-flex flex-column ps-2 opacity-75">
											<div class="d-flex gap-2">
												Una complicacion <HelperStarter Title="@SVConsequences.Comlpication.ToUI()"
												HelperInvoked="ShowHelp"
												HelpText="@SVConsequences.Comlpication.GetDescription()" />
											</div>
											<div class="d-flex gap-2">
												Efecto reducido <HelperStarter Title="@SVConsequences.ReducedEffect.ToUI()"
												HelperInvoked="ShowHelp"
												HelpText="@SVConsequences.ReducedEffect.GetDescription()" />
											</div>
											<div class="d-flex gap-2">
												Daño MODERADO <HelperStarter Title="@SVConsequences.Harm.ToUI()"
												HelperInvoked="ShowHelp"
												HelpText="@SVConsequences.Harm.GetDescription()" />
											</div>
											<div class="d-flex gap-2">
												Empeora tu posición <HelperStarter Title="@SVConsequences.WorsePosition.ToUI()"
												HelperInvoked="ShowHelp"
												HelpText="@SVConsequences.WorsePosition.GetDescription()" />
											</div>
										</div>
									}							
								</div>
							</td>
							<td class="@(GetBackgroundTag(SVPositions.Desperate, SVRollResult.Mild))">
								<div class="TdContainer">
									@if (Roll.Result != SVRollResult.NotSet && (GetBackgroundTag(SVPositions.Desperate, SVRollResult.Mild) != "Final"))
									{
										<div>-</div>
									}
									else
									{
										<strong class="mb-2">Éxito con consequencias MAYORES</strong>
										<div class="d-flex flex-column ps-2 opacity-75">
											<div class="d-flex gap-2">
												Una complicacion SERIA <HelperStarter Title="@SVConsequences.Comlpication.ToUI()"
												HelperInvoked="ShowHelp"
												HelpText="@SVConsequences.Comlpication.GetDescription()" />
											</div>
											<div class="d-flex gap-2">
												Efecto reducido <HelperStarter Title="@SVConsequences.ReducedEffect.ToUI()"
												HelperInvoked="ShowHelp"
												HelpText="@SVConsequences.ReducedEffect.GetDescription()" />
											</div>
											<div class="d-flex gap-2">
												Daño SEVERO <HelperStarter Title="@SVConsequences.Harm.ToUI()"
												HelperInvoked="ShowHelp"
												HelpText="@SVConsequences.Harm.GetDescription()" />
											</div>
											<div class="XPHint">
												+1 XP!
											</div>
										</div>
									}								
								</div>
							</td>
						</tr>
						<tr>
							<td class="@(GetBackgroundTag(SVPositions.NotSet, SVRollResult.Fatal)) Pointer"
							@onclick="@(()=>{ForceRollResult(SVRollResult.Fatal);})">
								<div class="TdContainer">
									@if (Roll.Result != SVRollResult.NotSet && (GetBackgroundTag(SVPositions.NotSet, SVRollResult.Fatal) != "Final"))
									{
										<div>&lt;=3 </div>
									}
									else
									{
										<strong>Malas noticias</strong>
										<span class="DiceHint">&lt;=3</span>
									}							
								</div>
							</td>
							<td class="@(GetBackgroundTag(SVPositions.Controlled, SVRollResult.Fatal))">
								<div class="TdContainer">
									@if (Roll.Result != SVRollResult.NotSet && (GetBackgroundTag(SVPositions.Controlled, SVRollResult.Fatal) != "Final"))
									{
										<div>-</div>
									}
									else
									{
										<ul>
											<li>Avanzas pasando a una oportunidad arriesgada o...</li>
											<li>Retrocedes y prueba un enfoque diferente.</li>
										</ul>
									}							
								</div>
							</td>
							<td class="@(GetBackgroundTag(SVPositions.Risky, SVRollResult.Fatal))">
								<div class="TdContainer">
									@if (Roll.Result != SVRollResult.NotSet && (GetBackgroundTag(SVPositions.Risky, SVRollResult.Fatal) != "Final"))
									{
										<div>-</div>
									}
									else
									{
										<div class="d-flex flex-column ps-2">
											<div class="d-flex gap-2">
												Una complicacion <HelperStarter Title="@SVConsequences.Comlpication.ToUI()"
												HelperInvoked="ShowHelp"
												HelpText="@SVConsequences.Comlpication.GetDescription()" />
											</div>
											<div class="d-flex gap-2">
												Daño MODERADO <HelperStarter Title="@SVConsequences.Harm.ToUI()"
												HelperInvoked="ShowHelp"
												HelpText="@SVConsequences.Harm.GetDescription()" />
											</div>
											<div class="d-flex gap-2">
												Empeora tu posición <HelperStarter Title="@SVConsequences.WorsePosition.ToUI()"
												HelperInvoked="ShowHelp"
												HelpText="@SVConsequences.WorsePosition.GetDescription()" />
											</div>
											<div class="d-flex gap-2">
												Pierde la oportunida <HelperStarter Title="@SVConsequences.LostOportunity.ToUI()"
												HelperInvoked="ShowHelp"
												HelpText="@SVConsequences.LostOportunity.GetDescription()" />
											</div>
										</div>
									}							
								</div>
							</td>
							<td class="@(GetBackgroundTag(SVPositions.Desperate, SVRollResult.Fatal))">
								<div class="TdContainer">
									@if (Roll.Result != SVRollResult.NotSet && (GetBackgroundTag(SVPositions.Desperate, SVRollResult.Fatal) != "Final"))
									{
										<div>-</div>
									}
									else
									{
										<strong class="mb-2 w-100 text-right ps-5">La peor posibilidad</strong>
										<div class="d-flex flex-column ps-2 opacity-75">

											<div class="d-flex gap-2">
												Una complicacion SERIA <HelperStarter Title="@SVConsequences.Comlpication.ToUI()"
												HelperInvoked="ShowHelp"
												HelpText="@SVConsequences.Comlpication.GetDescription()" />
											</div>
											<div class="d-flex gap-2">
												Pierde la oportunida <HelperStarter Title="@SVConsequences.LostOportunity.ToUI()"
												HelperInvoked="ShowHelp"
												HelpText="@SVConsequences.LostOportunity.GetDescription()" />
											</div>
											<div class="d-flex gap-2">
												Daño SEVERO <HelperStarter Title="@SVConsequences.Harm.ToUI()"
												HelperInvoked="ShowHelp"
												HelpText="@SVConsequences.Harm.GetDescription()" />
											</div>
											<div class="XPHint">
												+1 XP!
											</div>
										</div>
									}
								</div>
							</td>
						</tr>
					</tbody>
				</table>
			</div>

			@if(Roll.Result == SVRollResult.NotSet)
			{
				<div class="d-flex gap-2 align-items-center">
					<div class="EffectBox"
					@onclick=NegotiateEffect>
						@if(Roll.HasBeenNegotiated)
						{
							<div class="d-flex gap-2">
								<i class="bi bi-chevron-double-down"></i>
								Deshacer negociación
								<i class="bi bi-chevron-double-down"></i>
							</div>
						}
						else
						{
							<div class="d-flex gap-2">
								<i class="bi bi-chevron-double-up"></i>
								Mejorar efecto, empeorando posición
								<i class="bi bi-chevron-double-up"></i>
							</div>
						}
					</div>

					<div class="d-flex gap-2 align-items-center BigButtonsbox">
						<div class="GreenButton" @onclick=RollCurrentRoll>
							TIRAR
						</div>
						<div class="RedButton" @onclick=CancelEverything>
							CANCELAR
						</div>
					</div>
				</div>
			}
			else
			{
				@if(!Roll.HasResisted)
				{
					<div>Tirada:</div>
					<div class="d-flex gap-1 m-3">
						@if (Roll.TotalDices == 0)
						{
							<div class="Dice BrokenDice">
								<div class="DiceNumber">
									@Roll.Dices[0].Item2
								</div>
							</div>
							<div class="Dice BlueDice">
								<div class="DiceNumber">
									@Roll.Dices[1].Item2
								</div>
							</div>
						}
						else
						{
							@for (int i = 0; i < Roll.TotalDices; ++i)
							{
								@if (DiceColors.Count > 0 && DiceColors.Count >= i)
								{
									<div class="Dice @DiceColors[i]">
										<div class="DiceNumber">
											@Roll.Dices[i].Item2
										</div>
									</div>
								}
							}
						}
					</div>
				}
				
				<div class="d-flex flex-column gap-1 m-3">
					@if(!Roll.IsResisting && !Roll.HasResisted)
					{
						<div class="EffectBox" @onclick=ChangeResisting>
							Resistir | Estrés <i class="bi bi-chevron-double-up"></i>(6 - tirada) | Crítico <i class="bi bi-arrow-right-short"></i> Estrés <i class="bi bi-chevron-double-down"></i> 1
						</div>
						<div>
							Usar armadura
						</div>
					}
				</div>
				<div class="GreenButton" @onclick=FinishCurrentRoll style="position:fixed; bottom:10px; right:10px;">
					Finalizar
				</div>
			}

			@if(Roll.IsResisting)
			{
				<div class="mt-3">
					Clicka en el atributo que usarás para resistir:
				</div>
				<div class="d-flex Stats gap-3 justify-content-evenly mt-4">

					<div class="hoverable ResistanceBox" @onclick=@(async()=>{await ResistWith(SVStats.Insight);})>
						<div style="pointer-events:none;">
							<StatBlock Player="Roll.Player"
							MainStat="SVStats.Insight"
							@bind-RelatedXP="Roll.Player.InsightXP"
							Sub1Stat="SVStats.Doctor"
							Sub2Stat="SVStats.Hack"
							Sub3Stat="SVStats.Rig"
							Sub4Stat="SVStats.Study"
							@bind-Sub1="Roll.Player.Doctor"
							@bind-Sub2="Roll.Player.Hack"
							@bind-Sub3="Roll.Player.Rig"
							@bind-Sub4="Roll.Player.Study" />
						</div>
						<div class="d-flex gap-1 align-items-center">
							PERSPICACIA: 
							@if(@Roll.Player.GetBonus(SVStats.Insight) == 0)
							{
								<small>None</small>
								<div class="Dice BrokenDice" />
								<div class="Dice BrokenDice" />
							}
							else
							{
								@for (int i = 0; i < Roll.Player.GetBonus(SVStats.Insight); i++)
								{
									<div class="Dice BlueDice" />
								}
							}

						</div>
					</div>
					<div class="hoverable ResistanceBox" @onclick=@(async()=>{await ResistWith(SVStats.Prowess);})>
						<div style="pointer-events:none;">
							<StatBlock Player="Roll.Player"
							MainStat="SVStats.Prowess"
							@bind-RelatedXP="Roll.Player.ProwessXP"
							Sub1Stat="SVStats.Helm"
							Sub2Stat="SVStats.Scramble"
							Sub3Stat="SVStats.Scrap"
							Sub4Stat="SVStats.Skulk"
							@bind-Sub1="Roll.Player.Helm"
							@bind-Sub2="Roll.Player.Scramble"
							@bind-Sub3="Roll.Player.Scrap"
							@bind-Sub4="Roll.Player.Skulk" />
						</div>
						<div class="d-flex gap-1 align-items-center">
							FISICALIDAD:
							@if (@Roll.Player.GetBonus(SVStats.Prowess) == 0)
							{
								<small>None</small>
								<div class="Dice BrokenDice" />
								<div class="Dice BrokenDice" />
							}
							else
							{
								@for (int i = 0; i < Roll.Player.GetBonus(SVStats.Prowess); i++)
								{
									<div class="Dice BlueDice" />
								}
							}
						</div>
					</div>
					<div class="hoverable ResistanceBox" @onclick=@(async()=>{await ResistWith(SVStats.Resolve);})>
						<div style="pointer-events:none;">
							<StatBlock Player="Roll.Player"
							MainStat="SVStats.Resolve"
							@bind-RelatedXP="Roll.Player.ResolveXP"
							Sub1Stat="SVStats.Attune"
							Sub2Stat="SVStats.Command"
							Sub3Stat="SVStats.Consort"
							Sub4Stat="SVStats.Sway"
							@bind-Sub1="Roll.Player.Attune"
							@bind-Sub2="Roll.Player.Command"
							@bind-Sub3="Roll.Player.Consort"
							@bind-Sub4="Roll.Player.Sway" />
						</div>
						<div class="d-flex gap-1 align-items-center">
							Resolución:
							@if (@Roll.Player.GetBonus(SVStats.Resolve) == 0)
							{
								<small>None</small>
								<div class="Dice BrokenDice" />
								<div class="Dice BrokenDice" />
							}
							else
							{
								@for (int i = 0; i < Roll.Player.GetBonus(SVStats.Resolve); i++)
								{
									<div class="Dice BlueDice" />
								}
							}
						</div>
					</div>
				</div>
				<div class="w-100 d-flex justify-content-end" style="position:fixed; bottom:10px; right:10px;">
					<div class="GreenButton" style="width:200px" @onclick=FinishCurrentRoll>
						Finalizar
					</div>
				</div>
			}
			else if(Roll.HasResisted)
			{
				<div class="d-flex gap-2">
					<div>
						<div>Tirada:</div>
						<div class="d-flex gap-1 m-3">
							@if (Roll.TotalDices == 0)
							{
								<div class="Dice BrokenDice">
									<div class="DiceNumber">
										@Roll.Dices[0].Item2
									</div>
								</div>
								<div class="Dice BlueDice">
									<div class="DiceNumber">
										@Roll.Dices[1].Item2
									</div>
								</div>
							}
							else
							{
								@for (int i = 0; i < Roll.TotalDices; ++i)
								{
									@if (DiceColors.Count > 0 && DiceColors.Count >= i)
									{
										<div class="Dice @DiceColors[i]">
											<div class="DiceNumber">
												@Roll.Dices[i].Item2
											</div>
										</div>
									}
								}
							}
						</div>
					</div>
					<div>
						<div>Tirada de resistencia</div>
						<div class="d-flex gap-1 m-3 align-items-start">
							<div class="d-flex gap-1 align-items-center">
								@if (Roll.Player.GetBonus(Roll.ResistanceStat) == 0)
								{
									<div class="Dice BrokenDice">
										<div class="DiceNumber">
											@Roll.ResistanceDices.OrderByDescending(x=>x).ToList()[0]
										</div>
									</div>
									<div class="Dice BlueDice">
										<div class="DiceNumber">
											@Roll.ResistanceDices.OrderByDescending(x => x).ToList()[1]
										</div>
									</div>
								}
								else
								{
									@for (int i = 0; i < Roll.ResistanceDices.Count; ++i)
									{
										<div class="Dice BlueDice">
											<div class="DiceNumber">
												@Roll.ResistanceDices[i]
											</div>
										</div>
									}
								}
								@if (Roll.Player.GetBonus(Roll.ResistanceStat) == 0)
								{
									<div>(6-@Roll.ResistanceDices.Min()) = @(6 - @Roll.ResistanceDices.Min()), Estrés: @OldStress <i class="bi bi-arrow-right-short"></i> @Roll.Player.Stress</div>
								}
								else
								{
									<div>(6-@Roll.ResistanceDices.Max()) = @(6 - @Roll.ResistanceDices.Max()), Estrés: @OldStress <i class="bi bi-arrow-right-short"></i> @Roll.Player.Stress</div>
								}
							</div>
						</div>
					</div>				
				</div>

				@if (Roll.WasTooMuchStress)
				{
					<div class="TooMuchStressBox">
						Es más estres del que puedes soportar:
						<ul>
							<li>Elige uno de tus cuatro traumas</li>
							<li>Desapareces de la escena</li>
							<li>Aparecerás más tarde, vacío y tembloroso</li>
							<li>Quedas a estrés 0, y tu vício ha sido satisfecho para la siguiente fase</li>
							<li>Recuerda que tu nuevo trauma puede aportarte XP</li>
							<li>Si marcas tu cuarto trauma, tu personage se retira</li>
						</ul>
					</div>
				}
				else /*ARMOR*/
				{

				}

				<div class="w-100 d-flex justify-content-end" style="position:fixed; bottom:10px; right:10px;">
					<div class="GreenButton" style="width:200px" @onclick=FinishCurrentRoll>
						Finalizar
					</div>
				</div>
			}
		}

	</div>
</div>


@code {
	[Parameter] public SVCharacter Player { get; set; } = new();
	[Parameter] public SVGameController? Game { get; set; }
	[Parameter] public EventCallback<Tuple<string, string>> ShowHelp{ get; set; }

	SVShip Ship => Game?.Ship ?? new SVShip();
	SVRollReport Roll => Game!.CurrentRoll!;


	private void ChangeResisting(){
		Roll.IsResisting = !Roll.IsResisting;
		SendUpdate();
	}

	private void Help()
	{
		Roll.HelperPlayer = Player;
		Player.Stress += 2;
		Game?.UpdateSharedRollInAllClients();
	}
	private void RemoveHelp()
	{
		Roll.HelperPlayer = null;
		Player.Stress -= 2;
		Game?.UpdateSharedRollInAllClients();
	}
	private async void UseGambit()
	{
		if(Roll.UsedAGambit)
		{
			Roll.UsedAGambit = false ;
			Ship.Gambits++;
		}
		else
		{
			Roll.UsedAGambit = true;
			Ship.Gambits--;
		}
		await Game!.StoreShip($"Gámbitos guardados: {Ship.Gambits}");
		Game?.UpdateSharedRollInAllClients();
	}
	int OldStress = 0;
	private async Task ResistWith(SVStats stat)
	{
		if(Game is not null)
		{
			OldStress = Roll.Player.Stress;
			Roll.ResistanceStat = stat;

			Roll.ResistanceDices.Clear();
			if(Roll.Player.GetBonus(stat) == 0)
			{
				Roll.ResistanceDices.Add(Game.RollD6());
				Roll.ResistanceDices.Add(Game.RollD6());
				Roll.ResistanceDices.OrderByDescending(x => x);
				Roll.Player.Stress += (6 - Roll.ResistanceDices[1]);
			}
			else
			{
				for (int i = 0; i < Roll.Player.GetBonus(stat); i++)
				{
					Roll.ResistanceDices.Add(Game.RollD6());
				}
				var max = Roll.ResistanceDices.Max();
				if (Roll.Player.GetBonus(stat) != 0 && Roll.ResistanceDices.Count(x => x == 6) > 1)
					Roll.Player.Stress--;
				else
					Roll.Player.Stress += (6 - max);
			}

			

			if(Roll.Player.StresLeft <= 0)
			{
				Roll.WasTooMuchStress = true;
				Player.Stress = 0;
			}

			Roll.IsResisting = false;
			Roll.HasResisted = true;
			await Game.StoreChangesOnCharacter(Player, $"Estrés: {Player.Stress}.");
			SendUpdate();
		}		
	}

	private async Task UsePYDice()
	{
		if(Roll.UsedPYForDice)
		{
			Roll.UsedPYForDice = false;
			Player.Stress -= 2;
		}
		else
		{
			Roll.UsedPYForDice = true;
			Player.Stress += 2;
		}
		if(Game is not null && Player is not null)
			await Game.StoreChangesOnCharacter(Player, $"Estrés: {Player.Stress}.");	

		Game?.UpdateSharedRollInAllClients();
	}

	void SendUpdate() => Game?.UpdateSharedRollInAllClients();

	void AddExtraDie(){
		Roll.ExtraDices ++;
		SendUpdate();
	}

	void RemoveExtraDie(){
		if(Roll.ExtraDices > 0)
		{
			Roll.ExtraDices--;
			SendUpdate();
		}
	}


	private async Task UsePYEffect()
	{
		if(Roll.UsedPYForLevel)
		{
			Roll.UsedPYForLevel = false;
			Player.Stress -= 2;
		}
		else
		{
			Roll.UsedPYForLevel = true;
			Player.Stress += 2;
		}
		if (Game is not null && Player is not null)
			await Game.StoreChangesOnCharacter(Player, $"Estrés: {Player.Stress}.");
		Game?.UpdateSharedRollInAllClients();
	}
	private async Task UsePYIncapacitate()
	{
		if (Roll.UsedPYIncapacitate)
		{
			Roll.UsedPYIncapacitate = false;
			Player.Stress -= 2;
		}
		else
		{
			Roll.UsedPYIncapacitate = true;
			Player.Stress += 2;
		}

		if (Game is not null && Player is not null)
			await Game.StoreChangesOnCharacter(Player, $"Estrés: {Player.Stress}.");
		Game?.UpdateSharedRollInAllClients();
	}

	private async Task UseDevilsBargain()
	{
		if(Roll.UsedDevilsBargain)
		{
			Roll.UsedDevilsBargain = false;
		}
		else
		{
			Roll.UsedDevilsBargain = true;
		}
	}

	private async Task ShowDevilsHelp()
	{
		await ShowHelp.InvokeAsync(new Tuple<string, string>(
			"Pactar con el diablo",
				@"Acepa un pacto con el diablo a cambio de un dado extra, algunos ejemplos son:
				\nDaños colaterales, daños no intencionados.
				Sacrificar un crédito o un objeto.
				Traicionar a un amigo o a un ser querido.
				Ofender o enfadar a una facción.
				Iniciar y/o marcar un reloj problemático.
				Agregar presión a la tripulación a partir de pruebas o testigos.
				Sufrir daño."));
	}

	string GetBackgroundTag(SVPositions position, SVRollResult result)
	{
		string s = "";
		if (position == Roll.Position && result == Roll.Result)
		{
			s = "Final";
		}
		else if (position == Roll.Position || result == Roll.Result)
		{
			s = "Selected";
		}
		else
		{
			s = "NotSelected";
		}

		return s;
	}

	void ForceRollResult(SVRollResult res){
		if(Roll.Result == res) 
			Roll.Result = SVRollResult.NotSet;
		else
			Roll.Result = res;
		SendUpdate();
	}

	void NegotiateEffect()
	{
		if (!Roll.HasBeenNegotiated)
		{
			if (Roll.Effect == SVEffect.Extreme) return;
			if (Roll.Position == SVPositions.Desperate) return;

			if (Roll.BaseEffect == SVEffect.Zero) Roll.BaseEffect = SVEffect.Limited;
			else if (Roll.BaseEffect == SVEffect.Limited) Roll.BaseEffect = SVEffect.Standard;
			else if (Roll.BaseEffect == SVEffect.Standard) Roll.BaseEffect = SVEffect.Great;
			else if (Roll.BaseEffect == SVEffect.Great) Roll.BaseEffect = SVEffect.Extreme;
			else return;

			if (Roll.Position == SVPositions.Controlled) Roll.Position = SVPositions.Risky;
			else if (Roll.Position == SVPositions.Risky) Roll.Position = SVPositions.Desperate;


			Roll.HasBeenNegotiated = true;
		}
		else
		{
			if (Roll.BaseEffect == SVEffect.Extreme) Roll.BaseEffect = SVEffect.Great;
			else if (Roll.BaseEffect == SVEffect.Great) Roll.BaseEffect = SVEffect.Standard;
			else if (Roll.BaseEffect == SVEffect.Standard) Roll.BaseEffect = SVEffect.Limited;
			else if (Roll.BaseEffect == SVEffect.Limited) Roll.BaseEffect = SVEffect.Zero;

			if (Roll.Position == SVPositions.Desperate) Roll.Position = SVPositions.Risky;
			else if (Roll.Position == SVPositions.Risky) Roll.Position = SVPositions.Controlled;
			Roll.HasBeenNegotiated = false;
		}

		SendUpdate();
	}

	List<string> DiceColors 
	{
		get{
			List<string> Dices = new();
			if (Roll.TotalDices == 0)
			{
				Dices.Add("BrokenDice");
				Dices.Add("BlueDice");
			}
			else
			{
				for (int i = 0; i < Roll.Player.GetBonus(Roll.Stat); i++)
				{
					Dices.Add("BlueDice");
				}
				if (Roll.HelperPlayer is not null)
					Dices.Add("HelperDice");
				for (int i = 0; i < Roll.ExtraDices; i++)
				{
					Dices.Add("YellowDice");
				}
				if (Roll.UsedAGambit)
					Dices.Add("GreenDice");
				if (Roll.UsedPYForDice)
					Dices.Add("RedDice");
				if (Roll.UsedDevilsBargain)
					Dices.Add("RedDice");
			}
			return Dices;
		}
	}

	void RollCurrentRoll()
	{
		if(Game is not null && Game.CurrentRoll is not null )
		{
			Game?.RollCurrentRoll();
			DiceColors.Clear();
		}
		SendUpdate();
	}

	async Task CancelEverything()
	{
		if (Game is not null)
		{
			if (Roll.UsedAGambit)
			{
				Roll.UsedAGambit = false;
				Ship.Gambits++;
				await Game!.StoreShip($"Gámbitos guardados: {Ship.Gambits}");
			}

			if (Roll.UsedPYForDice)
			{
				Roll.UsedPYForDice = false;
				if (Game is not null && Roll.Player is not null)
				{
					Roll.Player.Stress -= 2;
					await Game.StoreChangesOnCharacter(Roll.Player, $"Cancela estrés por dado. Estrés: {Player.Stress}.");
				}
			}

			if (Roll.UsedPYForLevel)
			{
				Roll.UsedPYForLevel = false;

				if (Game is not null && Roll.Player is not null)
				{
					Roll.Player.Stress -= 2;
					await Game.StoreChangesOnCharacter(Roll.Player, $"cancela estres por efecto. Estrés: {Player.Stress}.");
				}
			}

			if (Roll.UsedPYIncapacitate)
			{
				Roll.UsedPYIncapacitate = false;

				if (Game is not null && Roll.Player is not null)
				{
					Roll.Player.Stress -= 2;
					await Game.StoreChangesOnCharacter(Roll.Player, $"cancela actuar incapacitado Estrés: {Player.Stress}.");
				}
			}

			if (Roll.UsedDevilsBargain)
			{
				Roll.UsedDevilsBargain = false;
			}

			if (Roll.HelperPlayer is not null)
			{
				Roll.HelperPlayer.Stress -= 2;
				await Game!.StoreChangesOnCharacter(Roll.HelperPlayer, $"cancela ayuda estrés: {Roll.HelperPlayer.Stress}.");
			}

			Game!.CloseCurrentRollWindowInAllClients();
		}
	}

	void FinishCurrentRoll(){
		Game!.CloseCurrentRollWindowInAllClients();
	}
}
