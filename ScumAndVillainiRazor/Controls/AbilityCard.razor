@inject IToastService Toaster
@inject SVMovesService Moves

@if(IsExpanded)
{
	<div class="ability 
			@(IsShipAbility?"Ship":"NoShip") 
			@(IsVeteran?"VeteranAbility":"")"
		 style="flex-grow:@(Grow?"1":"none");">
		<div class="d-flex align-items-center gap-1">
			<div class="fs-4" style="color:#FFFFFFCC;">@Title</div>
			<i class="bi bi-caret-up ExpandButton" onclick="@(()=>{IsExpanded = false;})"></i>
		</div>
		<div style="opacity: 0.8; font-family: system-ui; margin-bottom:5px;"><DecodedString Value="@Move.Description" /></div>
		<HelperStarter HelperInvoked="ShowHelp" HelpText="@GetAbilityHelpText(MoveID)" Title="@Move.Title" ForcedOpacity="75" />
	</div>
}
else
{
	<div class="ability
			@(IsShipAbility?"Ship":"NoShip")
			@(IsVeteran?"VeteranAbility":"")"
		 style="flex-grow:@(Grow?"1":"none");">
		<div class="d-flex align-items-center gap-1">
			<div class="fs-4" style="color:#FFFFFFCC;">@Title</div>
			<i class="bi bi-caret-down ExpandButton" onclick="@(()=>{IsExpanded = true;})"></i>
		</div>
	</div>
}



@code {
	[Parameter] public SVCharacter Player { get; set; } = new();
	[Parameter] public SVShip Ship { get; set; } = new();
	[Parameter] public bool IsShipAbility { get; set; } = false;
	[Parameter] public SVMoveIDs MoveID { get; set; } = SVMoveIDs.NotSet;
	[Parameter] public EventCallback<Tuple<string, string>> ShowHelp { get; set; }
	[Parameter] public bool IsExpanded { get; set; } = false;
	[Parameter] public bool Grow { get; set; } = false;

	private bool IsVeteran = false;
	private string Title
	{
		get
		{
			if (IsVeteran)
			{
				if (IsShipAbility)
					return GetShipTypeFromAbility(MoveID).ToUI() + " : " + Move.Title;
				else
					return Owner.ToUI() + " : " + @Move.Title;
			}
			else return Move.Title;
		}
	}

	SVMove Move = new(SVMoveIDs.NotSet, SVStats.NotSet);
	SVClasses Owner = SVClasses.NotSet;

	protected override void OnParametersSet()
	{
		Move = GetMove(MoveID);

		if (IsShipAbility)
			IsVeteran = GetShipTypeFromAbility(MoveID) != Ship.ShipType;
		else
		{
			Owner = GetClassFromAbility(MoveID);
			IsVeteran = Owner != Player.Profession;
		}		
	}

	SVClasses GetClassFromAbility(SVMoveIDs id)
	{
		foreach (SVClasses cl in Enum.GetValues(typeof(SVClasses)))
		{
			if (cl.GetStartingAbility() == id)
				return cl;
			if (cl.AvailableAbilities().Contains(id))
				return cl;
		}
		return SVClasses.NotSet;
	}

	ShipTypes GetShipTypeFromAbility(SVMoveIDs ability)
	{
		if (SVGameController.GetAllAvailableSpecialAbiltiesFor(ShipTypes.Cerberus).Contains(ability))
			return ShipTypes.Cerberus;
		else if (SVGameController.GetAllAvailableSpecialAbiltiesFor(ShipTypes.Stardancer).Contains(ability))
			return ShipTypes.Stardancer;
		else
			return ShipTypes.Firedrake;
	}

	private string GetAbilityHelpText(SVMoveIDs id)
	{
		return Move.Description + "\n\n" + Move.Details;
	}

	private SVMove GetMove(SVMoveIDs id) => Moves.GetMovement(id) as SVMove ?? new SVMove(id, SVStats.NotSet) { Title = $"Error for {id.ToString()}" };
}
